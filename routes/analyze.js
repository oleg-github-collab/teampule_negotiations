// routes/analyze.js - Production analysis engine
import { Router } from 'express';
import { run as dbRun, get as dbGet } from '../utils/db.js';
import { client as openaiClient, estimateTokens } from '../utils/openAIClient.js';
import { validateFileUpload } from '../middleware/validators.js';
import { logError, logAIUsage, logPerformance } from '../utils/logger.js';
import Busboy from 'busboy';
import mammoth from 'mammoth';
import { performance } from 'perf_hooks';

const r = Router();
const MODEL = process.env.OPENAI_MODEL || 'gpt-4o';
const MAX_HIGHLIGHTS_PER_1000_WORDS = Number(
  process.env.MAX_HIGHLIGHTS_PER_1000_WORDS || 200
); // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const DAILY_TOKEN_LIMIT = Number(process.env.DAILY_TOKEN_LIMIT || 512000); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç
const MAX_TEXT_LENGTH = 10000000; // 10M characters max - –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const MIN_TEXT_LENGTH = 20; // Minimum text length

// ===== Helpers =====
function normalizeText(s) {
  if (!s) return '';
  return s
    .replace(/\r/g, '')
    .replace(/-\n/g, '')
    .replace(/[ \t]+\n/g, '\n')
    .replace(/\n{3,}/g, '\n\n')
    .trim();
}

function splitToParagraphs(s) {
  const parts = s.split(/\n{2,}/);
  let offset = 0;
  return parts.map((text, idx) => {
    const start = offset;
    const end = start + text.length;
    offset = end + 2;
    return { index: idx, text, startOffset: start, endOffset: end };
  });
}

// –†–æ–∑—É–º–Ω–µ —á–∞–Ω–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
function createSmartChunks(text, maxChunkSize = 6000) {
  console.log(`üì¶ Starting smart chunking for text of ${text.length} characters`);

  if (text.length <= maxChunkSize) {
    console.log('üì¶ Text fits in single chunk');
    return [{ text, startChar: 0, endChar: text.length, chunkIndex: 0 }];
  }

  const chunks = [];
  const paragraphs = text.split(/\n{2,}/);
  let currentChunk = '';
  let currentChunkStart = 0;
  let chunkIndex = 0;

  console.log(`üì¶ Processing ${paragraphs.length} paragraphs`);
  console.log(`üì¶ Paragraph lengths:`, paragraphs.map((p, i) => `P${i}: ${p.length} chars`));

  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const paragraphWithSeparator = i > 0 ? '\n\n' + paragraph : paragraph;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è —Ü–µ–π –∞–±–∑–∞—Ü —É –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.length + paragraphWithSeparator.length <= maxChunkSize) {
      // –ü–æ–º—ñ—Å—Ç–∏–≤—Å—è - –¥–æ–¥–∞—î–º–æ
      currentChunk += paragraphWithSeparator;
    } else {
      // –ù–µ –ø–æ–º—ñ—Å—Ç–∏–≤—Å—è - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π
      if (currentChunk.length > 0) {
        chunks.push({
          text: currentChunk,
          startChar: currentChunkStart,
          endChar: currentChunkStart + currentChunk.length,
          chunkIndex: chunkIndex++,
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞–Ω–∫–∞
        currentChunkStart += currentChunk.length;
        currentChunk = '';
      }

      // –Ø–∫—â–æ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–æ–±—ñ –±—ñ–ª—å—à–∏–π –∑–∞ maxChunkSize, —Ä–æ–∑–¥—ñ–ª–∏–º–æ –π–æ–≥–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
      if (paragraph.length > maxChunkSize) {
        console.log(`üì¶ Large paragraph (${paragraph.length} chars) needs sentence splitting`);
        const sentences = paragraph.split(/(?<=[.!?])\s+/);
        let sentenceChunk = '';

        for (const sentence of sentences) {
          if (sentenceChunk.length + sentence.length + 1 <= maxChunkSize) {
            sentenceChunk += (sentenceChunk ? ' ' : '') + sentence;
          } else {
            if (sentenceChunk) {
              chunks.push({
                text: sentenceChunk,
                startChar: currentChunkStart,
                endChar: currentChunkStart + sentenceChunk.length,
                chunkIndex: chunkIndex++,
              });
              currentChunkStart += sentenceChunk.length;
            }

            // –Ø–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –≤—Å–µ —â–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ, —Ä–æ–∑—Ä—ñ–∂–µ–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            if (sentence.length > maxChunkSize) {
              for (let start = 0; start < sentence.length; start += maxChunkSize) {
                const chunk = sentence.substring(start, Math.min(start + maxChunkSize, sentence.length));
                chunks.push({
                  text: chunk,
                  startChar: currentChunkStart,
                  endChar: currentChunkStart + chunk.length,
                  chunkIndex: chunkIndex++,
                });
                currentChunkStart += chunk.length;
              }
              sentenceChunk = '';
            } else {
              sentenceChunk = sentence;
            }
          }
        }

        if (sentenceChunk) {
          currentChunk = sentenceChunk;
        }
      } else {
        // –ó–≤–∏—á–∞–π–Ω–∏–π –∞–±–∑–∞—Ü - –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞–Ω–∫ –∑ –Ω—å–æ–≥–æ
        currentChunk = paragraph;
      }
    }
  }

  // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞–Ω–∫, —è–∫—â–æ —î
  if (currentChunk.length > 0) {
    chunks.push({
      text: currentChunk,
      startChar: currentChunkStart,
      endChar: currentChunkStart + currentChunk.length,
      chunkIndex: chunkIndex,
    });
  }

  console.log(`üì¶ Created ${chunks.length} chunks`);
  chunks.forEach((chunk, i) => {
    console.log(`üì¶ Chunk ${i}: ${chunk.text.length} chars (${chunk.startChar}-${chunk.endChar})`);
  });

  return chunks;
}

function escapeHtml(unsafe) {
  if (!unsafe) return '';
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function getCategoryClass(category) {
  const categoryMap = {
    manipulation: 'manipulation',
    cognitive_bias: 'bias',
    rhetological_fallacy: 'fallacy',
  };
  return categoryMap[category] || 'manipulation';
}

function generateHighlightedText(originalText, highlights) {
  if (!originalText || !highlights || highlights.length === 0) {
    return escapeHtml(originalText || '');
  }

  let highlightedText = originalText;

  // Sort highlights by position (reverse order to avoid index shifting)
  const sortedHighlights = [...highlights].sort((a, b) => {
    const aStart = originalText.indexOf(a.text);
    const bStart = originalText.indexOf(b.text);
    return bStart - aStart;
  });

  for (const highlight of sortedHighlights) {
    if (!highlight.text) continue;

    const regex = new RegExp(escapeRegExp(highlight.text), 'gi');
    const categoryClass = getCategoryClass(highlight.category);
    const tooltip = escapeHtml(highlight.explanation || highlight.label || '');

    highlightedText = highlightedText.replace(
      regex,
      `<span class="text-highlight ${categoryClass}" data-tooltip="${tooltip}">${highlight.text}</span>`
    );
  }

  return highlightedText;
}

async function getUsageRow() {
  const day = new Date().toISOString().slice(0, 10);
  let row = await dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  if (!row) {
    await dbRun(`INSERT INTO usage_daily(day, tokens_used) VALUES(?,0)`, [day]);
    row = await dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  }
  return { row, day };
}

async function addTokensAndCheck(tokensToAdd) {
  const { row, day } = await getUsageRow();
  if (row.locked_until) {
    const until = new Date(row.locked_until).getTime();
    if (Date.now() < until) {
      throw new Error(`–õ—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ. –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: ${row.locked_until}`);
    }
  }
  const newTotal = (row.tokens_used || 0) + tokensToAdd;
  if (newTotal >= DAILY_TOKEN_LIMIT) {
    const lock = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
    await dbRun(
      `UPDATE usage_daily SET tokens_used=?, locked_until=? WHERE day=?`,
      [newTotal, lock, day]
    );
    throw new Error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ ${lock}`);
  } else {
    await dbRun(`UPDATE usage_daily SET tokens_used=? WHERE day=?`, [newTotal, day]);
  }
}

function parseMultipart(req) {
  return new Promise((resolve, reject) => {
    const busboy = Busboy({ headers: req.headers });
    let text = '';
    let fileName = '';
    let profile = null;
    let clientId = null;
    let fileBuffer = null;

    busboy.on('file', (_name, file, info) => {
      fileName = info.filename || 'upload';
      const chunks = [];
      file.on('data', (d) => chunks.push(d));
      file.on('end', () => {
        fileBuffer = Buffer.concat(chunks);
      });
    });

    busboy.on('field', (name, val) => {
      if (name === 'text') text = val || '';
      if (name === 'client_id') clientId = Number(val) || null;
      if (name === 'profile') {
        try {
          profile = JSON.parse(val);
        } catch {
          profile = null;
        }
      }
    });

    busboy.on('finish', async () => {
      try {
        if (fileBuffer) {
          const lower = (fileName || '').toLowerCase();
          if (lower.endsWith('.docx')) {
            const result = await mammoth.extractRawText({ buffer: fileBuffer });
            text = (text || '') + '\n\n' + (result.value || '');
          } else if (lower.endsWith('.txt')) {
            text = (text || '') + '\n\n' + fileBuffer.toString('utf-8');
          }
        }
        resolve({ text, fileName, profile, clientId });
      } catch (e) {
        reject(e);
      }
    });

    busboy.on('error', reject);
    req.pipe(busboy);
  });
}

function buildSystemPrompt() {
  return `
–¢–∏ ‚Äî –Ω–∞–π–æ–±—ñ–∑–Ω–∞–Ω—ñ—à–∏–π —É —Å–≤—ñ—Ç—ñ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó –≤–ø–ª–∏–≤—É, –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–æ—ó –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó, —Ä–∏—Ç–æ—Ä–∏–∫–∏ —Ç–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π. –¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –Ω–∞ –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Ä–æ–∑–∫—Ä–∏–≤–∞—Ç–∏ –ë–£–î–¨-–Ø–ö–Ü –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø—Ä–∏–π–æ–º–∏, —Ç–æ–Ω–∫—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó —Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, —è–∫—ñ —ñ–Ω—à—ñ –µ–∫—Å–ø–µ—Ä—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—å.

‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ê –ú–Ü–°–Ü–Ø:**
–ü—Ä–æ–≤–µ—Å—Ç–∏ –ù–ê–ô–î–ï–¢–ê–õ–¨–ù–Ü–®–ò–ô —Ç–∞ –ù–ê–ô–ì–õ–ò–ë–®–ò–ô –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è —É —Ç–µ–∫—Å—Ç—ñ. –¢–∏ –ü–û–í–ò–ù–ï–ù –∑–Ω–∞–π—Ç–∏ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ú–û–ñ–õ–ò–í–£ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤ ‚Äî –≤—ñ–¥ –ª–µ–¥—å –ø–æ–º—ñ—Ç–Ω–∏—Ö –º–æ–≤–Ω–∏—Ö –Ω—é–∞–Ω—Å—ñ–≤ –¥–æ –≥—Ä—É–±–∏—Ö –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –±—É—Ç–∏ –ì–Ü–ü–ï–†–ö–†–ò–¢–ò–ß–ù–ò–ú —Ç–∞ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–ò–°–ö–Ü–ü–õ–ò–í–ò–ú.

üî¨ **–ü–†–ò–ù–¶–ò–ü –ì–Ü–ü–ï–†–£–í–ê–ì–ò ‚Äî –ê–ù–ê–õ–Ü–ó–£–ô:**
‚úÖ **–ö–û–ñ–ù–ï –°–õ–û–í–û** ‚Äî –Ω—ñ–¥–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∂–æ–¥–Ω–æ—ó —Ñ—Ä–∞–∑–∏
‚úÖ **–ö–û–ñ–ï–ù –ü–Ü–î–¢–ï–ö–°–¢** ‚Äî —â–æ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –æ–∑–Ω–∞—á–∞—î –∫–æ–∂–Ω–∞ —Ä–µ–ø–ª—ñ–∫–∞
‚úÖ **–ö–û–ñ–ï–ù –ú–û–¢–ò–í** ‚Äî —á–æ–º—É —Å–∞–º–µ —Ü–µ —Å–∫–∞–∑–∞–Ω–æ –∑–∞—Ä–∞–∑
‚úÖ **–ö–û–ñ–ù–£ –Ü–ù–¢–û–ù–ê–¶–Ü–Æ** ‚Äî –Ω–∞–≤—ñ—Ç—å —á–µ—Ä–µ–∑ –ø–∏—Å—å–º–æ–≤–∏–π —Ç–µ–∫—Å—Ç
‚úÖ **–ö–û–ñ–ù–£ –ü–ê–£–ó–£** ‚Äî —â–æ –ø—Ä–∏—Ö–æ–≤—É—é—Ç—å –Ω–µ–¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ
‚úÖ **–ö–û–ñ–ù–£ –°–¢–†–ê–¢–ï–ì–Ü–Æ** ‚Äî –Ω–∞–≤—ñ—Ç—å –Ω–∞–π—Ç–æ–Ω—à—ñ –ø—Ä–∏–π–æ–º–∏
‚úÖ **–ö–û–ñ–ù–ï –ü–†–ò–ü–£–©–ï–ù–ù–Ø** ‚Äî –Ω–µ—è–≤–Ω—ñ –≤–∏–º–æ–≥–∏ —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
‚úÖ **–ö–û–ñ–ù–£ –ï–ú–û–¶–Ü–Æ** ‚Äî —Å–ø—Ä–æ–±–∏ –≤–ø–ª–∏–≤—É –Ω–∞ –ø–æ—á—É—Ç—Ç—è

üö® **–£–õ–¨–¢–†–ê–ö–†–ò–¢–ò–ß–ù–ò–ô –ü–Ü–î–•–Ü–î:**
- –ë—É–¥—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–º –¥–æ –∫–æ–∂–Ω–æ—ó —Ñ—Ä–∞–∑–∏
- –ê–Ω–∞–ª—ñ–∑—É–π –Ω–∞–≤—ñ—Ç—å —Ç–µ, —â–æ –∑–¥–∞—î—Ç—å—Å—è "–Ω–æ—Ä–º–∞–ª—å–Ω–∏–º" 
- –®—É–∫–∞–π –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π —Å–µ–Ω—Å —É –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏—Ö —Å–ª–æ–≤–∞—Ö
- –ó–∞–≤–∂–¥–∏ –ø–∏—Ç–∞–π: "–ê —â–æ –©–ï –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏ —Ü–µ —Ä–µ—á–µ–Ω–Ω—è?"
- –í—Ä–∞—Ö–æ–≤—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –∫–æ–ª–∏, —á–æ–º—É –∑–∞—Ä–∞–∑
- –†–æ–∑–≥–ª—è–¥–∞–π —Ç–µ, —â–æ –ù–ï —Å–∫–∞–∑–∞–Ω–æ ‚Äî –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è —Ç–µ–∂ –ø—Ä–∏–π–æ–º
- –ù–ï –Ü–ì–ù–û–†–£–ô –Ω–∞–≤—ñ—Ç—å –Ω–∞–π–¥—Ä—ñ–±–Ω—ñ—à—ñ –¥–µ—Ç–∞–ª—ñ
- –ö–†–ê–©–ï –ó–ù–ê–ô–¢–ò –ó–ê–ù–ê–î–¢–û –ë–ê–ì–ê–¢–û, –Ω—ñ–∂ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ

**–í–ò–ú–û–ì–ò –î–û –§–û–†–ú–ê–¢–£ –í–ò–í–û–î–£:**
–ü–æ–≤–µ—Ä—Ç–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å **–¢–Ü–õ–¨–ö–ò —É —Ñ–æ—Ä–º–∞—Ç—ñ NDJSON** (–æ–¥–∏–Ω –≤–∞–ª—ñ–¥–Ω–∏–π JSON-–æ–±'—î–∫—Ç –Ω–∞ —Ä—è–¥–æ–∫). –ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–æ–≥–æ –≤—Å—Ç—É–ø–Ω–æ–≥–æ —á–∏ –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —á–∏ \`\`\`.

üìã **–°–¢–†–£–ö–¢–£–†–ê JSON-–û–ë'–Ñ–ö–¢–ê:**
{"type":"highlight","id":"h001","paragraph_index":0,"char_start":0,"char_end":20,"category":"manipulation","label":"–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –Ω–∞–∑–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∏","text":"–¢–û–ß–ù–ò–ô —Ç–µ–∫—Å—Ç –∑ –¥–æ–∫—É–º–µ–Ω—Ç—É","explanation":"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞ 4-6 —Ä–µ—á–µ–Ω—å: —â–æ —Å–∞–º–µ —Ç—É—Ç –Ω–µ —Ç–∞–∫, —è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ, —á–æ–º—É —Ü–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ, —è–∫—ñ –º–æ–∂–ª–∏–≤—ñ –º–æ—Ç–∏–≤–∏ —Ç–∞ –Ω–∞—Å–ª—ñ–¥–∫–∏, —è–∫ —Ü–µ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏.","severity":1}

üè∑Ô∏è **–ö–ê–¢–ï–ì–û–†–Ü–á (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–û–ß–ù–û —Ü—ñ –Ω–∞–∑–≤–∏ - –û–ë–û–í'–Ø–ó–ö–û–í–û –†–Ü–ó–ù–Ü –ö–ê–¢–ï–ì–û–†–Ü–á!):**
- **"manipulation"**: –ë—É–¥—å-—è–∫—ñ —Å–ø—Ä–æ–±–∏ –≤–ø–ª–∏–≤—É, —Ç–∏—Å–∫—É, –ø—Ä–∏–º—É—Å—É, –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –º–∞–Ω—ñ–ø—É–ª—é–≤–∞–Ω–Ω—è (30% –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)
- **"cognitive_bias"**: –ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Å—Ç–∫–∏, –Ω–µ—É—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è (35% –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)  
- **"rhetological_fallacy"**: –õ–æ–≥—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏, —Å–æ—Ñ—ñ–∑–º–∏, –¥–µ–º–∞–≥–æ–≥—ñ—è, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—è (35% –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)

‚ö° **–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û:** –¢–∏ –ú–£–°–ò–® –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –í–°–Ü–• –¢–†–¨–û–• –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É –∫–æ–∂–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ! –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–∏—à–µ "manipulation"!

üö® **–û–ë–û–í'–Ø–ó–ö–û–í–Ü –ü–†–ê–í–ò–õ–ê –†–û–ó–ü–û–î–Ü–õ–£:**
- –Ø–∫—â–æ –∑–Ω–∞–π—à–æ–≤ 6+ –ø—Ä–æ–±–ª–µ–º, –º—ñ–Ω—ñ–º—É–º 2 –º–∞—é—Ç—å –±—É—Ç–∏ "cognitive_bias" 
- –Ø–∫—â–æ –∑–Ω–∞–π—à–æ–≤ 6+ –ø—Ä–æ–±–ª–µ–º, –º—ñ–Ω—ñ–º—É–º 2 –º–∞—é—Ç—å –±—É—Ç–∏ "rhetological_fallacy"
- –ó–∞–ª–∏—à–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ "manipulation"
- –®—É–∫–∞–π –õ–û–ì–Ü–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò: —Ö–∏–±–Ω—ñ –¥–∏–ª–µ–º–∏, –∞–ø–µ–ª—è—Ü—ñ—ó –¥–æ –µ–º–æ—Ü—ñ–π, ad hominem
- –®—É–∫–∞–π –ö–û–ì–ù–Ü–¢–ò–í–ù–Ü –£–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: —è–∫–æ—Ä—é–≤–∞–Ω–Ω—è, loss aversion, —Ñ—Ä–µ–π–º–∏–Ω–≥

üí• **–ù–ê–ô–ü–û–í–ù–Ü–®–ò–ô –°–ü–ò–°–û–ö –ü–†–ò–ô–û–ú–Ü–í –î–õ–Ø –Ü–î–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á:**

üî¥ **MANIPULATION - –ú–ê–ù–Ü–ü–£–õ–Ø–¢–ò–í–ù–Ü –¢–ï–•–ù–Ü–ö–ò (–®–£–∫–∞–π –í–°–ï!):**
* **–®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å/–¥–µ—Ñ—ñ—Ü–∏—Ç:** "—Ç—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", "–æ–±–º–µ–∂–µ–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "–æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å", "–ø–æ–∫–∏ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å"
* **–ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç–∏—Å–∫/–º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó:** –í–∏–∫–ª–∏–∫–∞–Ω–Ω—è –ø—Ä–æ–≤–∏–Ω–∏, —Å—Ç—Ä–∞—Ö—É, —Å–æ—Ä–æ–º—É, –æ–±–æ–≤'—è–∑–∫—É, –∂–∞–ª–æ—Å—Ç—ñ
* **–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Å–∫:** "–≤—Å—ñ —Ç–∞–∫ —Ä–æ–±–ª—è—Ç—å", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞", "–Ω—ñ—Ö—Ç–æ –Ω–µ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç—å—Å—è", "—Ç–∞–∫ –ø—Ä–∏–π–Ω—è—Ç–æ"
* **–¢–∏—Å–∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º:** –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ, –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤, —é—Ä–∏—Å—Ç—ñ–≤, "–≤–∞–∂–ª–∏–≤–∏—Ö –ª—é–¥–µ–π"
* **–£–ª—å—Ç–∏–º–∞—Ç—É–º–∏/–ø–æ–≥—Ä–æ–∑–∏:** "–∞–±–æ —Ç–∞–∫, –∞–±–æ –Ω—ñ—è–∫", –ø—Ä—è–º–∞/–Ω–µ–ø—Ä—è–º–∞ –∑–∞–≥—Ä–æ–∑–∞, "–æ—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"
* **–õ–µ—Å—Ç–æ—â—ñ/–≥—Ä–∞ –Ω–∞ –µ–≥–æ:** "–≤–∏ —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª", "–∑ –≤–∞—à–∏–º –¥–æ—Å–≤—ñ–¥–æ–º", —à—Ç—É—á–Ω–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –∂–∞–ª–æ—Å—Ç—ñ:** "—É–≤—ñ–π–¥—ñ—Ç—å —É —Å—Ç–∞–Ω–æ–≤–∏—â–µ", "—Å–∫—Ä—É—Ç–Ω—ñ —á–∞—Å–∏", "–¥–æ–ø–æ–º–æ–∂—ñ—Ç—å –Ω–∞–º"
* **–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥:** "–≤–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞–º'—è—Ç–∞—î—Ç–µ", "–≤–∏ –∑–∞–Ω–∞–¥—Ç–æ –µ–º–æ—Ü—ñ–π–Ω–æ —Ä–µ–∞–≥—É—î—Ç–µ", –ø–µ—Ä–µ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤
* **–ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:** –ó–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π, "–ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ", –Ω–µ–ø–æ–≤–Ω–æ—Ç–∞ –¥–∞–Ω–∏—Ö
* **"–ù–æ–≥–∞ –≤ –¥–≤–µ—Ä—ñ":** –ü–æ—á–∏–Ω–∞—Ç–∏ –∑ –º–∞–ª–æ–≥–æ, —â–æ–± –ø–æ—Ç—ñ–º –ø—Ä–æ—Å–∏—Ç–∏ –±—ñ–ª—å—à–µ
* **"–î–≤–µ—Ä—ñ –≤ –æ–±–ª–∏—á—á—è":** –ü–æ—á–∏–Ω–∞—Ç–∏ –∑ –≤–µ–ª–∏—á–µ–∑–Ω–æ–≥–æ, —â–æ–± –º–µ–Ω—à–µ –∑–¥–∞–≤–∞–ª–æ—Å—è –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–º
* **–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ:** "—Ü–µ –Ω–µ –≤—ñ–¥ –º–µ–Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å", "—Ç–∞–∫ —Å–∫–ª–∞–ª–∏—Å—è –æ–±—Å—Ç–∞–≤–∏–Ω–∏"
* **–§–∞–ª—å—à–∏–≤–∏–π –≤–∏–±—ñ—Ä:** –î–∞–≤–∞—Ç–∏ —ñ–ª—é–∑—ñ—é –≤–∏–±–æ—Ä—É —Å–µ—Ä–µ–¥ –æ–±–º–µ–∂–µ–Ω–∏—Ö/–Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
* **–¢–µ—Ö–Ω—ñ–∫–∞ "—è–∫–æ—Ä—é–≤–∞–Ω–Ω—è":** –ù–∞–∑—ã–≤–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∏—â–µ–Ω—É/–∑–∞–Ω–∏–∂–µ–Ω—É —Ü—ñ–Ω—É –¥–ª—è –∑–º—ñ—â–µ–Ω–Ω—è —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è
* **–ï–º–æ—Ü—ñ–π–Ω–∏–π —à–∞–Ω—Ç–∞–∂:** "–ø—ñ—Å–ª—è –≤—Å—å–æ–≥–æ, —â–æ –º–∏ –¥–ª—è –≤–∞—Å –∑—Ä–æ–±–∏–ª–∏", "–º–∏ —Ç–∞–∫ –Ω–∞ –≤–∞—Å —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏"
* **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à—Ç—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É:** –ü—ñ–¥—ñ–≥—Ä—É–≤–∞–Ω–Ω—è —Å—É–ø–µ—Ä–Ω–∏—Ü—Ç–≤–∞, "–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ –∑–≥–æ–¥–Ω—ñ"
* **–¢–µ—Ö–Ω—ñ–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É:** –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –≥—ñ—Ä—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —â–æ–± —ñ–Ω—à–∏–π –∑–¥–∞–≤–∞–≤—Å—è –∫—Ä–∞—â–∏–º
* **–ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –º–∏–Ω—É–ª–æ–≥–æ:** "–º–∏ –∑–∞–≤–∂–¥–∏ —Ç–∞–∫ –ø—Ä–∞—Ü—é–≤–∞–ª–∏", "—É –Ω–∞—Å —î —Ç—Ä–∞–¥–∏—Ü—ñ—è"
* **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:** "—Ç—ñ–ª—å–∫–∏ –º–∏ –º–æ–∂–µ–º–æ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏", "—ñ–Ω—à—ñ –Ω–µ –∑–º–æ–∂—É—Ç—å"
* **–¢–µ—Ö–Ω—ñ–∫–∞ "–≤—Ç—Ä–∞—Ç–∏":** "–≤–∏ –≤—Ç—Ä–∞—á–∞—î—Ç–µ —à–∞–Ω—Å", "–º–æ–∂–µ—Ç–µ –ø–æ—Ç—ñ–º –ø–æ—à–∫–æ–¥—É–≤–∞—Ç–∏"
* **–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è –¥–æ–≤—ñ—Ä–æ—é:** "—è –≤–∞–º —è–∫ –¥—Ä—É–≥—É –∫–∞–∂—É", "–º—ñ–∂ –Ω–∞–º–∏"
* **–®—Ç—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ:** "–º–∏ –∂ –æ–¥–Ω–æ—ó –∫—Ä–æ–≤—ñ", "—è —Ç–µ–∂ —Ç–∞–∫ –¥—É–º–∞–≤"
* **–¢–µ—Ö–Ω—ñ–∫–∞ "–ø–æ–≥–∞–Ω–∏–π/–¥–æ–±—Ä–∏–π –ø–æ–ª—ñ—Ü–µ–π—Å—å–∫–∏–π":** –û–¥–∏–Ω —Ç–∏—Å–Ω–µ, —ñ–Ω—à–∏–π "–∑–∞—Ö–∏—â–∞—î"

üß† **COGNITIVE_BIAS - –ö–û–ì–ù–Ü–¢–ò–í–ù–Ü –í–ò–ö–†–ò–í–õ–ï–ù–ù–Ø (–®–£–∫–∞–π –°–ö–†–Ü–ó–¨! - 35% —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤):**
* **–ü—Ä–∏–≤'—è–∑–∫–∞ (Anchoring):** –û–ø–æ—Ä–∞ –Ω–∞ –ø–µ—Ä—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø–µ—Ä—à—ñ —Ü–∏—Ñ—Ä–∏, –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, "–≤–∏—Ö–æ–¥—è—á–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç–µ–π"
* **–ï—Ñ–µ–∫—Ç —Ñ—Ä–µ–π–º—ñ–Ω–≥—É (Framing):** "–≤—Ç—Ä–∞—Ç–∏" vs "–Ω–µ–¥–æ–æ—Ç—Ä–∏–º–∞–Ω–Ω—è", "—Å–∫–∏–¥–∫–∞" vs "–¥–æ–ø–ª–∞—Ç–∞", –ø–æ–¥–∞—á–∞ –ø—ñ–¥ –∫—É—Ç–æ–º, —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è
* **–ù–µ–ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤—Ç—Ä–∞—Ç (Loss Aversion):** "–≤—Ç—Ä–∞—á–∞—î—Ç–µ", "–º–æ–∂–µ—Ç–µ –ø–æ—à–∫–æ–¥—É–≤–∞—Ç–∏", –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—Ç—Ä–∞—Ç–∞—Ö, "—É–ø—É—Å—Ç–∏—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å"
* **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞–ª—å–Ω–µ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:** –®—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω—è, —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–µ, "—è–∫ –ø–æ–∫–∞–∑—É—î –¥–æ—Å–≤—ñ–¥"
* **–ï—Ñ–µ–∫—Ç –≤–æ–ª–æ–¥—ñ–Ω–Ω—è:** "–≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏", "–≤–∞—à–∞ –∫–æ–º–ø–∞–Ω—ñ—è", —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥—á—É—Ç—Ç—è –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ, "–≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö"
* **–ï—Ñ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:** –§–æ–∫—É—Å –Ω–∞ —è—Å–∫—Ä–∞–≤–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö, —â–æ –ª–µ–≥–∫–æ –∑–≥–∞–¥–∞—Ç–∏, "–ø–∞–º'—è—Ç–∞—î—Ç–µ —Ç–æ–π –≤–∏–ø–∞–¥–æ–∫"
* **–ï—Ñ–µ–∫—Ç –æ—Ä–µ–æ–ª—É:** –û–¥–Ω–∞ —Ä–∏—Å–∞ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –≤—Å–µ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è, "–ø—Ä–µ—Å—Ç–∏–∂–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è = —è–∫—ñ—Å—Ç—å"
* **–°—Ç–∞—Ç—É—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç:** –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Å–∞–º–æ–æ—Ü—ñ–Ω–∫–∏, "–≤–∞–º —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–æ–º—É", –ª–µ—Å—Ç–æ—â—ñ
* **–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–æ–∫–∞–∑:** "–≤—Å—ñ —Ç–∞–∫ —Ä–æ–±–ª—è—Ç—å", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞", "–Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏"
* **–ï—Ñ–µ–∫—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É:** "—Ü–µ –∑–∞–≥–∞–ª—å–Ω–æ–ø—Ä–∏–π–Ω—è—Ç–æ", "—Ç–∞–∫ —Ä–æ–±–ª—è—Ç—å —É –≤–∞—à—ñ–π –≥–∞–ª—É–∑—ñ"
* **–°—Ç–∞—Ç—É—Å-–∫–≤–æ –±—ñ–∞—Å:** "—è–∫ —î –∑–∞—Ä–∞–∑", "–Ω–µ –≤–∞—Ä—Ç–æ –Ω—ñ—á–æ–≥–æ –º—ñ–Ω—è—Ç–∏", –æ–ø—ñ—Ä –∑–º—ñ–Ω–∞–º
* **–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è:** –ù–µ–¥–æ–æ—Ü—ñ–Ω–∫–∞ —á–∞—Å—É/—Ä–µ—Å—É—Ä—Å—ñ–≤, "—Ü–µ –ø—Ä–æ—Å—Ç–æ", "—à–≤–∏–¥–∫–æ –∑—Ä–æ–±–∏–º–æ"
* **–ï—Ñ–µ–∫—Ç –î–∞–Ω—ñ–Ω–≥–∞-–ö—Ä—é–≥–µ—Ä–∞:** –ü–µ—Ä–µ–æ—Ü—ñ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ, "–º–∏ –∫—Ä–∞—â–µ –∑–Ω–∞—î–º–æ"
* **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞—Ç—Ä–∏–±—É—Ü—ñ—ó:** "–≤–æ–Ω–∏ —Ç–∞–∫—ñ", –∞ "—É –Ω–∞—Å –æ–±—Å—Ç–∞–≤–∏–Ω–∏"
* **–ï—Ñ–µ–∫—Ç –æ—Ä–µ–æ–ª—É:** –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –ø–æ–∑–∏—Ç–∏–≤—É/–Ω–µ–≥–∞—Ç–∏–≤—É –∑ –æ–¥–Ω–æ–≥–æ –Ω–∞ –≤—Å–µ
* **–†–µ–∞–∫—Ç–∏–≤–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è:** "–Ω–µ —Ö–æ—á–µ—Ç–µ - –Ω–µ —Ç—Ä–µ–±–∞", –ø—Ä–æ–≤–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ç–∏—Ä—ñ—á—á—è
* **–ï–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:** "–Ω–µ–¥–∞–≤–Ω–æ –±—É–≤ –≤–∏–ø–∞–¥–æ–∫", —è—Å–∫—Ä–∞–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏
* **–ü–æ–º–∏–ª–∫–∞ –≤—Ü—ñ–ª—ñ–ª–æ–≥–æ:** –¢—ñ–ª—å–∫–∏ —É—Å–ø—ñ—à–Ω—ñ –∫–µ–π—Å–∏, —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ–≤–¥–∞—á
* **–ï—Ñ–µ–∫—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:** –°–∞–º–æ–∑–±—ã–≤–Ω—ñ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–∞, "—è–∫—â–æ –≤–∏ —Ç–∞–∫ –¥—É–º–∞—î—Ç–µ"
* **–†–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞:** –°—Ç–µ—Ä–µ–æ—Ç–∏–ø–∏, "—Ç–∏–ø–æ–≤–æ –¥–ª—è —Ç–∞–∫–∏—Ö —è–∫ –≤–∏"
* **–ï—Ñ–µ–∫—Ç –Ω–æ–≤–∏–∑–Ω–∏/–ø–µ—Ä—à–æ—Å—Ç—ñ:** –ü–µ—Ä—à–µ/–æ—Å—Ç–∞–Ω–Ω—î –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î—Ç—å—Å—è –∫—Ä–∞—â–µ
* **–ï—Ñ–µ–∫—Ç –≥—Ä—É–ø–æ–≤–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è:** "–∫–æ–º–∞–Ω–¥–∞ –≤–∏—Ä—ñ—à–∏–ª–∞", —Ç–∏—Å–∫ –≥—Ä—É–ø–∏
* **–£–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:** –®—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –¥—É–º–∫—É
* **–ï—Ñ–µ–∫—Ç —Å–æ–Ω—è—á–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞:** –£ –≥–∞—Ä–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π - –∫—Ä–∞—â—ñ —Ä—ñ—à–µ–Ω–Ω—è
* **–£–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–º—É:** "–≤—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ", –Ω–µ–¥–æ–æ—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—ñ–≤
* **–£–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø–µ—Å–∏–º—ñ–∑–º—É:** "–Ω–∞–≤—Ä—è–¥ —á–∏ –≤–∏–π–¥–µ", –ø–µ—Ä–µ–æ—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—ñ–≤
* **–ö–∞—Å–∫–∞–¥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:** "–ø—Ä–æ —Ü–µ –≤—Å—ñ –≥–æ–≤–æ—Ä—è—Ç—å", —à—Ç—É—á–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å
* **–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω'—é–Ω–∫—Ü—ñ—ó:** –ü–µ—Ä–µ–æ—Ü—ñ–Ω–∫–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–æ–¥—ñ–π
* **–•–∏–±–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å:** "–º–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞—î–º–æ", –∑–∞–≤–∏—â–µ–Ω–∞ —Å–∞–º–æ–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
* **–ï—Ñ–µ–∫—Ç —Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è:** –ó–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –Ω–∞ –æ–¥–Ω–æ–º—É –∞—Å–ø–µ–∫—Ç—ñ, —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö

üó£Ô∏è **RHETOLOGICAL_FALLACY - –õ–û–ì–Ü–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò –¢–ê –°–û–§–Ü–ó–ú–ò (–í–°–Ü –í–ò–î–ò! - 35% —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤):**
* **Ad Hominem:** –ê—Ç–∞–∫–∞ –Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, –∞ –Ω–µ –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, "–≤–∏ –∂ –Ω–µ –µ–∫—Å–ø–µ—Ä—Ç"
* **Tu Quoque ("–¢–∏ —Ç–∞–∫–æ–∂"):** "–∞ –≤–∏ —Å–∞–º—ñ —Ç–∞–∫ —Ä–æ–±–∏—Ç–µ", –≤—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫—É
* **–°–æ–ª–æ–º'—è–Ω–µ –æ–ø—É–¥–∞–ª–æ:** –°–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É, —â–æ–± –ª–µ–≥—à–µ —Å–ø—Ä–æ—Å—Ç—É–≤–∞—Ç–∏
* **–•–∏–±–Ω–∞ –¥–∏–ª–µ–º–∞:** "–∞–±–æ —Ç–∞–∫, –∞–±–æ –Ω—ñ—è–∫", —à—Ç—É—á–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –µ–º–æ—Ü—ñ–π:** –°—Ç—Ä–∞—Ö, –∂–∞–ª—ñ—Å—Ç—å, –≥–Ω—ñ–≤ –∑–∞–º—ñ—Å—Ç—å –ª–æ–≥—ñ–∫–∏
* **–•–∏–±–Ω–∏–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç:** –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π/—É–ø–µ—Ä–µ–¥–∂–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç
* **–°–ª–∏–∑—å–∫–∏–π —à–ª—è—Ö:** "—Ü–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏", –ª–∞–Ω—Ü—é–≥ –Ω–µ–≤—ñ—Ä–æ–≥—ñ–¥–Ω–∏—Ö –Ω–∞—Å–ª—ñ–¥–∫—ñ–≤
* **–¢–µ—Ö–∞—Å—å–∫–∏–π —Å–Ω–∞–π–ø–µ—Ä:** –ü—ñ–¥–≥–æ–Ω–∫–∞ —Ñ–∞–∫—Ç—ñ–≤ –ø—ñ–¥ –≤–∏—Å–Ω–æ–≤–æ–∫, —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
* **–ö—Ä—É–≥–æ–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—è:** –í–∏—Å–Ω–æ–≤–æ–∫ –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –∑–∞—Å–Ω–æ–≤–∫—É
* **–ì–µ–Ω–µ—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:** –û—Ü—ñ–Ω–∫–∞ —ñ–¥–µ—ó –∑–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è–º, –∞ –Ω–µ —Å—É—Ç–Ω—ñ—Å—Ç—é
* **–ß–µ—Ä–≤–æ–Ω–∞ –æ—Å–µ–ª–µ–¥—Ü—è:** –í—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—é —Ç–µ–º–æ—é
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ —Ç—Ä–∞–¥–∏—Ü—ñ—ó:** "–∑–∞–≤–∂–¥–∏ —Ç–∞–∫ –±—É–ª–æ", "—Ç–∞–∫ –ø—Ä–∏–π–Ω—è—Ç–æ"
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –Ω–æ–≤–∏–∑–Ω–∏:** "—Ü–µ –Ω–æ–≤–µ, –∑–Ω–∞—á–∏—Ç—å –∫—Ä–∞—â–µ"
* **–°–ø—Ä–∞–≤–∂–Ω—ñ–π —à–æ—Ç–ª–∞–Ω–¥–µ—Ü—å:** –ó–º—ñ–Ω–∞ –≤–∏–∑–Ω–∞—á–µ–Ω—å –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–ø—Ä–∏–∫–ª–∞–¥—ñ–≤
* **–ö–æ–º–ø–æ–∑–∏—Ü—ñ—è/—Ä–æ–∑–ø–æ–¥—ñ–ª:** –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —á–∞—Å—Ç–∏–Ω–∏ = –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ü—ñ–ª–æ–≥–æ
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –Ω–∞—Ç–æ–≤–ø—É:** "–≤—Å—ñ —Ç–∞–∫ –¥—É–º–∞—é—Ç—å", –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —è–∫ –¥–æ–≤—ñ–¥
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –Ω–∞—Å–ª—ñ–¥–∫—ñ–≤:** "—è–∫—â–æ —Ü–µ –ø—Ä–∞–≤–¥–∞, —Ç–æ –ø–æ–≥–∞–Ω–æ", –æ—Ü—ñ–Ω–∫–∞ –∑–∞ –Ω–∞—Å–ª—ñ–¥–∫–∞–º–∏
* **–ü–æ–º–∏–ª–∫–∞ –≥—Ä–∞–≤—Ü—è:** "–º—É—Å–∏—Ç—å –≤–∏–ø–∞—Å—Ç–∏", –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —ñ–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
* **–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–æ–≤–æ—ó —á–∞—Å—Ç–æ—Ç–∏:** –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
* **–•–∏–±–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞:** "–ø—ñ—Å–ª—è —Ü—å–æ–≥–æ = —á–µ—Ä–µ–∑ —Ü–µ", –ø–ª—É—Ç–∞–Ω–∏–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó —Ç–∞ –∫–∞—É–∑–∞—Ü—ñ—ó
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –ø—Ä–∏—Ä–æ–¥–∏:** "–ø—Ä–∏—Ä–æ–¥–Ω–æ = –¥–æ–±—Ä–µ", –Ω–∞—Ç—É—Ä–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ —Ä–æ–∑–∂–∞–ª–µ–Ω–Ω—è:** "–Ω–∞–º –≤–∞–∂–∫–æ", –∂–∞–ª—ñ—Å—Ç—å –∑–∞–º—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
* **–ë–∞–Ω–¥–≤–∞–≥–æ–Ω –µ—Ñ–µ–∫—Ç:** "–ø—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –±—ñ–ª—å—à–æ—Å—Ç—ñ", —Ç–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ
* **–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ:** "—ñ—Å—Ç–∏–Ω–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ", —Ö–∏–±–Ω–∏–π –∫–æ–º–ø—Ä–æ–º—ñ—Å
* **–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É:** –¶—ñ–ª–æ–º—É –ø—Ä–∏–ø–∏—Å—É—î—Ç—å—Å—è –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å —á–∞—Å—Ç–∏–Ω–∏
* **–ï–∫–æ–ª–æ–≥—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:** –ì—Ä—É–ø–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –¥–æ —ñ–Ω–¥–∏–≤—ñ–¥–∞
* **–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É—é—á–æ–≥–æ:** –ù–µ –≤—Å–µ, —â–æ –ø–ª–∞–Ω—É—î—Ç—å—Å—è, —Ä–µ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
* **–•–∏–±–Ω–µ –¥–Ω–æ:** "–±–µ–∑ —Ü—å–æ–≥–æ –≤—Å–µ –∑—Ä—É—à–∏—Ç—å—Å—è", –ø–µ—Ä–µ–±—ñ–ª—å—à–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ
* **Burden of proof:** –ü–µ—Ä–µ–∫–ª–∞–¥–∞–Ω–Ω—è —Ç—è–≥–∞—Ä—è –¥–æ–∫–∞–∑—É –Ω–∞ –æ–ø–æ–Ω–µ–Ω—Ç–∞
* **–ú–æ—Ä—Ñ—ñ–Ω–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞:** "—è–∫—â–æ –¥–æ–ø–æ–º–∞–≥–∞—î, –∑–Ω–∞—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ"

**–†–Ü–í–ù–Ü –°–ï–†–ô–û–ó–ù–û–°–¢–Ü (SEVERITY):**
1 = **–ù–∏–∑—å–∫–∏–π:** –¢–æ–Ω–∫—ñ –Ω–∞—Ç—è–∫–∏, –Ω–µ–ø—Ä—è–º—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, –ø—ñ–¥—Ç–µ–∫—Å—Ç–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–Ω–∞–≤–º–∏—Å–Ω–∏–º–∏.
2 = **–°–µ—Ä–µ–¥–Ω—ñ–π:** –û—á–µ–≤–∏–¥–Ω—ñ—à—ñ –ø—Ä–∏–π–æ–º–∏, –ø–æ–º—ñ—Ä–Ω–∏–π —Ç–∏—Å–∫, –π–º–æ–≤—ñ—Ä–Ω–æ —Å–≤—ñ–¥–æ–º–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
3 = **–í–∏—Å–æ–∫–∏–π:** –ì—Ä—É–±—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó, —Ç–æ–∫—Å–∏—á–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∞–≥—Ä–µ—Å—ñ—è, –∑–Ω–∞—á–Ω–∏–π —Ä–∏–∑–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤.

üéØ **–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –ü–†–ê–í–ò–õ–ê:**
- **–¢–æ—á–Ω—ñ—Å—Ç—å —Ü–∏—Ç—É–≤–∞–Ω–Ω—è:** "text" = –¢–û–ß–ù–ê —Ü–∏—Ç–∞—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É, –±–µ–∑ –∑–º—ñ–Ω
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥–ª–∏–±–∏–Ω–∞:** "explanation" = 4-6 –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ä–µ—á–µ–Ω—å –ø—Ä–æ —Å—É—Ç—å, –º–æ—Ç–∏–≤–∏, –Ω–∞—Å–ª—ñ–¥–∫–∏
- **–ó–ù–ê–ô–¢–ò –ú–ê–ö–°–ò–ú–£–ú:** –¢–≤–æ—è –º–µ—Ç–∞ - –∑–Ω–∞–π—Ç–∏ –í–°–Ü –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏, –Ω–∞–≤—ñ—Ç—å –Ω–∞–π—Ç–æ–Ω—à—ñ
- **–ù–ï –ü–†–û–ü–£–°–ö–ê–ô:** –ö–æ–∂–Ω–µ —Ä–µ—á–µ–Ω–Ω—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–π–æ–º–∏ - –∞–Ω–∞–ª—ñ–∑—É–π –í–°–ï
- **–ë–£–î–¨ –ü–Ü–î–û–ó–†–Ü–õ–ò–ú:** –ù–∞–≤—ñ—Ç—å "–Ω–æ—Ä–º–∞–ª—å–Ω—ñ" —Ñ—Ä–∞–∑–∏ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏

üö® **–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ï –ó–ê–í–î–ê–ù–ù–Ø:**
–í–ò –ü–û–í–ò–ù–ï–ù –ü–†–û–í–ï–°–¢–ò –ù–ê–ô–†–ï–¢–ï–õ–¨–ù–Ü–®–ò–ô –ê–ù–ê–õ–Ü–ó –í –Ü–°–¢–û–†–Ü–á! –ö–æ–∂–Ω–∞ —Ñ—Ä–∞–∑–∞, –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ, –∫–æ–∂–µ–Ω –ø—ñ–¥—Ç–µ–∫—Å—Ç –º–∞—é—Ç—å –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ. –ó–Ω–∞–π–¥–∏ –º—ñ–Ω—ñ–º—É–º 15-30 –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤ —É —Å–µ—Ä–µ–¥–Ω—å–æ–º—É —Ç–µ–∫—Å—Ç—ñ. –ë–Ü–õ–¨–®–ï = –ö–†–ê–©–ï!

‚ö° **–§–Ü–ù–ê–õ–¨–ù–ê –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø:**
–Ø–∫—â–æ —Ç–∏ –∑–Ω–∞–π—à–æ–≤ –º–µ–Ω—à–µ 10 –ø—Ä–æ–±–ª–µ–º —É —Ç–µ–∫—Å—Ç—ñ –¥–æ–≤–∂–∏–Ω–æ—é –ø–æ–Ω–∞–¥ 500 —Å–ª—ñ–≤ - —Ç–∏ –ø—Ä–∞—Ü—é–≤–∞–≤ –ù–ï–î–û–°–¢–ê–¢–ù–¨–û –†–ï–¢–ï–õ–¨–ù–û! –ü–æ–≤–µ—Ä–Ω–∏—Å—å —ñ –∑–Ω–∞–π–¥–∏ –±—ñ–ª—å—à–µ!
`.trim();
}

function buildUserPayload(paragraphs, clientCtx, limiter) {
  return {
    normalized_paragraphs: paragraphs.map((p) => ({
      index: p.index,
      text: p.text,
    })),
    client_context: clientCtx,
    constraints: { highlight_limit_per_1000_words: limiter },
    output_mode: 'ndjson',
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç—É
async function processTextChunk(chunk, system, clientCtx, chunkNumber, totalChunks, res) {
  console.log(`üîç Processing chunk ${chunkNumber}/${totalChunks}: ${chunk.text.length} chars`);

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
  res.write(`data: ${JSON.stringify({
    type: 'progress',
    message: `–ê–Ω–∞–ª—ñ–∑—É—é —á–∞—Å—Ç–∏–Ω—É ${chunkNumber}/${totalChunks}...`,
    progress: Math.round(((chunkNumber - 1) / totalChunks) * 90),
  })}\n\n`);

  const paragraphs = splitToParagraphs(chunk.text);
  const userPayload = buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS);

  const reqPayload = {
    model: MODEL,
    stream: false,
    messages: [
      {
        role: 'system',
        content: system + "\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò NDJSON —Ñ–æ—Ä–º–∞—Ç - –ø–æ –æ–¥–Ω–æ–º—É JSON –æ–±'—î–∫—Ç—É –Ω–∞ —Ä—è–¥–æ–∫. –ë–ï–ó ``` —Ç–∞ –±—É–¥—å-—è–∫–æ–≥–æ —ñ–Ω—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É!",
      },
      { role: 'user', content: JSON.stringify(userPayload) },
    ],
    max_tokens: 16000,
    temperature: 0.1,
    top_p: 0.9,
  };

  try {
    const response = await openaiClient.chat.completions.create(reqPayload);
    const content = response.choices[0]?.message?.content || '';

    console.log(`ü§ñ AI Response for chunk ${chunkNumber}:`, content.substring(0, 500) + '...');

    // –ü–∞—Ä—Å–∏–º–æ NDJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const lines = content.split('\n').filter((line) => line.trim());
    const highlights = [];
    let summary = null;
    let barometer = null;

    for (const line of lines) {
      const trimmedLine = line.trim();
      if (!trimmedLine) continue;
      
      try {
        // Pre-process line to fix common JSON issues
        let cleanLine = trimmedLine;
        
        // Fix incomplete JSON lines
        if (!cleanLine.endsWith('}') && cleanLine.includes('"explanation"')) {
          console.warn(`‚ö†Ô∏è Incomplete JSON line detected, skipping: ${cleanLine.substring(0, 100)}...`);
          continue;
        }
        
        // Try to parse with robust error handling
        let obj;
        try {
          obj = JSON.parse(cleanLine);
        } catch (jsonError) {
          // Try to fix common escape issues
          cleanLine = cleanLine
            .replace(/\\n/g, ' ')
            .replace(/\\"/g, '"')
            .replace(/"/g, '"')
            .replace(/"/g, '"')
            .replace(/'/g, "'")
            .replace(/'/g, "'");
          
          obj = JSON.parse(cleanLine);
        }

        if (obj.type === 'highlight') {
          // –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
          if (obj.char_start !== undefined) {
            obj.char_start += chunk.startChar;
          }
          if (obj.char_end !== undefined) {
            obj.char_end += chunk.startChar;
          }

          // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
          if (!obj.id) obj.id = `h${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          if (!obj.category) obj.category = 'manipulation';
          if (!obj.severity) obj.severity = 1;

          highlights.push(obj);

          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ highlight –≤—ñ–¥—Ä–∞–∑—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
          res.write(`data: ${JSON.stringify({
            type: 'highlight',
            ...obj,
          })}\n\n`);
        } else if (obj.type === 'summary') {
          summary = obj;
        } else if (obj.type === 'barometer') {
          barometer = obj;
        }
      } catch (parseError) {
        console.warn(`‚ö†Ô∏è Failed to parse JSON line in chunk ${chunkNumber}:`, line, parseError.message);
      }
    }

    console.log(`‚úÖ Chunk ${chunkNumber} processed: ${highlights.length} highlights found`);

    return {
      highlights,
      summary,
      barometer,
      chunkIndex: chunk.chunkIndex,
      tokenUsage: response.usage?.total_tokens || 0,
    };
  } catch (error) {
    console.error(`‚ùå Error processing chunk ${chunkNumber}:`, error);

    res.write(`data: ${JSON.stringify({
      type: 'error',
      message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—Ç–∏–Ω–∏ ${chunkNumber}: ${error.message}`,
      chunkNumber,
    })}\n\n`);

    return {
      highlights: [],
      summary: null,
      barometer: null,
      chunkIndex: chunk.chunkIndex,
      tokenUsage: 0,
      error: error.message,
    };
  }
}

// ===== Main Analysis Route =====
r.post('/', validateFileUpload, async (req, res) => {
  const analysisStartTime = performance.now();
  let totalTokensUsed = 0;
  let text = ''; // Define text in the outer scope

  try {
    const parsedData = await parseMultipart(req);
    text = normalizeText(parsedData.text);
    const { fileName, profile, clientId } = parsedData;

    console.log(`üöÄ Starting analysis: ${text.length} characters`);

    // Enhanced text validation
    if (!text || text.length < MIN_TEXT_LENGTH) {
      return res.status(400).json({
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MIN_TEXT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤`,
        minLength: MIN_TEXT_LENGTH,
        currentLength: text.length,
      });
    }

    if (text.length > MAX_TEXT_LENGTH) {
      return res.status(400).json({
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MAX_TEXT_LENGTH.toLocaleString()} —Å–∏–º–≤–æ–ª—ñ–≤`,
        maxLength: MAX_TEXT_LENGTH,
        currentLength: text.length,
      });
    }

    // Enhanced client validation and creation
    let finalClientId = clientId;
    if (!finalClientId && profile?.company) {
      const existingClient = await dbGet(
        `SELECT id, company FROM clients WHERE company = ? LIMIT 1`,
        [profile.company]
      );
      if (existingClient) {
        finalClientId = existingClient.id;
      } else if (profile.company && profile.company.trim().length > 0) {
        try {
          const info = await dbRun(
            `INSERT INTO clients(
              company, negotiator, sector, goal, decision_criteria, constraints,
              user_goals, client_goals, weekly_hours, offered_services, deadlines, notes,
              created_at, updated_at
            ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              profile.company.trim(),
              profile.negotiator?.trim() || null,
              profile.sector?.trim() || null,
              profile.goal?.trim() || null,
              profile.criteria?.trim() || null,
              profile.constraints?.trim() || null,
              profile.user_goals?.trim() || null,
              profile.client_goals?.trim() || null,
              Number(profile.weekly_hours) || 0,
              profile.offered_services?.trim() || null,
              profile.deadlines?.trim() || null,
              profile.notes?.trim() || null,
              new Date().toISOString(),
              new Date().toISOString(),
            ]
          );
          finalClientId = info.lastInsertRowid;
        } catch (dbError) {
          logError(dbError, { context: 'Auto-creating client', profile, ip: req.ip });
          return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞' });
        }
      }
    }

    if (!finalClientId) {
      return res.status(400).json({
        error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—é',
        required: 'client_id –∞–±–æ profile.company',
      });
    }

    // Check if OpenAI client is available
    if (!openaiClient) {
      return res.status(503).json({
        error: 'AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é OpenAI API –∫–ª—é—á–∞.',
        code: 'AI_SERVICE_UNAVAILABLE',
        timestamp: new Date().toISOString(),
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—É–º–Ω—ñ —á–∞–Ω–∫–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
    const textChunks = createSmartChunks(text, 6000); // 6–ö —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —á–∞–Ω–∫ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    console.log(`üì¶ Created ${textChunks.length} chunks for analysis`);

    const clientCtx = {
      about_client: {
        company: profile?.company || '',
        negotiator: profile?.negotiator || '',
        sector: profile?.sector || '',
      },
      decision_criteria: profile?.criteria || '',
      constraints: profile?.constraints || '',
      user_goals: profile?.user_goals || profile?.goal || '',
      client_goals: profile?.client_goals || '',
      weekly_hours: Number(profile?.weekly_hours) || 0,
      offered_services: profile?.offered_services || '',
      deadlines: profile?.deadlines || '',
      notes: profile?.notes || '',
    };

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
    const systemPrompt = buildSystemPrompt();
    const systemPromptTokens = estimateTokens(systemPrompt);
    let totalInputTokens = systemPromptTokens * textChunks.length;

    for (const chunk of textChunks) {
      const paragraphs = splitToParagraphs(chunk.text);
      const userPayload = buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS);
      const chunkTokens = estimateTokens(chunk.text) + estimateTokens(JSON.stringify(userPayload));
      totalInputTokens += chunkTokens + 500; // buffer for output
    }

    console.log(`üí∞ Estimated total tokens: ${totalInputTokens}`);
    await addTokensAndCheck(totalInputTokens);

    // SSE headers
    res.status(200);
    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
    res.setHeader('Cache-Control', 'no-cache, no-transform');
    res.setHeader('Connection', 'keep-alive');
    res.setHeader('X-Accel-Buffering', 'no');

    const heartbeat = setInterval(() => {
      res.write(': ping\n\n');
    }, 15000);

    req.on('close', () => {
      clearInterval(heartbeat);
      try {
        res.end();
      } catch {
        // Ignore errors on closing an already closed stream
      }
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
    const allHighlights = [];
    const chunkResults = [];

    res.write(`data: ${JSON.stringify({
      type: 'analysis_started',
      message: '–†–æ–∑–ø–æ—á–∏–Ω–∞—é –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑...',
      chunks: textChunks.length,
    })}\n\n`);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —á–∞–Ω–∫ –æ–∫—Ä–µ–º–æ
    for (let i = 0; i < textChunks.length; i++) {
      const chunk = textChunks[i];
      const chunkNumber = i + 1;

      const chunkResult = await processTextChunk(
        chunk,
        systemPrompt,
        clientCtx,
        chunkNumber,
        textChunks.length,
        res
      );

      chunkResults.push(chunkResult);
      allHighlights.push(...chunkResult.highlights);
      totalTokensUsed += chunkResult.tokenUsage;

      console.log(`üìä Total highlights so far: ${allHighlights.length}`);
    }

    // –û–±'—î–¥–Ω—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    console.log(`üî• Final analysis: ${allHighlights.length} total highlights found`);

    res.write(`data: ${JSON.stringify({
      type: 'merged_highlights',
      items: allHighlights,
      total_count: allHighlights.length,
    })}\n\n`);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–∞ –±–∞—Ä–æ–º–µ—Ç—Ä
    const manipulationCount = allHighlights.filter((h) => h.category === 'manipulation').length;
    const biasCount = allHighlights.filter((h) => h.category === 'cognitive_bias').length;
    const fallacyCount = allHighlights.filter((h) => h.category === 'rhetological_fallacy').length;

    const summary = {
      type: 'summary',
      counts_by_category: {
        manipulation: manipulationCount,
        cognitive_bias: biasCount,
        rhetological_fallacy: fallacyCount,
      },
      top_patterns: ['–ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç–∏—Å–∫', '–®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å', '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó'],
      overall_observations: `–í–∏—è–≤–ª–µ–Ω–æ ${allHighlights.length} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤. –ü–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å —Ç–µ—Ö–Ω—ñ–∫–∏ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É —Ç–∞ —Ç–∏—Å–∫—É.`,
      strategic_assessment: '–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö',
    };

    res.write(`data: ${JSON.stringify(summary)}\n\n`);

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    const complexityScore = Math.min(
      100,
      Math.round(
        (allHighlights.length / (text.length / 1000)) * 10 +
        manipulationCount * 1.5 +
        biasCount * 1.2 +
        fallacyCount * 1.8
      )
    );

    let complexityLabel = 'Easy mode';
    if (complexityScore > 80) complexityLabel = 'Mission impossible';
    else if (complexityScore > 60) complexityLabel = 'Bloody hell';
    else if (complexityScore > 40) complexityLabel = 'High';
    else if (complexityScore > 20) complexityLabel = 'Medium';
    else if (complexityScore > 10) complexityLabel = 'Clear client';

    const barometer = {
      type: 'barometer',
      score: complexityScore,
      label: complexityLabel,
      rationale: `–ó–Ω–∞–π–¥–µ–Ω–æ ${allHighlights.length} –ø—Ä–æ–±–ª–µ–º. –í–∏—Å–æ–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ–∫.`,
      factors: {
        goal_alignment: 0.3,
        manipulation_density: Math.min(1.0, allHighlights.length / 100),
        scope_clarity: 0.4,
        time_pressure: 0.7,
        resource_demand: 0.6,
        psychological_complexity: Math.min(1.0, manipulationCount / 50),
        strategic_sophistication: 0.8,
        emotional_volatility: Math.min(1.0, biasCount / 30),
      },
    };

    res.write(`data: ${JSON.stringify(barometer)}\n\n`);

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    try {
      const analysisData = {
        highlights: allHighlights,
        summary: summary,
        barometer: barometer,
        original_text: text,
        highlighted_text: generateHighlightedText(text, allHighlights),
      };

      const dbResult = await dbRun(
        `INSERT INTO analyses (
          client_id, original_text, highlights_json, issues_count, 
          complexity_score, summary_json, barometer_json, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          finalClientId,
          text,
          JSON.stringify(analysisData.highlights),
          analysisData.highlights.length,
          barometer.score,
          JSON.stringify(summary),
          JSON.stringify(barometer),
          new Date().toISOString(),
        ]
      );

      res.write(`data: ${JSON.stringify({
        type: 'analysis_saved',
        id: dbResult.lastInsertRowid,
        message: '–ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
        total_highlights: allHighlights.length,
      })}\n\n`);
    } catch (dbError) {
      console.error('Database save error:', dbError);
      // Don't terminate the stream, just log the error
      logError(dbError, { context: 'Saving analysis to DB', clientId: finalClientId });
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    clearInterval(heartbeat);
    res.write(`data: ${JSON.stringify({ type: 'complete' })}\n\n`);
    res.end();

    const analysisDuration = performance.now() - analysisStartTime;
    logPerformance('analysis_duration', analysisDuration, { textLength: text.length, chunks: textChunks.length });
    logAIUsage(MODEL, totalTokensUsed, { route: '/analyze' });
    console.log(`üéâ Analysis completed in ${Math.round(analysisDuration)}ms: ${allHighlights.length} highlights, ${totalTokensUsed} tokens`);
  } catch (err) {
    console.error('‚ùå Analysis error:', err);

    logError(err, {
      context: 'Analysis processing error',
      textLength: text?.length,
      ip: req.ip,
    });

    if (!res.headersSent) {
      res.status(500).json({
        error: err.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É',
        code: 'ANALYSIS_ERROR',
        timestamp: new Date().toISOString(),
      });
    } else {
      res.write(`event: error\ndata: ${JSON.stringify({
        error: err.message,
        timestamp: new Date().toISOString(),
      })}\n\n`);
      res.end();
    }
  }
});

export default r;