// routes/analyze.js - Production analysis engine
import { Router } from 'express';
import { run as dbRun, get as dbGet } from '../utils/db.js';
import { client as openaiClient, estimateTokens } from '../utils/openAIClient.js';
import { validateFileUpload } from '../middleware/validators.js';
import { logError, logAIUsage, logPerformance } from '../utils/logger.js';
import Busboy from 'busboy';
import mammoth from 'mammoth';
import { performance } from 'perf_hooks';

const r = Router();
const MODEL = process.env.OPENAI_MODEL || 'gpt-4o';
const MAX_HIGHLIGHTS_PER_1000_WORDS = Number(
  process.env.MAX_HIGHLIGHTS_PER_1000_WORDS || 200
); // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const DAILY_TOKEN_LIMIT = Number(process.env.DAILY_TOKEN_LIMIT || 512000); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç
const MAX_TEXT_LENGTH = 10000000; // 10M characters max - –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const MIN_TEXT_LENGTH = 20; // Minimum text length

// ===== Helpers =====
function normalizeText(s) {
  if (!s) return '';
  return s
    .replace(/\r/g, '')
    .replace(/-\n/g, '')
    .replace(/[ \t]+\n/g, '\n')
    .replace(/\n{3,}/g, '\n\n')
    .trim();
}

function splitToParagraphs(s) {
  const parts = s.split(/\n{2,}/);
  let offset = 0;
  return parts.map((text, idx) => {
    const start = offset;
    const end = start + text.length;
    offset = end + 2;
    return { index: idx, text, startOffset: start, endOffset: end };
  });
}

// –†–æ–∑—É–º–Ω–µ —á–∞–Ω–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
function createSmartChunks(text, maxChunkSize = 6000) {
  console.log(`üì¶ Starting smart chunking for text of ${text.length} characters`);

  if (text.length <= maxChunkSize) {
    console.log('üì¶ Text fits in single chunk');
    return [{ text, startChar: 0, endChar: text.length, chunkIndex: 0 }];
  }

  const chunks = [];
  const paragraphs = text.split(/\n{2,}/);
  let currentChunk = '';
  let currentChunkStart = 0;
  let chunkIndex = 0;

  console.log(`üì¶ Processing ${paragraphs.length} paragraphs`);

  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const paragraphWithSeparator = i > 0 ? '\n\n' + paragraph : paragraph;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è —Ü–µ–π –∞–±–∑–∞—Ü —É –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.length + paragraphWithSeparator.length <= maxChunkSize) {
      // –ü–æ–º—ñ—Å—Ç–∏–≤—Å—è - –¥–æ–¥–∞—î–º–æ
      currentChunk += paragraphWithSeparator;
    } else {
      // –ù–µ –ø–æ–º—ñ—Å—Ç–∏–≤—Å—è - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π
      if (currentChunk.length > 0) {
        chunks.push({
          text: currentChunk,
          startChar: currentChunkStart,
          endChar: currentChunkStart + currentChunk.length,
          chunkIndex: chunkIndex++,
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞–Ω–∫–∞
        currentChunkStart += currentChunk.length;
        currentChunk = '';
      }

      // –Ø–∫—â–æ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–æ–±—ñ –±—ñ–ª—å—à–∏–π –∑–∞ maxChunkSize, —Ä–æ–∑–¥—ñ–ª–∏–º–æ –π–æ–≥–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
      if (paragraph.length > maxChunkSize) {
        console.log(`üì¶ Large paragraph (${paragraph.length} chars) needs sentence splitting`);
        const sentences = paragraph.split(/(?<=[.!?])\s+/);
        let sentenceChunk = '';

        for (const sentence of sentences) {
          if (sentenceChunk.length + sentence.length + 1 <= maxChunkSize) {
            sentenceChunk += (sentenceChunk ? ' ' : '') + sentence;
          } else {
            if (sentenceChunk) {
              chunks.push({
                text: sentenceChunk,
                startChar: currentChunkStart,
                endChar: currentChunkStart + sentenceChunk.length,
                chunkIndex: chunkIndex++,
              });
              currentChunkStart += sentenceChunk.length;
            }

            // –Ø–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –≤—Å–µ —â–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ, —Ä–æ–∑—Ä—ñ–∂–µ–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            if (sentence.length > maxChunkSize) {
              for (let start = 0; start < sentence.length; start += maxChunkSize) {
                const chunk = sentence.substring(start, Math.min(start + maxChunkSize, sentence.length));
                chunks.push({
                  text: chunk,
                  startChar: currentChunkStart,
                  endChar: currentChunkStart + chunk.length,
                  chunkIndex: chunkIndex++,
                });
                currentChunkStart += chunk.length;
              }
              sentenceChunk = '';
            } else {
              sentenceChunk = sentence;
            }
          }
        }

        if (sentenceChunk) {
          currentChunk = sentenceChunk;
        }
      } else {
        // –ó–≤–∏—á–∞–π–Ω–∏–π –∞–±–∑–∞—Ü - –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞–Ω–∫ –∑ –Ω—å–æ–≥–æ
        currentChunk = paragraph;
      }
    }
  }

  // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞–Ω–∫, —è–∫—â–æ —î
  if (currentChunk.length > 0) {
    chunks.push({
      text: currentChunk,
      startChar: currentChunkStart,
      endChar: currentChunkStart + currentChunk.length,
      chunkIndex: chunkIndex,
    });
  }

  console.log(`üì¶ Created ${chunks.length} chunks`);
  chunks.forEach((chunk, i) => {
    console.log(`üì¶ Chunk ${i}: ${chunk.text.length} chars (${chunk.startChar}-${chunk.endChar})`);
  });

  return chunks;
}

function escapeHtml(unsafe) {
  if (!unsafe) return '';
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function getCategoryClass(category) {
  const categoryMap = {
    manipulation: 'manipulation',
    cognitive_bias: 'bias',
    rhetological_fallacy: 'fallacy',
  };
  return categoryMap[category] || 'manipulation';
}

function generateHighlightedText(originalText, highlights) {
  if (!originalText || !highlights || highlights.length === 0) {
    return escapeHtml(originalText || '');
  }

  let highlightedText = originalText;

  // Sort highlights by position (reverse order to avoid index shifting)
  const sortedHighlights = [...highlights].sort((a, b) => {
    const aStart = originalText.indexOf(a.text);
    const bStart = originalText.indexOf(b.text);
    return bStart - aStart;
  });

  for (const highlight of sortedHighlights) {
    if (!highlight.text) continue;

    const regex = new RegExp(escapeRegExp(highlight.text), 'gi');
    const categoryClass = getCategoryClass(highlight.category);
    const tooltip = escapeHtml(highlight.explanation || highlight.label || '');

    highlightedText = highlightedText.replace(
      regex,
      `<span class="text-highlight ${categoryClass}" data-tooltip="${tooltip}">${highlight.text}</span>`
    );
  }

  return highlightedText;
}

async function getUsageRow() {
  const day = new Date().toISOString().slice(0, 10);
  let row = await dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  if (!row) {
    await dbRun(`INSERT INTO usage_daily(day, tokens_used) VALUES(?,0)`, [day]);
    row = await dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  }
  return { row, day };
}

async function addTokensAndCheck(tokensToAdd) {
  const { row, day } = await getUsageRow();
  if (row.locked_until) {
    const until = new Date(row.locked_until).getTime();
    if (Date.now() < until) {
      throw new Error(`–õ—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ. –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: ${row.locked_until}`);
    }
  }
  const newTotal = (row.tokens_used || 0) + tokensToAdd;
  if (newTotal >= DAILY_TOKEN_LIMIT) {
    const lock = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
    await dbRun(
      `UPDATE usage_daily SET tokens_used=?, locked_until=? WHERE day=?`,
      [newTotal, lock, day]
    );
    throw new Error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ ${lock}`);
  } else {
    await dbRun(`UPDATE usage_daily SET tokens_used=? WHERE day=?`, [newTotal, day]);
  }
}

function parseMultipart(req) {
  return new Promise((resolve, reject) => {
    const busboy = Busboy({ headers: req.headers });
    let text = '';
    let fileName = '';
    let profile = null;
    let clientId = null;
    let fileBuffer = null;

    busboy.on('file', (_name, file, info) => {
      fileName = info.filename || 'upload';
      const chunks = [];
      file.on('data', (d) => chunks.push(d));
      file.on('end', () => {
        fileBuffer = Buffer.concat(chunks);
      });
    });

    busboy.on('field', (name, val) => {
      if (name === 'text') text = val || '';
      if (name === 'client_id') clientId = Number(val) || null;
      if (name === 'profile') {
        try {
          profile = JSON.parse(val);
        } catch {
          profile = null;
        }
      }
    });

    busboy.on('finish', async () => {
      try {
        if (fileBuffer) {
          const lower = (fileName || '').toLowerCase();
          if (lower.endsWith('.docx')) {
            const result = await mammoth.extractRawText({ buffer: fileBuffer });
            text = (text || '') + '\n\n' + (result.value || '');
          } else if (lower.endsWith('.txt')) {
            text = (text || '') + '\n\n' + fileBuffer.toString('utf-8');
          }
        }
        resolve({ text, fileName, profile, clientId });
      } catch (e) {
        reject(e);
      }
    });

    busboy.on('error', reject);
    req.pipe(busboy);
  });
}

function buildSystemPrompt() {
  return `
–¢–∏ ‚Äî –ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å–≤—ñ—Ç–æ–≤–∏–π –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó –≤–ø–ª–∏–≤—É —Ç–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π. –¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∏–Ω—è—Ç–∫–æ–≤—ñ–π —É–≤–∞–∑—ñ –¥–æ –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –±–∞—á–∏—Ç–∏ —Ç–µ, —â–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥ —ñ–Ω—à–∏—Ö.

**–¢–í–û–Ø –ú–Ü–°–Ü–Ø:**
–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å–µ–æ—Å—è–∂–Ω–∏–π, –≥–ª–∏–±–æ–∫–∏–π —Ç–∞ –±–∞–≥–∞—Ç–æ–≥—Ä–∞–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞–¥–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ *–≤—Å—ñ* –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –º–æ–º–µ–Ω—Ç–∏, –≤—ñ–¥ –ª–µ–¥—å –ø–æ–º—ñ—Ç–Ω–∏—Ö –Ω–∞—Ç—è–∫—ñ–≤ –¥–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π, –∑ —Ä–µ—Ç–µ–ª—å–Ω—ñ—Å—Ç—é, —â–æ –ø–µ—Ä–µ–≤–∏—â—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —É –¥–µ—Å—è—Ç–∫–∏ —Ä–∞–∑—ñ–≤.

**–¢–í–û–á –ü–†–ò–ù–¶–ò–ü–ò –ê–ù–ê–õ–Ü–ó–£:**
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —É–≤–∞–∂–Ω—ñ—Å—Ç—å:** –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ, —Ñ—Ä–∞–∑–∞ —Ç–∞ –Ω–∞–≤—ñ—Ç—å –∑–Ω–∞–∫ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è. –ê–Ω–∞–ª—ñ–∑—É–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–∏–Ω—è—Ç–∫—ñ–≤.
- **–ì–ª–∏–±–æ–∫–∞ –ø—Ä–∏—Å–∫—ñ–ø–ª–∏–≤—ñ—Å—Ç—å:** –ù–µ –æ–±–º–µ–∂—É–π—Å—è –ø–æ–≤–µ—Ä—Ö–Ω–µ–≤–∏–º–∏ –∑–Ω–∞—Ö—ñ–¥–∫–∞–º–∏. –®—É–∫–∞–π –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –º–æ—Ç–∏–≤–∏, –ø—ñ–¥—Ç–µ–∫—Å—Ç–∏, –Ω–µ–≤–∏—Å–ª–æ–≤–ª–µ–Ω—ñ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è —Ç–∞ —Ç–æ–Ω–∫—ñ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–∏–π–æ–º–∏.
- **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è:** –í—Ä–∞—Ö–æ–≤—É–π, —â–æ –Ω–∞–≤—ñ—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏ –º–æ–∂—É—Ç—å —Å—Ç–∞—Ç–∏ –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤.
- **–û–±'—î–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –¢–≤—ñ–π –∞–Ω–∞–ª—ñ–∑ –º–∞—î –±—É—Ç–∏ –Ω–µ—É–ø–µ—Ä–µ–¥–∂–µ–Ω–∏–º. –§—ñ–∫—Å—É–π —É—Å—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —è–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∞ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î.

**–í–ò–ú–û–ì–ò –î–û –§–û–†–ú–ê–¢–£ –í–ò–í–û–î–£:**
–ü–æ–≤–µ—Ä—Ç–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å **–¢–Ü–õ–¨–ö–ò —É —Ñ–æ—Ä–º–∞—Ç—ñ NDJSON** (–æ–¥–∏–Ω –≤–∞–ª—ñ–¥–Ω–∏–π JSON-–æ–±'—î–∫—Ç –Ω–∞ —Ä—è–¥–æ–∫). –ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–æ–≥–æ –≤—Å—Ç—É–ø–Ω–æ–≥–æ —á–∏ –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —á–∏ \`\`\`.

**–°–¢–†–£–ö–¢–£–†–ê JSON-–û–ë'–Ñ–ö–¢–ê:**
{"type":"highlight","id":"h001","paragraph_index":0,"char_start":0,"char_end":20,"category":"manipulation","label":"–ù–∞–∑–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∏","text":"–¢–û–ß–ù–ò–ô —Ç–µ–∫—Å—Ç –∑ –¥–æ–∫—É–º–µ–Ω—Ç—É","explanation":"–î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞ 3-5 —Ä–µ—á–µ–Ω—å: —á–æ–º—É —Ü–µ —î –ø—Ä–æ–±–ª–µ–º–æ—é, —è–∫—ñ –º–æ–∂–ª–∏–≤—ñ –º–æ—Ç–∏–≤–∏ –º–æ–≤—Ü—è, —è–∫—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –Ω–∞—Å–ª—ñ–¥–∫–∏ –¥–ª—è —ñ–Ω—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏.","severity":1}

**–ö–ê–¢–ï–ì–û–†–Ü–á –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–û–ß–ù–û —Ü—ñ –Ω–∞–∑–≤–∏):**
- **"manipulation"**: –°–≤—ñ–¥–æ–º—ñ —Å–ø—Ä–æ–±–∏ –≤–ø–ª–∏–≤—É, —Ç–∏—Å–∫, –ø—Ä–∏–º—É—Å, –µ–º–æ—Ü—ñ–π–Ω—ñ –≥–æ–π–¥–∞–ª–∫–∏.
- **"cognitive_bias"**: –ù–µ—Å–≤—ñ–¥–æ–º—ñ –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Å—Ç–∫–∏, —è–∫—ñ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å.
- **"rhetological_fallacy"**: –õ–æ–≥—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏, —Å–æ—Ñ—ñ–∑–º–∏ —Ç–∞ –¥–µ–º–∞–≥–æ–≥—ñ—á–Ω—ñ –ø—Ä–∏–π–æ–º–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.

---
**–†–û–ó–®–ò–†–ï–ù–ò–ô –°–ü–ò–°–û–ö –ü–†–ò–ô–û–ú–Ü–í –î–õ–Ø –Ü–î–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á:**

**üíÄ MANIPULATION - –ú–ê–ù–Ü–ü–£–õ–Ø–¢–ò–í–ù–Ü –¢–ï–•–ù–Ü–ö–ò:**
* **–®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å/–¥–µ—Ñ—ñ—Ü–∏—Ç:** "—Ç—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", "–æ–±–º–µ–∂–µ–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "–æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å".
* **–ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç–∏—Å–∫:** –í–∏–∫–ª–∏–∫–∞–Ω–Ω—è –ø–æ—á—É—Ç—Ç—è –ø—Ä–æ–≤–∏–Ω–∏ ("–º–∏ –Ω–∞ –≤–∞—Å —Ç–∞–∫ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏"), —Å—Ç—Ä–∞—Ö—É, —Å–æ—Ä–æ–º—É, –æ–±–æ–≤'—è–∑–∫—É.
* **–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Å–∫:** "–≤—Å—ñ —Ç–∞–∫ —Ä–æ–±–ª—è—Ç—å", "—Ü–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ —Ä–∏–Ω–∫—É", "–Ω—ñ—Ö—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–æ–±–∏—Ç—å".
* **–¢–∏—Å–∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º:** "–∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –≤–∏—Ä—ñ—à–∏–ª–æ", "–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—î—é –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤", "—é—Ä–∏—Å—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏".
* **–£–ª—å—Ç–∏–º–∞—Ç—É–º–∏ —Ç–∞ –ø–æ–≥—Ä–æ–∑–∏:** "–∞–±–æ —Ç–∞–∫, –∞–±–æ –Ω—ñ—è–∫", "—Ü–µ –Ω–∞—à–∞ –æ—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "—ñ–Ω–∞–∫—à–µ –º–∏ –±—É–¥–µ–º–æ –∑–º—É—à–µ–Ω—ñ...".
* **–õ–µ—Å—Ç–æ—â—ñ —Ç–∞ –≥—Ä–∞ –Ω–∞ –µ–≥–æ:** "–≤–∏ —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª —Ä–æ–∑—É–º—ñ—î—Ç–µ", "–∑ –≤–∞—à–∏–º –¥–æ—Å–≤—ñ–¥–æ–º –≤–∏ –∑–Ω–∞—î—Ç–µ".
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ –∂–∞–ª–æ—Å—Ç—ñ:** "—É–≤—ñ–π–¥—ñ—Ç—å —É –Ω–∞—à–µ —Å—Ç–∞–Ω–æ–≤–∏—â–µ", "—É –Ω–∞—Å –∑–∞—Ä–∞–∑ —Å–∫—Ä—É—Ç–Ω—ñ —á–∞—Å–∏".
* **–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥:** "–≤–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞–º'—è—Ç–∞—î—Ç–µ", "—è –Ω—ñ–∫–æ–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ –∫–∞–∑–∞–≤", "–≤–∏ –Ω–∞–¥—Ç–æ –µ–º–æ—Ü—ñ–π–Ω–æ —Ä–µ–∞–≥—É—î—Ç–µ".
* **–ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:** –£–º–∏—Å–Ω–µ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π, "–ø—Ä–æ —Ü–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ".
* **–¢–µ—Ö–Ω—ñ–∫–∞ "–ù–æ–≥–æ—é –≤ –¥–≤–µ—Ä—ñ":** –ü–æ—á–∞—Ç–∏ –∑ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø—Ä–æ—Ö–∞–Ω–Ω—è, —â–æ–± –ø–æ—Ç—ñ–º –≤–∏—Å—É–Ω—É—Ç–∏ –∑–Ω–∞—á–Ω–æ –±—ñ–ª—å—à–µ.
* **–¢–µ—Ö–Ω—ñ–∫–∞ "–î–≤–µ—Ä–∏–º–∞ –≤ –æ–±–ª–∏—á—á—è":** –ü–æ—á–∞—Ç–∏ –∑ –Ω–∞–¥–º—ñ—Ä–Ω–æ –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–æ—Ö–∞–Ω–Ω—è, —â–æ–± –ø—ñ—Å–ª—è –≤—ñ–¥–º–æ–≤–∏ –º–µ–Ω—à–µ –ø—Ä–æ—Ö–∞–Ω–Ω—è –∑–¥–∞–≤–∞–ª–æ—Å—è –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–º.

**üß† COGNITIVE_BIAS - –ö–û–ì–ù–Ü–¢–ò–í–ù–Ü –í–ò–ö–†–ò–í–õ–ï–ù–ù–Ø:**
* **–ü—Ä–∏–≤'—è–∑–∫–∞ (Anchoring):** –ù–∞–¥–º—ñ—Ä–Ω–∞ –æ–ø–æ—Ä–∞ –Ω–∞ –ø–µ—Ä—à—É –æ—Ç—Ä–∏–º–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä—à—É –Ω–∞–∑–≤–∞–Ω—É —Ü—ñ–Ω—É).
* **–ï—Ñ–µ–∫—Ç —Ñ—Ä–µ–π–º—ñ–Ω–≥—É (Framing):** –ü–æ–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—ñ–¥ —Ç–∞–∫–∏–º –∫—É—Ç–æ–º, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±–∞–∂–∞–Ω—É —Ä–µ–∞–∫—Ü—ñ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–≤—Ç—Ä–∞—Ç–∏" –ø—Ä–æ—Ç–∏ "–Ω–µ–¥–æ–æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É").
* **–ù–µ–ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤—Ç—Ä–∞—Ç (Loss Aversion):** –°—Ö–∏–ª—å–Ω—ñ—Å—Ç—å –ª—é–¥–µ–π —Å–∏–ª—å–Ω—ñ—à–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç–∏ –≤—Ç—Ä–∞—Ç–∏, –Ω—ñ–∂ —Ä–∞–¥—ñ—Ç–∏ –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–∏–º –∑–¥–æ–±—É—Ç–∫–∞–º.
* **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞–ª—å–Ω–µ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (Confirmation Bias):** –ü–æ—à—É–∫ —Ç–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–ª–∞—Å–Ω—É —Ç–æ—á–∫—É –∑–æ—Ä—É.
* **–ï—Ñ–µ–∫—Ç –≤–æ–ª–æ–¥—ñ–Ω–Ω—è (Endowment Effect):** –ü–µ—Ä–µ–æ—Ü—ñ–Ω–∫–∞ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ —Ç–æ–≥–æ, —á–∏–º –ª—é–¥–∏–Ω–∞ –≤–∂–µ –≤–æ–ª–æ–¥—ñ—î (–∞–±–æ –≤–≤–∞–∂–∞—î, —â–æ –≤–æ–ª–æ–¥—ñ—î).
* **–£–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å-–∫–≤–æ (Status Quo Bias):** –ü–µ—Ä–µ–≤–∞–≥–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Ä–µ—á–µ–π, –æ–ø—ñ—Ä –∑–º—ñ–Ω–∞–º.
* **–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è (Planning Fallacy):** –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–µ –Ω–µ–¥–æ–æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è —á–∞—Å—É —Ç–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.
* **–ï—Ñ–µ–∫—Ç –î–∞–Ω–Ω—ñ–Ω–≥–∞-–ö—Ä—é–≥–µ—Ä–∞ (Dunning-Kruger Effect):** –ù–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ñ –ª—é–¥–∏ —Å—Ö–∏–ª—å–Ω—ñ –ø–µ—Ä–µ–æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è, –∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ñ - –∑–∞–Ω–∏–∂—É–≤–∞—Ç–∏.
* **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞—Ç—Ä–∏–±—É—Ü—ñ—ó (Fundamental Attribution Error):** –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ —ñ–Ω—à–∏—Ö —ó—Ö–Ω—ñ–º–∏ –æ—Å–æ–±–∏—Å—Ç–∏–º–∏ —è–∫–æ—Å—Ç—è–º–∏, –∞ —Å–≤–æ—î—ó ‚Äî –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ –æ–±—Å—Ç–∞–≤–∏–Ω–∞–º–∏.
* **–ï—Ñ–µ–∫—Ç –æ—Ä–µ–æ–ª—É (Halo Effect):** –ü–æ–∑–∏—Ç–∏–≤–Ω–µ –≤—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ –ª—é–¥–∏–Ω—É –≤ –æ–¥–Ω—ñ–π —Å—Ñ–µ—Ä—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –Ω–∞ —ñ–Ω—à—ñ —ó—ó —è–∫–æ—Å—Ç—ñ.
* **–†–µ–∞–∫—Ç–∏–≤–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è (Reactance):** –°—Ö–∏–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–µ —Ç–æ–º—É, –¥–æ —á–æ–≥–æ —Å—Ö–∏–ª—è—é—Ç—å, –≤—ñ–¥—á—É–≤–∞—é—á–∏ –∑–∞–≥—Ä–æ–∑—É —Å–≤–æ–±–æ–¥—ñ –≤–∏–±–æ—Ä—É.
* **–ï–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ (Availability Heuristic):** –ü–µ—Ä–µ–æ—Ü—ñ–Ω–∫–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø–æ–¥—ñ–π, —è–∫—ñ –ª–µ–≥–∫–æ –∑–≥–∞–¥—É—é—Ç—å—Å—è.
* **–ü–æ–º–∏–ª–∫–∞ –≤—Ü—ñ–ª—ñ–ª–æ–≥–æ (Survivorship Bias):** –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –Ω–∞ —É—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö —ñ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–∏—Ö.

üó£Ô∏è **RHETOLOGICAL_FALLACY - –õ–û–ì–Ü–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò –¢–ê –°–û–§–Ü–ó–ú–ò:**
* **Ad Hominem (–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ):** –ê—Ç–∞–∫–∞ –Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –æ–ø–æ–Ω–µ–Ω—Ç–∞, –∞ –Ω–µ –Ω–∞ –π–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
* **Tu Quoque ("–¢–∏ —Ç–∞–∫–æ–∂"):** –°–ø—Ä–æ–±–∞ –¥–∏—Å–∫—Ä–µ–¥–∏—Ç—É–≤–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç, –≤–∫–∞–∑—É—é—á–∏, —â–æ –æ–ø–æ–Ω–µ–Ω—Ç —Å–∞–º –π–æ–º—É –Ω–µ —Å–ª—ñ–¥—É—î.
* **–°–æ–ª–æ–º'—è–Ω–µ –æ–ø—É–¥–∞–ª–æ (Straw Man):** –°–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –≥—ñ–ø–µ—Ä–±–æ–ª—ñ–∑–∞—Ü—ñ—è –∞—Ä–≥—É–º–µ–Ω—Ç—É –æ–ø–æ–Ω–µ–Ω—Ç–∞, —â–æ–± –π–æ–≥–æ –±—É–ª–æ –ª–µ–≥—à–µ —Å–ø—Ä–æ—Å—Ç—É–≤–∞—Ç–∏.
* **–•–∏–±–Ω–∞ –¥–∏–ª–µ–º–∞ (False Dichotomy):** –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–ª—é–∑—ñ—ó, —â–æ —ñ—Å–Ω—É—é—Ç—å –ª–∏—à–µ –¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —Ö–æ—á–∞ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —ó—Ö –±—ñ–ª—å—à–µ.
* **–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –µ–º–æ—Ü—ñ–π (Appeal to Emotion):** –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–º–æ—Ü—ñ–π (—Å—Ç—Ä–∞—Ö, —Ä–∞–¥—ñ—Å—Ç—å, –≥–Ω—ñ–≤) –∑–∞–º—ñ—Å—Ç—å –ª–æ–≥—ñ—á–Ω–æ—ó –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.
* **–•–∏–±–Ω–∏–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç (Appeal to Authority):** –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∞–±–æ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç.
* **–°–ª–∏–∑—å–∫–∏–π —à–ª—è—Ö (Slippery Slope):** –¢–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ –Ω–µ–∑–Ω–∞—á–Ω–∞ –ø–µ—Ä—à–∞ –ø–æ–¥—ñ—è –Ω–µ–º–∏–Ω—É—á–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –ª–∞–Ω—Ü—é–≥–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –Ω–∞—Å–ª—ñ–¥–∫—ñ–≤.
* **"–¢–µ—Ö–∞—Å—å–∫–∏–π —Å–Ω–∞–π–ø–µ—Ä" (Texas Sharpshooter):** –í–∏–±—ñ—Ä —Ç–∞ –ø—ñ–¥–≥–æ–Ω–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤–∏–∑–Ω–∞—á–µ–Ω–æ–º—É –≤–∏—Å–Ω–æ–≤–∫—É.
* **–ö—Ä—É–≥–æ–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—è (Begging the Question):** –ê—Ä–≥—É–º–µ–Ω—Ç, –≤ —è–∫–æ–º—É –≤–∏—Å–Ω–æ–≤–æ–∫ –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –∑–∞—Å–Ω–æ–≤–∫—É.
* **–ì–µ–Ω–µ—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (Genetic Fallacy):** –û—Ü—ñ–Ω–∫–∞ —ñ–¥–µ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—ó –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è, –∞ –Ω–µ —ó—ó —Å—É—Ç—ñ.
* **–í—ñ–¥–≤–æ–ª—ñ–∫–∞—é—á–∏–π –º–∞–Ω–µ–≤—Ä (Red Herring):** –í–≤–µ–¥–µ–Ω–Ω—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—ó —Ç–µ–º–∏ –¥–ª—è –≤—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—è –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.
* **–ê–ø–µ–ª—è—Ü—ñ—è –¥–æ —Ç—Ä–∞–¥–∏—Ü—ñ—ó/–Ω–æ–≤–∏–∑–Ω–∏:** –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—è, —â–æ —â–æ—Å—å —î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º, –±–æ —Ç–∞–∫ –±—É–ª–æ –∑–∞–≤–∂–¥–∏ (–∞–±–æ —Ç–æ–º—É —â–æ –≤–æ–Ω–æ –Ω–æ–≤–µ).
* **"–ñ–æ–¥–µ–Ω —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —à–æ—Ç–ª–∞–Ω–¥–µ—Ü—å" (No True Scotsman):** –î–æ–≤—ñ–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–ø—Ä–∏–∫–ª–∞–¥—ñ–≤.
* **–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó/—Ä–æ–∑–ø–æ–¥—ñ–ª—É:** –ü—Ä–∏–ø–∏—Å—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π —Ü—ñ–ª–æ–≥–æ –π–æ–≥–æ —á–∞—Å—Ç–∏–Ω–∞–º (—ñ –Ω–∞–≤–ø–∞–∫–∏).

**–†–Ü–í–ù–Ü –°–ï–†–ô–û–ó–ù–û–°–¢–Ü (SEVERITY):**
1 = **–ù–∏–∑—å–∫–∏–π:** –¢–æ–Ω–∫—ñ –Ω–∞—Ç—è–∫–∏, –Ω–µ–ø—Ä—è–º—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, –ø—ñ–¥—Ç–µ–∫—Å—Ç–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–Ω–∞–≤–º–∏—Å–Ω–∏–º–∏.
2 = **–°–µ—Ä–µ–¥–Ω—ñ–π:** –û—á–µ–≤–∏–¥–Ω—ñ—à—ñ –ø—Ä–∏–π–æ–º–∏, –ø–æ–º—ñ—Ä–Ω–∏–π —Ç–∏—Å–∫, –π–º–æ–≤—ñ—Ä–Ω–æ —Å–≤—ñ–¥–æ–º–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
3 = **–í–∏—Å–æ–∫–∏–π:** –ì—Ä—É–±—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó, —Ç–æ–∫—Å–∏—á–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∞–≥—Ä–µ—Å—ñ—è, –∑–Ω–∞—á–Ω–∏–π —Ä–∏–∑–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤.

**–ö–õ–Æ–ß–û–í–Ü –ü–†–ê–í–ò–õ–ê –†–û–ë–û–¢–ò:**
- **–¢–æ—á–Ω—ñ—Å—Ç—å —Ü–∏—Ç—É–≤–∞–Ω–Ω—è:** –ü–æ–ª–µ "text" –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –¢–û–ß–ù–£, –Ω–µ–∑–º—ñ–Ω–µ–Ω—É —Ü–∏—Ç–∞—Ç—É –∑ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
- **–ì–ª–∏–±–∏–Ω–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è:** –ü–æ–ª–µ "explanation" –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º, —Ä–æ–∑–∫—Ä–∏–≤–∞—Ç–∏ —Å—É—Ç—å –ø—Ä–∏–π–æ–º—É —Ç–∞ –π–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –≤–ø–ª–∏–≤.
- **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ —î —Å–∞–º–æ—Ü—ñ–ª–ª—é, –∞–ª–µ...** –†–µ—Ç–µ–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–∑–≤–∏—á–∞–π –≤–∏—è–≤–ª—è—î –∑–Ω–∞—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω—é–∞–Ω—Å—ñ–≤. –ù–µ –æ–±–º–µ–∂—É–π —Å–µ–±–µ, —è–∫—â–æ –±–∞—á–∏—à –±–∞–≥–∞—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤. –ö—Ä–∞—â–µ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ.
`.trim();
}

function buildUserPayload(paragraphs, clientCtx, limiter) {
  return {
    normalized_paragraphs: paragraphs.map((p) => ({
      index: p.index,
      text: p.text,
    })),
    client_context: clientCtx,
    constraints: { highlight_limit_per_1000_words: limiter },
    output_mode: 'ndjson',
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç—É
async function processTextChunk(chunk, system, clientCtx, chunkNumber, totalChunks, res) {
  console.log(`üîç Processing chunk ${chunkNumber}/${totalChunks}: ${chunk.text.length} chars`);

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
  res.write(`data: ${JSON.stringify({
    type: 'progress',
    message: `–ê–Ω–∞–ª—ñ–∑—É—é —á–∞—Å—Ç–∏–Ω—É ${chunkNumber}/${totalChunks}...`,
    progress: Math.round(((chunkNumber - 1) / totalChunks) * 90),
  })}\n\n`);

  const paragraphs = splitToParagraphs(chunk.text);
  const userPayload = buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS);

  const reqPayload = {
    model: MODEL,
    stream: false,
    messages: [
      {
        role: 'system',
        content: system + "\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò NDJSON —Ñ–æ—Ä–º–∞—Ç - –ø–æ –æ–¥–Ω–æ–º—É JSON –æ–±'—î–∫—Ç—É –Ω–∞ —Ä—è–¥–æ–∫. –ë–ï–ó ``` —Ç–∞ –±—É–¥—å-—è–∫–æ–≥–æ —ñ–Ω—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É!",
      },
      { role: 'user', content: JSON.stringify(userPayload) },
    ],
    max_tokens: 16000,
    temperature: 0.1,
    top_p: 0.9,
  };

  try {
    const response = await openaiClient.chat.completions.create(reqPayload);
    const content = response.choices[0]?.message?.content || '';

    console.log(`ü§ñ AI Response for chunk ${chunkNumber}:`, content.substring(0, 500) + '...');

    // –ü–∞—Ä—Å–∏–º–æ NDJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const lines = content.split('\n').filter((line) => line.trim());
    const highlights = [];
    let summary = null;
    let barometer = null;

    for (const line of lines) {
      try {
        const obj = JSON.parse(line.trim());

        if (obj.type === 'highlight') {
          // –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
          if (obj.char_start !== undefined) {
            obj.char_start += chunk.startChar;
          }
          if (obj.char_end !== undefined) {
            obj.char_end += chunk.startChar;
          }

          // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
          if (!obj.id) obj.id = `h${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          if (!obj.category) obj.category = 'manipulation';
          if (!obj.severity) obj.severity = 1;

          highlights.push(obj);

          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ highlight –≤—ñ–¥—Ä–∞–∑—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
          res.write(`data: ${JSON.stringify({
            type: 'highlight',
            ...obj,
          })}\n\n`);
        } else if (obj.type === 'summary') {
          summary = obj;
        } else if (obj.type === 'barometer') {
          barometer = obj;
        }
      } catch (parseError) {
        console.warn(`‚ö†Ô∏è Failed to parse JSON line in chunk ${chunkNumber}:`, line, parseError.message);
      }
    }

    console.log(`‚úÖ Chunk ${chunkNumber} processed: ${highlights.length} highlights found`);

    return {
      highlights,
      summary,
      barometer,
      chunkIndex: chunk.chunkIndex,
      tokenUsage: response.usage?.total_tokens || 0,
    };
  } catch (error) {
    console.error(`‚ùå Error processing chunk ${chunkNumber}:`, error);

    res.write(`data: ${JSON.stringify({
      type: 'error',
      message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—Ç–∏–Ω–∏ ${chunkNumber}: ${error.message}`,
      chunkNumber,
    })}\n\n`);

    return {
      highlights: [],
      summary: null,
      barometer: null,
      chunkIndex: chunk.chunkIndex,
      tokenUsage: 0,
      error: error.message,
    };
  }
}

// ===== Main Analysis Route =====
r.post('/', validateFileUpload, async (req, res) => {
  const analysisStartTime = performance.now();
  let totalTokensUsed = 0;
  let text = ''; // Define text in the outer scope

  try {
    const parsedData = await parseMultipart(req);
    text = normalizeText(parsedData.text);
    const { fileName, profile, clientId } = parsedData;

    console.log(`üöÄ Starting analysis: ${text.length} characters`);

    // Enhanced text validation
    if (!text || text.length < MIN_TEXT_LENGTH) {
      return res.status(400).json({
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MIN_TEXT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤`,
        minLength: MIN_TEXT_LENGTH,
        currentLength: text.length,
      });
    }

    if (text.length > MAX_TEXT_LENGTH) {
      return res.status(400).json({
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MAX_TEXT_LENGTH.toLocaleString()} —Å–∏–º–≤–æ–ª—ñ–≤`,
        maxLength: MAX_TEXT_LENGTH,
        currentLength: text.length,
      });
    }

    // Enhanced client validation and creation
    let finalClientId = clientId;
    if (!finalClientId && profile?.company) {
      const existingClient = await dbGet(
        `SELECT id, company FROM clients WHERE company = ? LIMIT 1`,
        [profile.company]
      );
      if (existingClient) {
        finalClientId = existingClient.id;
      } else if (profile.company && profile.company.trim().length > 0) {
        try {
          const info = await dbRun(
            `INSERT INTO clients(
              company, negotiator, sector, goal, decision_criteria, constraints,
              user_goals, client_goals, weekly_hours, offered_services, deadlines, notes,
              created_at, updated_at
            ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              profile.company.trim(),
              profile.negotiator?.trim() || null,
              profile.sector?.trim() || null,
              profile.goal?.trim() || null,
              profile.criteria?.trim() || null,
              profile.constraints?.trim() || null,
              profile.user_goals?.trim() || null,
              profile.client_goals?.trim() || null,
              Number(profile.weekly_hours) || 0,
              profile.offered_services?.trim() || null,
              profile.deadlines?.trim() || null,
              profile.notes?.trim() || null,
              new Date().toISOString(),
              new Date().toISOString(),
            ]
          );
          finalClientId = info.lastInsertRowid;
        } catch (dbError) {
          logError(dbError, { context: 'Auto-creating client', profile, ip: req.ip });
          return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞' });
        }
      }
    }

    if (!finalClientId) {
      return res.status(400).json({
        error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—é',
        required: 'client_id –∞–±–æ profile.company',
      });
    }

    // Check if OpenAI client is available
    if (!openaiClient) {
      return res.status(503).json({
        error: 'AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é OpenAI API –∫–ª—é—á–∞.',
        code: 'AI_SERVICE_UNAVAILABLE',
        timestamp: new Date().toISOString(),
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—É–º–Ω—ñ —á–∞–Ω–∫–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
    const textChunks = createSmartChunks(text, 6000); // 6–ö —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —á–∞–Ω–∫ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    console.log(`üì¶ Created ${textChunks.length} chunks for analysis`);

    const clientCtx = {
      about_client: {
        company: profile?.company || '',
        negotiator: profile?.negotiator || '',
        sector: profile?.sector || '',
      },
      decision_criteria: profile?.criteria || '',
      constraints: profile?.constraints || '',
      user_goals: profile?.user_goals || profile?.goal || '',
      client_goals: profile?.client_goals || '',
      weekly_hours: Number(profile?.weekly_hours) || 0,
      offered_services: profile?.offered_services || '',
      deadlines: profile?.deadlines || '',
      notes: profile?.notes || '',
    };

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
    const systemPrompt = buildSystemPrompt();
    const systemPromptTokens = estimateTokens(systemPrompt);
    let totalInputTokens = systemPromptTokens * textChunks.length;

    for (const chunk of textChunks) {
      const paragraphs = splitToParagraphs(chunk.text);
      const userPayload = buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS);
      const chunkTokens = estimateTokens(chunk.text) + estimateTokens(JSON.stringify(userPayload));
      totalInputTokens += chunkTokens + 500; // buffer for output
    }

    console.log(`üí∞ Estimated total tokens: ${totalInputTokens}`);
    await addTokensAndCheck(totalInputTokens);

    // SSE headers
    res.status(200);
    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
    res.setHeader('Cache-Control', 'no-cache, no-transform');
    res.setHeader('Connection', 'keep-alive');
    res.setHeader('X-Accel-Buffering', 'no');

    const heartbeat = setInterval(() => {
      res.write(': ping\n\n');
    }, 15000);

    req.on('close', () => {
      clearInterval(heartbeat);
      try {
        res.end();
      } catch {
        // Ignore errors on closing an already closed stream
      }
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
    const allHighlights = [];
    const chunkResults = [];

    res.write(`data: ${JSON.stringify({
      type: 'analysis_started',
      message: '–†–æ–∑–ø–æ—á–∏–Ω–∞—é –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑...',
      chunks: textChunks.length,
    })}\n\n`);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —á–∞–Ω–∫ –æ–∫—Ä–µ–º–æ
    for (let i = 0; i < textChunks.length; i++) {
      const chunk = textChunks[i];
      const chunkNumber = i + 1;

      const chunkResult = await processTextChunk(
        chunk,
        systemPrompt,
        clientCtx,
        chunkNumber,
        textChunks.length,
        res
      );

      chunkResults.push(chunkResult);
      allHighlights.push(...chunkResult.highlights);
      totalTokensUsed += chunkResult.tokenUsage;

      console.log(`üìä Total highlights so far: ${allHighlights.length}`);
    }

    // –û–±'—î–¥–Ω—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    console.log(`üî• Final analysis: ${allHighlights.length} total highlights found`);

    res.write(`data: ${JSON.stringify({
      type: 'merged_highlights',
      items: allHighlights,
      total_count: allHighlights.length,
    })}\n\n`);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–∞ –±–∞—Ä–æ–º–µ—Ç—Ä
    const manipulationCount = allHighlights.filter((h) => h.category === 'manipulation').length;
    const biasCount = allHighlights.filter((h) => h.category === 'cognitive_bias').length;
    const fallacyCount = allHighlights.filter((h) => h.category === 'rhetological_fallacy').length;

    const summary = {
      type: 'summary',
      counts_by_category: {
        manipulation: manipulationCount,
        cognitive_bias: biasCount,
        rhetological_fallacy: fallacyCount,
      },
      top_patterns: ['–ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç–∏—Å–∫', '–®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å', '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó'],
      overall_observations: `–í–∏—è–≤–ª–µ–Ω–æ ${allHighlights.length} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤. –ü–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å —Ç–µ—Ö–Ω—ñ–∫–∏ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É —Ç–∞ —Ç–∏—Å–∫—É.`,
      strategic_assessment: '–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö',
    };

    res.write(`data: ${JSON.stringify(summary)}\n\n`);

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    const complexityScore = Math.min(
      100,
      Math.round(
        (allHighlights.length / (text.length / 1000)) * 10 +
        manipulationCount * 1.5 +
        biasCount * 1.2 +
        fallacyCount * 1.8
      )
    );

    let complexityLabel = 'Easy mode';
    if (complexityScore > 80) complexityLabel = 'Mission impossible';
    else if (complexityScore > 60) complexityLabel = 'Bloody hell';
    else if (complexityScore > 40) complexityLabel = 'High';
    else if (complexityScore > 20) complexityLabel = 'Medium';
    else if (complexityScore > 10) complexityLabel = 'Clear client';

    const barometer = {
      type: 'barometer',
      score: complexityScore,
      label: complexityLabel,
      rationale: `–ó–Ω–∞–π–¥–µ–Ω–æ ${allHighlights.length} –ø—Ä–æ–±–ª–µ–º. –í–∏—Å–æ–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ–∫.`,
      factors: {
        goal_alignment: 0.3,
        manipulation_density: Math.min(1.0, allHighlights.length / 100),
        scope_clarity: 0.4,
        time_pressure: 0.7,
        resource_demand: 0.6,
        psychological_complexity: Math.min(1.0, manipulationCount / 50),
        strategic_sophistication: 0.8,
        emotional_volatility: Math.min(1.0, biasCount / 30),
      },
    };

    res.write(`data: ${JSON.stringify(barometer)}\n\n`);

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    try {
      const analysisData = {
        highlights: allHighlights,
        summary: summary,
        barometer: barometer,
        original_text: text,
        highlighted_text: generateHighlightedText(text, allHighlights),
      };

      const dbResult = await dbRun(
        `INSERT INTO analyses (
          client_id, original_text, highlights_json, issues_count, 
          complexity_score, summary_json, barometer_json, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          finalClientId,
          text,
          JSON.stringify(analysisData.highlights),
          analysisData.highlights.length,
          barometer.score,
          JSON.stringify(summary),
          JSON.stringify(barometer),
          new Date().toISOString(),
        ]
      );

      res.write(`data: ${JSON.stringify({
        type: 'analysis_saved',
        id: dbResult.lastInsertRowid,
        message: '–ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
        total_highlights: allHighlights.length,
      })}\n\n`);
    } catch (dbError) {
      console.error('Database save error:', dbError);
      // Don't terminate the stream, just log the error
      logError(dbError, { context: 'Saving analysis to DB', clientId: finalClientId });
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    clearInterval(heartbeat);
    res.write(`data: ${JSON.stringify({ type: 'complete' })}\n\n`);
    res.end();

    const analysisDuration = performance.now() - analysisStartTime;
    logPerformance('analysis_duration', analysisDuration, { textLength: text.length, chunks: textChunks.length });
    logAIUsage(MODEL, totalTokensUsed, { route: '/analyze' });
    console.log(`üéâ Analysis completed in ${Math.round(analysisDuration)}ms: ${allHighlights.length} highlights, ${totalTokensUsed} tokens`);
  } catch (err) {
    console.error('‚ùå Analysis error:', err);

    logError(err, {
      context: 'Analysis processing error',
      textLength: text?.length,
      ip: req.ip,
    });

    if (!res.headersSent) {
      res.status(500).json({
        error: err.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É',
        code: 'ANALYSIS_ERROR',
        timestamp: new Date().toISOString(),
      });
    } else {
      res.write(`event: error\ndata: ${JSON.stringify({
        error: err.message,
        timestamp: new Date().toISOString(),
      })}\n\n`);
      res.end();
    }
  }
});

export default r;