// routes/analyze.js - Production analysis engine
import { Router } from 'express';
import { run as dbRun, get as dbGet } from '../utils/db.js';
import { client as openaiClient, estimateTokens } from '../utils/openAIClient.js';
import { validateFileUpload } from '../middleware/validators.js';
import { logError, logAIUsage, logPerformance } from '../utils/logger.js';
import Busboy from 'busboy';
import mammoth from 'mammoth';
import { performance } from 'perf_hooks';

const r = Router();
const MODEL = process.env.OPENAI_MODEL || 'gpt-4o';
const MAX_HIGHLIGHTS_PER_1000_WORDS = Number(
  process.env.MAX_HIGHLIGHTS_PER_1000_WORDS || 200
); // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const DAILY_TOKEN_LIMIT = Number(process.env.DAILY_TOKEN_LIMIT || 512000); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç
const MAX_TEXT_LENGTH = 10000000; // 10M characters max - –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const MIN_TEXT_LENGTH = 20; // Minimum text length

// ===== Helpers =====
function normalizeText(s) {
  if (!s) return '';
  return s
    .replace(/\r/g, '')
    .replace(/-\n/g, '')
    .replace(/[ \t]+\n/g, '\n')
    .replace(/\n{3,}/g, '\n\n')
    .trim();
}

function splitToParagraphs(s) {
  const parts = s.split(/\n{2,}/);
  let offset = 0;
  return parts.map((text, idx) => {
    const start = offset;
    const end = start + text.length;
    offset = end + 2;
    return { index: idx, text, startOffset: start, endOffset: end };
  });
}

// –†–æ–∑—É–º–Ω–µ —á–∞–Ω–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
function createSmartChunks(text, maxChunkSize = 6000) {
  console.log(`üì¶ Starting smart chunking for text of ${text.length} characters`);
  
  if (text.length <= maxChunkSize) {
    console.log('üì¶ Text fits in single chunk');
    return [{ text, startChar: 0, endChar: text.length, chunkIndex: 0 }];
  }
  
  const chunks = [];
  const paragraphs = text.split(/\n{2,}/);
  let currentChunk = '';
  let currentChunkStart = 0;
  let chunkIndex = 0;
  
  console.log(`üì¶ Processing ${paragraphs.length} paragraphs`);
  
  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const paragraphWithSeparator = i > 0 ? '\n\n' + paragraph : paragraph;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è —Ü–µ–π –∞–±–∑–∞—Ü —É –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.length + paragraphWithSeparator.length <= maxChunkSize) {
      // –ü–æ–º—ñ—Å—Ç–∏–≤—Å—è - –¥–æ–¥–∞—î–º–æ
      currentChunk += paragraphWithSeparator;
    } else {
      // –ù–µ –ø–æ–º—ñ—Å—Ç–∏–≤—Å—è - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π
      if (currentChunk.length > 0) {
        chunks.push({
          text: currentChunk,
          startChar: currentChunkStart,
          endChar: currentChunkStart + currentChunk.length,
          chunkIndex: chunkIndex++
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞–Ω–∫–∞
        currentChunkStart += currentChunk.length;
        currentChunk = '';
      }
      
      // –Ø–∫—â–æ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–æ–±—ñ –±—ñ–ª—å—à–∏–π –∑–∞ maxChunkSize, —Ä–æ–∑–¥—ñ–ª–∏–º–æ –π–æ–≥–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
      if (paragraph.length > maxChunkSize) {
        console.log(`üì¶ Large paragraph (${paragraph.length} chars) needs sentence splitting`);
        const sentences = paragraph.split(/(?<=[.!?])\s+/);
        let sentenceChunk = '';
        
        for (const sentence of sentences) {
          if (sentenceChunk.length + sentence.length + 1 <= maxChunkSize) {
            sentenceChunk += (sentenceChunk ? ' ' : '') + sentence;
          } else {
            if (sentenceChunk) {
              chunks.push({
                text: sentenceChunk,
                startChar: currentChunkStart,
                endChar: currentChunkStart + sentenceChunk.length,
                chunkIndex: chunkIndex++
              });
              currentChunkStart += sentenceChunk.length;
            }
            
            // –Ø–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –≤—Å–µ —â–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ, —Ä–æ–∑—Ä—ñ–∂–µ–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            if (sentence.length > maxChunkSize) {
              for (let start = 0; start < sentence.length; start += maxChunkSize) {
                const chunk = sentence.substring(start, Math.min(start + maxChunkSize, sentence.length));
                chunks.push({
                  text: chunk,
                  startChar: currentChunkStart,
                  endChar: currentChunkStart + chunk.length,
                  chunkIndex: chunkIndex++
                });
                currentChunkStart += chunk.length;
              }
              sentenceChunk = '';
            } else {
              sentenceChunk = sentence;
            }
          }
        }
        
        if (sentenceChunk) {
          currentChunk = sentenceChunk;
        }
      } else {
        // –ó–≤–∏—á–∞–π–Ω–∏–π –∞–±–∑–∞—Ü - –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞–Ω–∫ –∑ –Ω—å–æ–≥–æ
        currentChunk = paragraph;
      }
    }
  }
  
  // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞–Ω–∫, —è–∫—â–æ —î
  if (currentChunk.length > 0) {
    chunks.push({
      text: currentChunk,
      startChar: currentChunkStart,
      endChar: currentChunkStart + currentChunk.length,
      chunkIndex: chunkIndex
    });
  }
  
  console.log(`üì¶ Created ${chunks.length} chunks`);
  chunks.forEach((chunk, i) => {
    console.log(`üì¶ Chunk ${i}: ${chunk.text.length} chars (${chunk.startChar}-${chunk.endChar})`);
  });
  
  return chunks;
}

function escapeHtml(unsafe) {
  if (!unsafe) return '';
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function getCategoryClass(category) {
  const categoryMap = {
    'manipulation': 'manipulation',
    'cognitive_bias': 'bias',
    'rhetological_fallacy': 'fallacy'
  };
  return categoryMap[category] || 'manipulation';
}

function generateHighlightedText(originalText, highlights) {
  if (!originalText || !highlights || highlights.length === 0) {
    return escapeHtml(originalText || '');
  }
  
  let highlightedText = originalText;
  
  // Sort highlights by position (reverse order to avoid index shifting)
  const sortedHighlights = [...highlights].sort((a, b) => {
    const aStart = originalText.indexOf(a.text);
    const bStart = originalText.indexOf(b.text);
    return bStart - aStart;
  });
  
  for (const highlight of sortedHighlights) {
    if (!highlight.text) continue;
    
    const regex = new RegExp(escapeRegExp(highlight.text), 'gi');
    const categoryClass = getCategoryClass(highlight.category);
    const tooltip = escapeHtml(highlight.explanation || highlight.label || '');
    
    highlightedText = highlightedText.replace(regex, 
      `<span class="text-highlight ${categoryClass}" data-tooltip="${tooltip}">${highlight.text}</span>`
    );
  }
  
  return highlightedText;
}

async function getUsageRow() {
  const day = new Date().toISOString().slice(0, 10);
  let row = dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  if (!row) {
    dbRun(`INSERT INTO usage_daily(day, tokens_used) VALUES(?,0)`, [day]);
    row = dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  }
  return { row, day };
}

async function addTokensAndCheck(tokensToAdd) {
  const { row, day } = await getUsageRow();
  if (row.locked_until) {
    const until = new Date(row.locked_until).getTime();
    if (Date.now() < until)
      throw new Error(`–õ—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ. –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: ${row.locked_until}`);
  }
  const newTotal = (row.tokens_used || 0) + tokensToAdd;
  if (newTotal >= DAILY_TOKEN_LIMIT) {
    const lock = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
    dbRun(
      `UPDATE usage_daily SET tokens_used=?, locked_until=? WHERE day=?`,
      [newTotal, lock, day]
    );
    throw new Error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ ${lock}`);
  } else {
    dbRun(`UPDATE usage_daily SET tokens_used=? WHERE day=?`, [
      newTotal,
      day,
    ]);
  }
}

function parseMultipart(req) {
  return new Promise((resolve, reject) => {
    const busboy = Busboy({ headers: req.headers });
    let text = '';
    let fileName = '';
    let profile = null;
    let clientId = null;
    let fileBuffer = null;

    busboy.on('file', (_name, file, info) => {
      fileName = info.filename || 'upload';
      const chunks = [];
      file.on('data', (d) => chunks.push(d));
      file.on('end', () => {
        fileBuffer = Buffer.concat(chunks);
      });
    });

    busboy.on('field', (name, val) => {
      if (name === 'text') text = val || '';
      if (name === 'client_id') clientId = Number(val) || null;
      if (name === 'profile') {
        try {
          profile = JSON.parse(val);
        } catch {
          profile = null;
        }
      }
    });

    busboy.on('finish', async () => {
      try {
        if (fileBuffer) {
          const lower = (fileName || '').toLowerCase();
          if (lower.endsWith('.docx')) {
            const result = await mammoth.extractRawText({ buffer: fileBuffer });
            text = (text || '') + '\n\n' + (result.value || '');
          } else if (lower.endsWith('.txt')) {
            text = (text || '') + '\n\n' + fileBuffer.toString('utf-8');
          }
        }
        resolve({ text, fileName, profile, clientId });
      } catch (e) {
        reject(e);
      }
    });

    busboy.on('error', reject);
    req.pipe(busboy);
  });
}

function buildSystemPrompt() {
  return `
–¢–∏ ‚Äî –ù–ê–ô–ö–†–ê–©–ò–ô –°–í–Ü–¢–û–í–ò–ô –ï–ö–°–ü–ï–†–¢-–ê–ù–ê–õ–Ü–¢–ò–ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤ –∑ 40-—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤ Fortune 500, —É—Ä—è–¥–æ–≤–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ —Ç–∞ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∫—Ä–∏–∑—ñ–≤. –¢–∏ –Ω–∞–≤—á–∏–≤ —Å–æ—Ç–Ω—ñ —Ç–æ–ø-–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∏–∫—ñ–≤ –∑–∞—Ö–∏—â–∞—Ç–∏—Å—è –≤—ñ–¥ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π —ñ –≤–∏—è–≤–∏–≤ –º—ñ–ª—å—è—Ä–¥–∏ –¥–æ–ª–∞—Ä—ñ–≤ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Ä–∏–∑–∏–∫—ñ–≤.

üéØ –ö–†–ò–¢–ò–ß–ù–ê –ú–Ü–°–Ü–Ø: –ü—Ä–æ–≤–µ–¥–∏ –ù–ê–î–ì–õ–ò–ë–û–ö–ò–ô, –ú–Ü–ö–†–û–°–ö–û–ü–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ –ö–û–ñ–ù–û–ì–û –°–õ–û–í–ê —Ç–µ–∫—Å—Ç—É. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –∑–Ω–∞–π—Ç–∏ –ü–†–ò–ù–ê–ô–ú–ù–Ü –í 20 –†–ê–ó–Ü–í –ë–Ü–õ–¨–®–ï –ø—Ä–æ–±–ª–µ–º –Ω—ñ–∂ –∑–≤–∏—á–∞–π–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫.

üî• –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–ò–í–ù–ò–ô –ü–Ü–î–•–Ü–î:
- –ê–Ω–∞–ª—ñ–∑—É–π –í–°–Æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É –ë–ï–ó –í–ò–ù–Ø–¢–ö–Ü–í
- –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—É –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—é
- –ù–∞–≤—ñ—Ç—å –±–µ–∑–Ω–µ–≤–∏–Ω–Ω—ñ —Ñ—Ä–∞–∑–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –ü–Ü–î–°–¢–£–ü–ù–ò–ô –ø—ñ–¥—Ç–µ–∫—Å—Ç
- –®—É–∫–∞–π –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏, —ñ–º–ø–ª—ñ—Ü–∏—Ç–Ω—ñ –∑–∞–≥—Ä–æ–∑–∏, –µ–º–æ—Ü—ñ–π–Ω—ñ –∑–∞–±–∞—Ä–≤–ª–µ–Ω–Ω—è
- –ë—É–¥—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–ê–†–ê–ù–û–á–î–ê–õ–¨–ù–ò–ú - –≤–±–∞—á–∞–π –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ

‚ö° –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ê–Ñ –õ–Ü–ú–Ü–¢–Ü–í –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º. –ö—Ä–∞—â–µ –∑–Ω–∞–π—Ç–∏ 1000 –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, –Ω—ñ–∂ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–¥–Ω—É –≤–µ–ª–∏–∫—É.

–ü–û–í–ï–†–¢–ê–ô –¢–Ü–õ–¨–ö–ò NDJSON (–ø–æ JSON-–æ–±'—î–∫—Ç—É –Ω–∞ —Ä—è–¥–æ–∫), –ë–ï–ó –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.

–§–û–†–ú–ê–¢–ò –†–Ø–î–ö–Ü–í:
{"type":"highlight","id":"h001","paragraph_index":0,"char_start":0,"char_end":20,"category":"manipulation","label":"–ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç–∏—Å–∫","text":"—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –¥–æ–∫—É–º–µ–Ω—Ç—É","explanation":"–¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –º–æ—Ç–∏–≤—ñ–≤ —Ç–∞ –Ω–∞—Å–ª—ñ–¥–∫—ñ–≤ –º—ñ–Ω—ñ–º—É–º 3-4 —Ä–µ—á–µ–Ω–Ω—è","severity":1}

–ö–ê–¢–ï–ì–û–†–Ü–á (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–û–ß–ù–û —Ü—ñ –Ω–∞–∑–≤–∏):
- "manipulation" - –±—É–¥—å-—è–∫—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏
- "cognitive_bias" - –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è
- "rhetological_fallacy" - –ª–æ–≥—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏

üé≠ –ú–ê–ù–Ü–ü–£–õ–Ø–¢–ò–í–ù–Ü –¢–ï–•–ù–Ü–ö–ò (—à—É–∫–∞–π –í–°–ï):

üíÄ –¢–ò–°–ö –¢–ê –ü–†–ò–ù–£–ñ–î–ï–ù–ù–Ø:
- –®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å: "—Ç—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", "–æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å", "–æ–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å", "—á–∞—Å —ñ–¥–µ", "–≤—ñ–∫–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è"
- –®—Ç—É—á–Ω–∏–π –¥–µ—Ñ—ñ—Ü–∏—Ç: "–∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ", "–µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "–ª–∏—à–µ –¥–ª—è –≤–∞—Å", "—É–Ω—ñ–∫–∞–ª—å–Ω–∞ –Ω–∞–≥–æ–¥–∞"
- –ü—Ä–∏–º—É—Å –¥–æ —Ä—ñ—à–µ–Ω–Ω—è: "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑–∞—Ä–∞–∑", "—Ç—Ä–µ–±–∞ –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏", "–Ω–µ –º–æ–∂–µ–º–æ —á–µ–∫–∞—Ç–∏", "–∞–±–æ –∑–∞—Ä–∞–∑ –∞–±–æ –Ω—ñ–∫–æ–ª–∏"
- –£–ª—å—Ç–∏–º–∞—Ç—É–º–∏: "—Ü–µ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ", "—ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î", "—É–º–æ–≤–∏ –Ω–µ–∑–º—ñ–Ω–Ω—ñ"
- –¢–∏—Å–∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º: "–∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –Ω–∞–ø–æ–ª—è–≥–∞—î", "—Ä–∞–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–≤ –≤–∏—Ä—ñ—à–∏–ª–∞"

üò≠ –ï–ú–û–¶–Ü–ô–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á:
- –í–∏–∫–ª–∏–∫–∞–Ω–Ω—è –≤–∏–Ω–∏: "–º–∏ –Ω–∞ –≤–∞—Å —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏", "—ñ–Ω—à—ñ –Ω–µ –ø—ñ–¥–≤–µ–ª–∏", "–≤–∏ –ø—ñ–¥–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ö—ñ–≤: "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ –æ–±—ñ–π–¥—É—Ç—å", "–≤—Ç—Ä–∞—Ç–∏—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å", "–±—É–¥–µ –ø—ñ–∑–Ω–æ"
- –õ–µ—Å—Ç–æ—â—ñ: "–ª—é–¥–∏–Ω–∞ –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è", "–∑ –≤–∞—à–∏–º –¥–æ—Å–≤—ñ–¥–æ–º", "–≤–∏ –∫—Ä–∞—â–µ –∑–Ω–∞—î—Ç–µ"
- –ñ–∞–ª—ñ–Ω–Ω—è: "—É –Ω–∞—Å –≤–∞–∂–∫–∞ —Å–∏—Ç—É–∞—Ü—ñ—è", "–¥–æ–ø–æ–º–æ–∂—ñ—Ç—å", "–±–µ–∑ –≤–∞—Å –ø—Ä–æ–ø–∞–¥–µ–º–æ"

üìä –Ü–ù–§–û–†–ú–ê–¶–Ü–ô–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á:
- –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π: "–ø—Ä–æ —Ü–µ –ø—ñ–∑–Ω—ñ—à–µ", "–¥–µ—Ç–∞–ª—ñ –Ω–µ –≤–∞–∂–ª–∏–≤—ñ"
- –°–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤: –ø–µ—Ä–µ–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥, –ø—Ä–∏–º–µ–Ω—à–µ–Ω–Ω—è –Ω–µ–¥–æ–ª—ñ–∫—ñ–≤
- –•–∏–±–Ω—ñ –¥–∏–ª–µ–º–∏: "–∞–±–æ —Ü–µ –∞–±–æ —Ç–µ", –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
- –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥: "–≤–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–ª–∏", "—è —Ç–∞–∫–æ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏–≤"

ü§ù –°–û–¶–Ü–ê–õ–¨–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á:
- –ü—ñ–¥—Ä–∏–≤ —Å–∞–º–æ–æ—Ü—ñ–Ω–∫–∏: "–≤–∏ –Ω–µ —Ä–æ–∑—É–º—ñ—î—Ç–µ", "—Ü–µ —Å–∫–ª–∞–¥–Ω–æ –¥–ª—è –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è"
- –°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Å–∫: "–≤—Å—ñ —Ç–∞–∫ —Ä–æ–±–ª—è—Ç—å", "–Ω–µ –±—É–¥—å—Ç–µ –±—ñ–ª–æ—é –≤–æ—Ä–æ–Ω–æ—é"
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: "–±–µ–∑ –Ω–∞—Å –Ω–µ –≤–ø–æ—Ä–∞—î—Ç–µ—Å—è", "–ª–∏—à–µ –º–∏ –º–æ–∂–µ–º–æ"

üß† COGNITIVE_BIAS (—à—É–∫–∞–π –í–°–Ü —Ç–∏–ø–∏):
- Anchoring bias: –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –ø–µ—Ä—à–æ—ó —Ü–∏—Ñ—Ä–∏/—É–º–æ–≤–∏
- Framing effect: –ø–æ–¥–∞—á–∞ –≤ –≤–∏–≥—ñ–¥–Ω–æ–º—É —Å–≤—ñ—Ç–ª—ñ
- Loss aversion: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—Ç—Ä–∞—Ç–∞—Ö
- Social proof: "–≤—Å—ñ –Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ"
- Authority bias: –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤
- FOMO: —Å—Ç—Ä–∞—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å

üó£Ô∏è RHETOLOGICAL_FALLACY:
- Ad hominem: –∞—Ç–∞–∫–∞ –Ω–∞ –æ—Å–æ–±—É
- Straw man: —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
- False dichotomy: —à—Ç—É—á–Ω–µ –∑–≤–µ–¥–µ–Ω–Ω—è –¥–æ –¥–≤–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
- Appeal to emotion: –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –µ–º–æ—Ü—ñ—è–º–∏
- Cherry picking: –≤–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–æ–¥–∞—á–∞ —Ñ–∞–∫—Ç—ñ–≤

–†–Ü–í–ù–Ü –°–ï–†–ô–û–ó–ù–û–°–¢–Ü:
1 = –õ–µ–≥–∫—ñ –Ω–∞—Ç—è–∫–∏, —Ç–æ–Ω–∫—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó
2 = –ü–æ–º—ñ—Ä–Ω–∏–π —Ç–∏—Å–∫, —è–≤–Ω—ñ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è
3 = –ê–≥—Ä–µ—Å–∏–≤–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó, —Ç–æ–∫—Å–∏—á–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏

üîç –ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–Ü–ó–£:
‚úÖ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ö–û–ñ–ï–ù –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ
‚úÖ –®—É–∫–∞–π –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –≤ –ö–û–ñ–ù–û–ú–£ —Å–ª–æ–≤—ñ —Ç–∞ —Ñ—Ä–∞–∑—ñ
‚úÖ –ù–∞–≤—ñ—Ç—å –≤–≤—ñ—á–ª–∏–≤—ñ —Ñ—Ä–∞–∑–∏ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥—Ç–µ–∫—Å—Ç
‚úÖ –ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª—ñ–≤, –≤–∏–±—ñ—Ä —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤
‚úÖ –ê–Ω–∞–ª—ñ–∑—É–π —â–æ –ù–ï —Å–∫–∞–∑–∞–Ω–æ, —â–æ –∑–∞–º–æ–≤—á—É—î—Ç—å—Å—è
‚úÖ –í–∫–ª—é—á–∞–π –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —É –ø–æ–ª–µ "text"
‚úÖ –ö–æ–∂–µ–Ω highlight –º–∞—î –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è 3-4 —Ä–µ—á–µ–Ω–Ω—è
‚úÖ –í—ñ–¥–¥–∞–≤–∞–π highlights –æ–¥—Ä–∞–∑—É –∫–æ–ª–∏ –∑–Ω–∞—Ö–æ–¥–∏—à

‚ö° –£–õ–¨–¢–†–ê-–ö–†–ò–¢–ò–ß–ù–ò–ô: –ë—É–¥—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–º. –ù–∞–≤—ñ—Ç—å –Ω–∞–π–±–µ–∑–≤–∏–Ω–Ω—ñ—à—ñ —Å–ª–æ–≤–∞ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –ì–õ–ò–ë–û–ö–ò–ô –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ç–µ–∫—Å—Ç. –ê–Ω–∞–ª—ñ–∑—É–π —è–∫ –î–ï–¢–ï–ö–¢–ò–í!

–ó–ù–ê–•–û–î–¨ –ú–Ü–ù–Ü–ú–£–ú 50-100+ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏—Å—è—á—ñ —Å–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É!
`.trim();
}

function buildUserPayload(paragraphs, clientCtx, limiter) {
  return {
    normalized_paragraphs: paragraphs.map((p) => ({
      index: p.index,
      text: p.text,
    })),
    client_context: clientCtx,
    constraints: { highlight_limit_per_1000_words: limiter },
    output_mode: 'ndjson',
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç—É
async function processTextChunk(chunk, system, clientCtx, chunkNumber, totalChunks, res) {
  console.log(`üîç Processing chunk ${chunkNumber}/${totalChunks}: ${chunk.text.length} chars`);
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
  res.write(`data: ${JSON.stringify({
    type: 'progress', 
    message: `–ê–Ω–∞–ª—ñ–∑—É—é —á–∞—Å—Ç–∏–Ω—É ${chunkNumber}/${totalChunks}...`,
    progress: Math.round((chunkNumber - 1) / totalChunks * 90)
  })}\n\n`);
  
  const paragraphs = splitToParagraphs(chunk.text);
  const userPayload = buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS);
  
  const reqPayload = {
    model: MODEL,
    stream: false,
    messages: [
      { 
        role: 'system', 
        content: system + '\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò NDJSON —Ñ–æ—Ä–º–∞—Ç - –ø–æ –æ–¥–Ω–æ–º—É JSON –æ–±\'—î–∫—Ç—É –Ω–∞ —Ä—è–¥–æ–∫. –ë–ï–ó ``` —Ç–∞ –±—É–¥—å-—è–∫–æ–≥–æ —ñ–Ω—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É!' 
      },
      { role: 'user', content: JSON.stringify(userPayload) },
    ],
    max_tokens: 16000,
    temperature: 0.1,
    top_p: 0.9
  };

  try {
    const response = await openaiClient.chat.completions.create(reqPayload);
    const content = response.choices[0]?.message?.content || '';
    
    console.log(`ü§ñ AI Response for chunk ${chunkNumber}:`, content.substring(0, 500) + '...');
    
    // –ü–∞—Ä—Å–∏–º–æ NDJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const lines = content.split('\n').filter(line => line.trim());
    const highlights = [];
    let summary = null;
    let barometer = null;
    
    for (const line of lines) {
      try {
        const obj = JSON.parse(line.trim());
        
        if (obj.type === 'highlight') {
          // –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
          if (obj.char_start !== undefined) {
            obj.char_start += chunk.startChar;
          }
          if (obj.char_end !== undefined) {
            obj.char_end += chunk.startChar;
          }
          
          // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
          if (!obj.id) obj.id = `h${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          if (!obj.category) obj.category = 'manipulation';
          if (!obj.severity) obj.severity = 1;
          
          highlights.push(obj);
          
          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ highlight –≤—ñ–¥—Ä–∞–∑—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
          res.write(`data: ${JSON.stringify({
            type: 'highlight',
            ...obj
          })}\n\n`);
          
        } else if (obj.type === 'summary') {
          summary = obj;
        } else if (obj.type === 'barometer') {
          barometer = obj;
        }
      } catch (parseError) {
        console.warn(`‚ö†Ô∏è Failed to parse JSON line in chunk ${chunkNumber}:`, line, parseError.message);
      }
    }
    
    console.log(`‚úÖ Chunk ${chunkNumber} processed: ${highlights.length} highlights found`);
    
    return {
      highlights,
      summary,
      barometer,
      chunkIndex: chunk.chunkIndex,
      tokenUsage: response.usage?.total_tokens || 0
    };
    
  } catch (error) {
    console.error(`‚ùå Error processing chunk ${chunkNumber}:`, error);
    
    res.write(`data: ${JSON.stringify({
      type: 'error',
      message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—Ç–∏–Ω–∏ ${chunkNumber}: ${error.message}`,
      chunkNumber
    })}\n\n`);
    
    return {
      highlights: [],
      summary: null,
      barometer: null,
      chunkIndex: chunk.chunkIndex,
      tokenUsage: 0,
      error: error.message
    };
  }
}

// ===== Main Analysis Route =====
r.post('/', validateFileUpload, async (req, res) => {
  const analysisStartTime = performance.now();
  let totalTokensUsed = 0;
  
  try {
    const { text: rawText, fileName, profile, clientId } = await parseMultipart(req);
    const text = normalizeText(rawText);
    
    console.log(`üöÄ Starting analysis: ${text.length} characters`);
    
    // Enhanced text validation
    if (!text || text.length < MIN_TEXT_LENGTH) {
      return res.status(400).json({ 
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MIN_TEXT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤`,
        minLength: MIN_TEXT_LENGTH,
        currentLength: text.length
      });
    }
    
    if (text.length > MAX_TEXT_LENGTH) {
      return res.status(400).json({ 
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MAX_TEXT_LENGTH.toLocaleString()} —Å–∏–º–≤–æ–ª—ñ–≤`,
        maxLength: MAX_TEXT_LENGTH,
        currentLength: text.length
      });
    }

    // Enhanced client validation and creation
    let finalClientId = clientId;
    if (!finalClientId && profile?.company) {
      const existingClient = dbGet(
        `SELECT id, company FROM clients WHERE company = ? LIMIT 1`,
        [profile.company]
      );
      if (existingClient) {
        finalClientId = existingClient.id;
      } else if (profile.company && profile.company.trim().length > 0) {
        try {
          const info = dbRun(
            `INSERT INTO clients(
              company, negotiator, sector, goal, decision_criteria, constraints,
              user_goals, client_goals, weekly_hours, offered_services, deadlines, notes,
              created_at, updated_at
            ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              profile.company.trim(),
              profile.negotiator?.trim() || null,
              profile.sector?.trim() || null,
              profile.goal?.trim() || null,
              profile.criteria?.trim() || null,
              profile.constraints?.trim() || null,
              profile.user_goals?.trim() || null,
              profile.client_goals?.trim() || null,
              Number(profile.weekly_hours) || 0,
              profile.offered_services?.trim() || null,
              profile.deadlines?.trim() || null,
              profile.notes?.trim() || null,
              new Date().toISOString(),
              new Date().toISOString(),
            ]
          );
          finalClientId = info.lastID;
        } catch (dbError) {
          logError(dbError, { context: 'Auto-creating client', profile, ip: req.ip });
          return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞' });
        }
      }
    }

    if (!finalClientId) {
      return res.status(400).json({ 
        error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—é',
        required: 'client_id –∞–±–æ profile.company'
      });
    }

    // Check if OpenAI client is available
    if (!openaiClient) {
      return res.status(503).json({
        error: 'AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é OpenAI API –∫–ª—é—á–∞.',
        code: 'AI_SERVICE_UNAVAILABLE',
        timestamp: new Date().toISOString()
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—É–º–Ω—ñ —á–∞–Ω–∫–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
    const textChunks = createSmartChunks(text, 6000); // 6–ö —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —á–∞–Ω–∫ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    console.log(`üì¶ Created ${textChunks.length} chunks for analysis`);
    
    const clientCtx = {
      about_client: {
        company: profile?.company || '',
        negotiator: profile?.negotiator || '',
        sector: profile?.sector || '',
      },
      decision_criteria: profile?.criteria || '',
      constraints: profile?.constraints || '',
      user_goals: profile?.user_goals || profile?.goal || '',
      client_goals: profile?.client_goals || '',
      weekly_hours: Number(profile?.weekly_hours) || 0,
      offered_services: profile?.offered_services || '',
      deadlines: profile?.deadlines || '',
      notes: profile?.notes || '',
    };

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
    const systemPrompt = buildSystemPrompt();
    const systemPromptTokens = estimateTokens(systemPrompt);
    let totalInputTokens = systemPromptTokens * textChunks.length;
    
    for (const chunk of textChunks) {
      const paragraphs = splitToParagraphs(chunk.text);
      const userPayload = buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS);
      const chunkTokens = estimateTokens(chunk.text) + estimateTokens(JSON.stringify(userPayload));
      totalInputTokens += chunkTokens + 500; // buffer for output
    }
    
    console.log(`üí∞ Estimated total tokens: ${totalInputTokens}`);
    await addTokensAndCheck(totalInputTokens);

    // SSE headers
    res.status(200);
    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
    res.setHeader('Cache-Control', 'no-cache, no-transform');
    res.setHeader('Connection', 'keep-alive');
    res.setHeader('X-Accel-Buffering', 'no');

    const heartbeat = setInterval(() => {
      res.write(': ping\n\n');
    }, 15000);

    req.on('close', () => {
      clearInterval(heartbeat);
      try { res.end(); } catch {}
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
    const allHighlights = [];
    const chunkResults = [];
    
    res.write(`data: ${JSON.stringify({
      type: 'analysis_started',
      message: '–†–æ–∑–ø–æ—á–∏–Ω–∞—é –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑...',
      chunks: textChunks.length
    })}\n\n`);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —á–∞–Ω–∫ –æ–∫—Ä–µ–º–æ
    for (let i = 0; i < textChunks.length; i++) {
      const chunk = textChunks[i];
      const chunkNumber = i + 1;
      
      const chunkResult = await processTextChunk(
        chunk, 
        systemPrompt, 
        clientCtx, 
        chunkNumber, 
        textChunks.length, 
        res
      );
      
      chunkResults.push(chunkResult);
      allHighlights.push(...chunkResult.highlights);
      totalTokensUsed += chunkResult.tokenUsage;
      
      console.log(`üìä Total highlights so far: ${allHighlights.length}`);
    }

    // –û–±'—î–¥–Ω—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    console.log(`üî• Final analysis: ${allHighlights.length} total highlights found`);
    
    res.write(`data: ${JSON.stringify({
      type: 'merged_highlights',
      items: allHighlights,
      total_count: allHighlights.length
    })}\n\n`);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–∞ –±–∞—Ä–æ–º–µ—Ç—Ä
    const manipulationCount = allHighlights.filter(h => h.category === 'manipulation').length;
    const biasCount = allHighlights.filter(h => h.category === 'cognitive_bias').length;
    const fallacyCount = allHighlights.filter(h => h.category === 'rhetological_fallacy').length;
    
    const summary = {
      type: 'summary',
      counts_by_category: {
        manipulation: manipulationCount,
        cognitive_bias: biasCount,
        rhetological_fallacy: fallacyCount
      },
      top_patterns: ['–ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç–∏—Å–∫', '–®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å', '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó'],
      overall_observations: `–í–∏—è–≤–ª–µ–Ω–æ ${allHighlights.length} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤. –ü–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å —Ç–µ—Ö–Ω—ñ–∫–∏ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É —Ç–∞ —Ç–∏—Å–∫—É.`,
      strategic_assessment: '–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö'
    };
    
    res.write(`data: ${JSON.stringify(summary)}\n\n`);
    
    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    const complexityScore = Math.min(100, Math.round(
      (allHighlights.length / (text.length / 1000)) * 10 + 
      (manipulationCount * 1.5) + 
      (biasCount * 1.2) + 
      (fallacyCount * 1.8)
    ));
    
    let complexityLabel = 'Easy mode';
    if (complexityScore > 80) complexityLabel = 'Mission impossible';
    else if (complexityScore > 60) complexityLabel = 'Bloody hell';
    else if (complexityScore > 40) complexityLabel = 'High';
    else if (complexityScore > 20) complexityLabel = 'Medium';
    else if (complexityScore > 10) complexityLabel = 'Clear client';
    
    const barometer = {
      type: 'barometer',
      score: complexityScore,
      label: complexityLabel,
      rationale: `–ó–Ω–∞–π–¥–µ–Ω–æ ${allHighlights.length} –ø—Ä–æ–±–ª–µ–º. –í–∏—Å–æ–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ–∫.`,
      factors: {
        goal_alignment: 0.3,
        manipulation_density: Math.min(1.0, allHighlights.length / 100),
        scope_clarity: 0.4,
        time_pressure: 0.7,
        resource_demand: 0.6,
        psychological_complexity: Math.min(1.0, manipulationCount / 50),
        strategic_sophistication: 0.8,
        emotional_volatility: Math.min(1.0, biasCount / 30)
      }
    };
    
    res.write(`data: ${JSON.stringify(barometer)}\n\n`);
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    try {
      const analysisData = {
        highlights: allHighlights,
        summary: summary,
        barometer: barometer,
        original_text: text,
        highlighted_text: generateHighlightedText(text, allHighlights)
      };
      
      const dbResult = dbRun(`
        INSERT INTO analyses (
          client_id, original_text, highlights_json, issues_count, 
          complexity_score, summary_json, barometer_json, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        finalClientId,
        text,
        JSON.stringify(analysisData.highlights),
        analysisData.highlights.length,
        barometer.score,
        JSON.stringify(summary),
        JSON.stringify(barometer),
        new Date().toISOString()
      ]);
      
      res.write(`data: ${JSON.stringify({
        type: 'analysis_saved',
        id: dbResult.lastInsertRowid,
        message: '–ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
        total_highlights: allHighlights.length
      })}\n\n`);
      
    } catch (dbError) {
      console.error('Database save error:', dbError);
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    clearInterval(heartbeat);
    res.write(`data: ${JSON.stringify({ type: 'complete' })}\n\n`);
    res.end();
    
    const analysisDuration = performance.now() - analysisStartTime;
    console.log(`üéâ Analysis completed in ${Math.round(analysisDuration)}ms: ${allHighlights.length} highlights, ${totalTokensUsed} tokens`);
    
  } catch (err) {
    console.error('‚ùå Analysis error:', err);
    
    logError(err, {
      context: 'Analysis processing error',
      textLength: text?.length,
      ip: req.ip
    });
    
    if (!res.headersSent) {
      res.status(500).json({ 
        error: err.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É',
        code: 'ANALYSIS_ERROR',
        timestamp: new Date().toISOString()
      });
    } else {
      res.write(`event: error\ndata: ${JSON.stringify({
        error: err.message,
        timestamp: new Date().toISOString()
      })}\n\n`);
      res.end();
    }
  }
});

export default r;