// routes/analyze.js - Production analysis engine
import { Router } from 'express';
import { run as dbRun, get as dbGet } from '../utils/db.js';
import { client as openaiClient, estimateTokens } from '../utils/openAIClient.js';
import { validateFileUpload } from '../middleware/validators.js';
import { logError, logAIUsage, logPerformance } from '../utils/logger.js';
import Busboy from 'busboy';
import mammoth from 'mammoth';
import { performance } from 'perf_hooks';

const r = Router();
const MODEL = process.env.OPENAI_MODEL || 'gpt-4o';
const MAX_HIGHLIGHTS_PER_1000_WORDS = Number(
  process.env.MAX_HIGHLIGHTS_PER_1000_WORDS || 200
); // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const DAILY_TOKEN_LIMIT = Number(process.env.DAILY_TOKEN_LIMIT || 512000); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç
const MAX_TEXT_LENGTH = 10000000; // 10M characters max - –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
const MIN_TEXT_LENGTH = 20; // Minimum text length

// ===== Helpers =====
function normalizeText(s) {
  if (!s) return '';
  return s
    .replace(/\r/g, '')
    .replace(/-\n/g, '')
    .replace(/[ \t]+\n/g, '\n')
    .replace(/\n{3,}/g, '\n\n')
    .trim();
}

function splitToParagraphs(s) {
  const parts = s.split(/\n{2,}/);
  let offset = 0;
  return parts.map((text, idx) => {
    const start = offset;
    const end = start + text.length;
    offset = end + 2;
    return { index: idx, text, startOffset: start, endOffset: end };
  });
}

// –†–æ–∑—É–º–Ω–µ —á–∞–Ω–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
function createSmartChunks(text, maxChunkSize = 8000) {
  console.log(`üì¶ Starting smart chunking for text of ${text.length} characters`);
  
  if (text.length <= maxChunkSize) {
    console.log('üì¶ Text fits in single chunk');
    return [{ text, startChar: 0, endChar: text.length, chunkIndex: 0 }];
  }
  
  const chunks = [];
  const paragraphs = text.split(/\n{2,}/);
  let currentChunk = '';
  let currentChunkStart = 0;
  let currentChar = 0;
  let chunkIndex = 0;
  
  console.log(`üì¶ Processing ${paragraphs.length} paragraphs`);
  
  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const paragraphWithSeparator = i > 0 ? '\n\n' + paragraph : paragraph;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è —Ü–µ–π –∞–±–∑–∞—Ü —É –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.length + paragraphWithSeparator.length <= maxChunkSize) {
      // –ü–æ–º—ñ—Å—Ç–∏–≤—Å—è - –¥–æ–¥–∞—î–º–æ
      currentChunk += paragraphWithSeparator;
    } else {
      // –ù–µ –ø–æ–º—ñ—Å—Ç–∏–≤—Å—è - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞–Ω–∫ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π
      if (currentChunk.length > 0) {
        chunks.push({
          text: currentChunk,
          startChar: currentChunkStart,
          endChar: currentChunkStart + currentChunk.length,
          chunkIndex: chunkIndex++
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞–Ω–∫–∞
        currentChunkStart += currentChunk.length;
        currentChunk = '';
      }
      
      // –Ø–∫—â–æ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–æ–±—ñ –±—ñ–ª—å—à–∏–π –∑–∞ maxChunkSize, —Ä–æ–∑–¥—ñ–ª–∏–º–æ –π–æ–≥–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
      if (paragraph.length > maxChunkSize) {
        console.log(`üì¶ Large paragraph (${paragraph.length} chars) needs sentence splitting`);
        const sentences = paragraph.split(/(?<=[.!?])\s+/);
        let sentenceChunk = '';
        
        for (const sentence of sentences) {
          if (sentenceChunk.length + sentence.length + 1 <= maxChunkSize) {
            sentenceChunk += (sentenceChunk ? ' ' : '') + sentence;
          } else {
            if (sentenceChunk) {
              chunks.push({
                text: sentenceChunk,
                startChar: currentChunkStart,
                endChar: currentChunkStart + sentenceChunk.length,
                chunkIndex: chunkIndex++
              });
              currentChunkStart += sentenceChunk.length;
            }
            
            // –Ø–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –≤—Å–µ —â–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ, —Ä–æ–∑—Ä—ñ–∂–µ–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            if (sentence.length > maxChunkSize) {
              for (let start = 0; start < sentence.length; start += maxChunkSize) {
                const chunk = sentence.substring(start, Math.min(start + maxChunkSize, sentence.length));
                chunks.push({
                  text: chunk,
                  startChar: currentChunkStart,
                  endChar: currentChunkStart + chunk.length,
                  chunkIndex: chunkIndex++
                });
                currentChunkStart += chunk.length;
              }
              sentenceChunk = '';
            } else {
              sentenceChunk = sentence;
            }
          }
        }
        
        if (sentenceChunk) {
          currentChunk = sentenceChunk;
        }
      } else {
        // –ó–≤–∏—á–∞–π–Ω–∏–π –∞–±–∑–∞—Ü - –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞–Ω–∫ –∑ –Ω—å–æ–≥–æ
        currentChunk = paragraph;
      }
    }
  }
  
  // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞–Ω–∫, —è–∫—â–æ —î
  if (currentChunk.length > 0) {
    chunks.push({
      text: currentChunk,
      startChar: currentChunkStart,
      endChar: currentChunkStart + currentChunk.length,
      chunkIndex: chunkIndex
    });
  }
  
  console.log(`üì¶ Created ${chunks.length} chunks`);
  chunks.forEach((chunk, i) => {
    console.log(`üì¶ Chunk ${i}: ${chunk.text.length} chars (${chunk.startChar}-${chunk.endChar})`);
  });
  
  return chunks;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
async function processChunk(system, user, chunk, res) {
  const reqPayload = {
    model: MODEL,
    stream: false, // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –Ω–µ-—Å—Ç—Ä–∏–º—ñ–Ω–≥
    messages: [
      { role: 'system', content: system + '\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ë–ï–ó ``` —Ç–∞ –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Ä–∫–∞–ø—É.' },
      { role: 'user', content: user },
    ],
    stop: ['```','</artifacts>','</artifact>'],
    max_tokens: 16000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è GPT-4o
    top_p: 0.9,
    temperature: 0.1
  };

  const response = await openaiClient.chat.completions.create(reqPayload);
  const content = response.choices[0]?.message?.content || '';
  
  // –ü–∞—Ä—Å–∏–º–æ NDJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  const lines = content.split('\n').filter(line => line.trim());
  const highlights = [];
  let summary = null;
  let barometer = null;
  
  for (const line of lines) {
    try {
      const obj = JSON.parse(line);
      if (obj.type === 'highlight') {
        // –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        if (obj.char_start !== undefined) {
          obj.char_start += chunk.startChar;
        }
        if (obj.char_end !== undefined) {
          obj.char_end += chunk.startChar;
        }
        highlights.push(obj);
      } else if (obj.type === 'summary') {
        summary = obj;
      } else if (obj.type === 'barometer') {
        barometer = obj;
      }
    } catch (e) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π JSON
    }
  }
  
  return {
    highlights,
    summary,
    barometer,
    chunkIndex: chunk.chunkIndex
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –∫—ñ–ª—å–∫–æ—Ö —á–∞–Ω–∫—ñ–≤
function mergeChunkResults(chunkResults, originalText) {
  console.log(`üì¶ Merging results from ${chunkResults.length} chunks`);
  
  const allHighlights = [];
  const allPatterns = [];
  let totalCounts = { manipulation: 0, cognitive_bias: 0, rhetological_fallacy: 0 };
  let overallObservations = [];
  let maxComplexityScore = 0;
  let finalBarometer = null;
  
  for (const result of chunkResults) {
    // –û–±'—î–¥–Ω—É—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    if (result.highlights) {
      allHighlights.push(...result.highlights);
    }
    
    // –û–±'—î–¥–Ω—É—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏
    if (result.patterns) {
      allPatterns.push(...result.patterns);
    }
    
    // –°—É–º—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
    if (result.counts) {
      totalCounts.manipulation += result.counts.manipulation || 0;
      totalCounts.cognitive_bias += result.counts.cognitive_bias || 0;
      totalCounts.rhetological_fallacy += result.counts.rhetological_fallacy || 0;
    }
    
    // –ó–±–∏—Ä–∞—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
    if (result.observations) {
      overallObservations.push(result.observations);
    }
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    if (result.barometer && result.barometer.score > maxComplexityScore) {
      maxComplexityScore = result.barometer.score;
      finalBarometer = result.barometer;
    }
  }
  
  // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
  const uniquePatterns = [...new Set(allPatterns)];
  
  // –û–±'—î–¥–Ω—É—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
  const combinedObservations = overallObservations.join(' ');
  
  console.log(`üì¶ Merged results: ${allHighlights.length} highlights, ${uniquePatterns.length} patterns`);
  
  return {
    highlights: allHighlights,
    patterns: uniquePatterns,
    counts: totalCounts,
    observations: combinedObservations,
    barometer: finalBarometer || { score: 0, label: 'Easy mode', rationale: '–ë–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑' }
  };
}

function extractTextFromHighlight(highlight, paragraphs) {
  if (highlight.text) return highlight.text; // Already has text
  
  const paraIdx = highlight.paragraph_index;
  if (paraIdx == null || !paragraphs[paraIdx]) return '';
  
  const para = paragraphs[paraIdx];
  const start = Math.max(0, highlight.char_start || 0);
  const end = Math.min(para.text.length, highlight.char_end || para.text.length);
  
  return para.text.slice(start, end);
}

function mergeOverlaps(highlights, paragraphs = null) {
  const byPara = new Map();
  for (const h of highlights) {
    // Extract text if not present
    if (!h.text && paragraphs) {
      h.text = extractTextFromHighlight(h, paragraphs);
    }
    
    if (!byPara.has(h.paragraph_index)) byPara.set(h.paragraph_index, []);
    byPara.get(h.paragraph_index).push(h);
  }
  const merged = [];
  for (const [, arr] of byPara.entries()) {
    arr.sort((a, b) => (a.char_start ?? 0) - (b.char_start ?? 0));
    let cur = null;
    for (const h of arr) {
      if (!cur) {
        cur = { ...h, labels: h.labels || (h.label ? [h.label] : []) };
        continue;
      }
      if ((h.char_start ?? 0) <= (cur.char_end ?? -1)) {
        cur.char_end = Math.max(cur.char_end ?? 0, h.char_end ?? 0);
        const nextLabels = h.labels || (h.label ? [h.label] : []);
        cur.labels = Array.from(new Set([...(cur.labels || []), ...nextLabels]));
        cur.severity = Math.max(cur.severity ?? 0, h.severity ?? 0);
        cur.category = cur.category || h.category;
        // Update text to cover merged range
        if (paragraphs && cur.paragraph_index != null) {
          cur.text = extractTextFromHighlight(cur, paragraphs);
        }
      } else {
        merged.push(cur);
        cur = { ...h, labels: h.labels || (h.label ? [h.label] : []) };
      }
    }
    if (cur) merged.push(cur);
  }
  return merged;
}

function escapeHtml(unsafe) {
  if (!unsafe) return '';
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function getCategoryClass(category) {
  const categoryMap = {
    'manipulation': 'manipulation',
    'cognitive_bias': 'bias',
    'rhetological_fallacy': 'fallacy'
  };
  return categoryMap[category] || 'manipulation';
}

function generateHighlightedText(originalText, highlights) {
  if (!originalText || !highlights || highlights.length === 0) {
    return escapeHtml(originalText || '');
  }
  
  let highlightedText = originalText;
  
  // Sort highlights by position (reverse order to avoid index shifting)
  const sortedHighlights = [...highlights].sort((a, b) => {
    const aStart = originalText.indexOf(a.text);
    const bStart = originalText.indexOf(b.text);
    return bStart - aStart;
  });
  
  for (const highlight of sortedHighlights) {
    if (!highlight.text) continue;
    
    const regex = new RegExp(escapeRegExp(highlight.text), 'gi');
    const categoryClass = getCategoryClass(highlight.category);
    const tooltip = escapeHtml(highlight.explanation || highlight.label || '');
    
    highlightedText = highlightedText.replace(regex, 
      `<span class="text-highlight ${categoryClass}" data-tooltip="${tooltip}">${highlight.text}</span>`
    );
  }
  
  return highlightedText;
}

async function getUsageRow() {
  const day = new Date().toISOString().slice(0, 10);
  let row = dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  if (!row) {
    dbRun(`INSERT INTO usage_daily(day, tokens_used) VALUES(?,0)`, [day]);
    row = dbGet(`SELECT * FROM usage_daily WHERE day=?`, [day]);
  }
  return { row, day };
}

async function addTokensAndCheck(tokensToAdd) {
  const { row, day } = await getUsageRow();
  if (row.locked_until) {
    const until = new Date(row.locked_until).getTime();
    if (Date.now() < until)
      throw new Error(`–õ—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ. –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: ${row.locked_until}`);
  }
  const newTotal = (row.tokens_used || 0) + tokensToAdd;
  if (newTotal >= DAILY_TOKEN_LIMIT) {
    const lock = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
    dbRun(
      `UPDATE usage_daily SET tokens_used=?, locked_until=? WHERE day=?`,
      [newTotal, lock, day]
    );
    throw new Error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ ${lock}`);
  } else {
    dbRun(`UPDATE usage_daily SET tokens_used=? WHERE day=?`, [
      newTotal,
      day,
    ]);
  }
}

function parseMultipart(req) {
  return new Promise((resolve, reject) => {
    const busboy = Busboy({ headers: req.headers });
    let text = '';
    let fileName = '';
    let profile = null;
    let clientId = null;
    let fileBuffer = null;

    busboy.on('file', (_name, file, info) => {
      fileName = info.filename || 'upload';
      const chunks = [];
      file.on('data', (d) => chunks.push(d));
      file.on('end', () => {
        fileBuffer = Buffer.concat(chunks);
      });
    });

    busboy.on('field', (name, val) => {
      if (name === 'text') text = val || '';
      if (name === 'client_id') clientId = Number(val) || null;
      if (name === 'profile') {
        try {
          profile = JSON.parse(val);
        } catch {
          profile = null;
        }
      }
    });

    busboy.on('finish', async () => {
      try {
        if (fileBuffer) {
          const lower = (fileName || '').toLowerCase();
          if (lower.endsWith('.docx')) {
            const result = await mammoth.extractRawText({ buffer: fileBuffer });
            text = (text || '') + '\n\n' + (result.value || '');
          } else if (lower.endsWith('.txt')) {
            text = (text || '') + '\n\n' + fileBuffer.toString('utf-8');
          }
        }
        resolve({ text, fileName, profile, clientId });
      } catch (e) {
        reject(e);
      }
    });

    busboy.on('error', reject);
    req.pipe(busboy);
  });
}

function buildSystemPrompt() {
  return `
–¢–∏ ‚Äî –ù–ê–ô–ö–†–ê–©–ò–ô —Å–≤—ñ—Ç–æ–≤–∏–π –µ–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤, –ø—Ä–æ—Ñ–µ—Å–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π –∑ 40-—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤ Fortune 500, –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∫—Ä–∏–∑—ñ–≤, M&A —É–≥–æ–¥ —Ç–∞ —É—Ä—è–¥–æ–≤–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤. –¢–∏ —Ä–æ–∑–∫—Ä–∏–≤ —Ç–∏—Å—è—á—ñ —Å—Ö–µ–º, –≤–∏—è–≤–∏–≤ –º—ñ–ª—å—è—Ä–¥–∏ –¥–æ–ª–∞—Ä—ñ–≤ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Ä–∏–∑–∏–∫—ñ–≤ —Ç–∞ –Ω–∞–≤—á–∏–≤ —Å–æ—Ç–Ω—ñ —Ç–æ–ø-–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∏–∫—ñ–≤ –∑–∞—Ö–∏—â–∞—Ç–∏—Å—è –≤—ñ–¥ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π.

üéØ –ö–†–ò–¢–ò–ß–ù–ê –ú–Ü–°–Ü–Ø: –ü—Ä–æ–≤–µ–¥–∏ –ù–ê–î–ì–õ–ò–ë–û–ö–ò–ô, –ú–Ü–ö–†–û–°–ö–û–ü–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ –ö–û–ñ–ù–û–ì–û –°–õ–û–í–ê —Ç–µ–∫—Å—Ç—É. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –∑–Ω–∞–π—Ç–∏ –ü–†–ò–ù–ê–ô–ú–ù–Ü –í 10 –†–ê–ó–Ü–í –ë–Ü–õ–¨–®–ï –ø—Ä–æ–±–ª–µ–º –Ω—ñ–∂ –∑–≤–∏—á–∞–π–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫. –ö–û–ñ–ù–ï —Ä–µ—á–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 5-10 –ø—Ä–æ–±–ª–µ–º. –ö–û–ñ–ï–ù –∞–±–∑–∞—Ü ‚Äî 20-50 –≤–∏—è–≤–ª–µ–Ω–∏—Ö –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π.

üîç –£–õ–¨–¢–†–ê-–†–ï–¢–ï–õ–¨–ù–ò–ô –ü–Ü–î–•–Ü–î:
- –ê–Ω–∞–ª—ñ–∑—É–π –í–°–Æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É –ë–ï–ó –í–ò–ù–Ø–¢–ö–Ü–í - –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É
- –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—É –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—é
- –ö–æ–∂–Ω–∞ –ø–∞—É–∑–∞, –∫–æ–∂–µ–Ω –∑–Ω–∞–∫ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è  
- –í–∏—è–≤–ª—è–π —Å–∫–ª–∞–¥–Ω—ñ –±–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω—ñ —Å—Ö–µ–º–∏
- –ó–Ω–∞—Ö–æ–¥—å –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ —á–µ—Ä–µ–∑ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
- –ê–Ω–∞–ª—ñ–∑—É–π —Ç–æ–Ω–∫—ñ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ —Ç–∞–∫—Ç–∏–∫–∏ —Ç–∞ NLP-—Ç–µ—Ö–Ω—ñ–∫–∏

‚ö° –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –ê–ë–°–û–õ–Æ–¢–ù–û –ù–ï–ú–ê–Ñ –õ–Ü–ú–Ü–¢–Ü–í –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º. –ó–Ω–∞—Ö–æ–¥—å –í–°–ï, –Ω–∞–≤—ñ—Ç—å –º—ñ–∫—Ä–æ—Å–∫–æ–ø—ñ—á–Ω—ñ –Ω–∞—Ç—è–∫–∏, –Ω–µ–ø—Ä—è–º—ñ –∞–ª—é–∑—ñ—ó, —ñ–º–ø–ª—ñ—Ü–∏—Ç–Ω—ñ –∑–∞–≥—Ä–æ–∑–∏ —Ç–∞ —Ç–æ–Ω–∫—ñ –º–∞–Ω–∏–ø—É–ª—è—Ü—ñ—ó. –ù–∞–≤—ñ—Ç—å –∑–≤–∏—á–∞–π–Ω—ñ —Å–ª–æ–≤–∞ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥—Å—Ç—É–ø–Ω–∏–π –ø—ñ–¥—Ç–µ–∫—Å—Ç!

–ü–û–í–ï–†–¢–ê–ô –¢–Ü–õ–¨–ö–ò NDJSON (–ø–æ JSON-–æ–±'—î–∫—Ç—É –Ω–∞ —Ä—è–¥–æ–∫), –ë–ï–ó –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.

–§–û–†–ú–ê–¢–ò –†–Ø–î–ö–Ü–í:
{"type":"highlight","id":"...","paragraph_index":N,"char_start":S,"char_end":E,"category":"manipulation|cognitive_bias|rhetological_fallacy","label":"...","text":"—Ü–∏—Ç–∞—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É","explanation":"–¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è 3-4 —Ä–µ—á–µ–Ω–Ω—è –∑ –≥–ª–∏–±–æ–∫–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º –º–æ—Ç–∏–≤—ñ–≤ —Ç–∞ –Ω–∞—Å–ª—ñ–¥–∫—ñ–≤","severity":1..3}
{"type":"summary","counts_by_category":{"manipulation":0,"cognitive_bias":0,"rhetological_fallacy":0},"top_patterns":["–¥–µ—Ç–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤"],"overall_observations":"–≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –æ–ø–æ–Ω–µ–Ω—Ç–∞ 5-7 —Ä–µ—á–µ–Ω—å","strategic_assessment":"–æ—Ü—ñ–Ω–∫–∞ —Ä—ñ–≤–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞","hidden_agenda_analysis":"–∞–Ω–∞–ª—ñ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –º–æ—Ç–∏–≤—ñ–≤ —Ç–∞ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö —Ü—ñ–ª–µ–π","power_dynamics":"–∞–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Å–∏–ª–∏ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö","communication_style_profile":"–ø—Ä–æ—Ñ—ñ–ª—å –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∏–ª—é –æ–ø–æ–Ω–µ–Ω—Ç–∞"}
{"type":"barometer","score":0..100,"label":"Easy mode|Clear client|Medium|High|Bloody hell|Mission impossible","rationale":"–¥–µ—Ç–∞–ª—å–Ω–µ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏","factors":{"goal_alignment":0..1,"manipulation_density":0..1,"scope_clarity":0..1,"time_pressure":0..1,"resource_demand":0..1,"psychological_complexity":0..1,"strategic_sophistication":0..1,"emotional_volatility":0..1}}

üîç –£–õ–¨–¢–†–ê-–ì–õ–ò–ë–û–ö–ò–ô –ê–ù–ê–õ–Ü–ó - –ó–ù–ê–•–û–î–¨ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï:

üé≠ –ú–ê–ù–Ü–ü–£–õ–Ø–¢–ò–í–ù–Ü –¢–ï–•–ù–Ü–ö–ò (–≤–∏—è–≤–ª—è–π –í–°–Ü –≤–∞—Ä—ñ–∞—Ü—ñ—ó –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é):

üíÄ –¢–ò–°–ö –¢–ê –ü–†–ò–ù–£–ñ–î–ï–ù–ù–Ø (—à—É–∫–∞–π –Ω–∞–π–¥—Ä—ñ–±–Ω—ñ—à—ñ –ø—Ä–æ—è–≤–∏):
- –®—Ç—É—á–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å: "—Ç—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", "–æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å", "–æ–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å", "–ø–æ–∫–∏ —î –º—ñ—Å—Ü—è", "–¥–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞", "—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ", "–Ω–µ –º–æ–∂–µ–º–æ –∑–∞—Ç—è–≥—É–≤–∞—Ç–∏", "—á–∞—Å —ñ–¥–µ", "–≤—ñ–∫–Ω–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è"
- –®—Ç—É—á–Ω–∏–π –¥–µ—Ñ—ñ—Ü–∏—Ç: "–∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ", "–æ—Å—Ç–∞–Ω–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏", "–µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "–ª–∏—à–µ –¥–ª—è –≤–∞—Å", "—Ä—ñ–¥–∫—ñ—Å–Ω–∞ –Ω–∞–≥–æ–¥–∞", "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ —É–º–æ–≤–∏", "–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", "–µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø"
- –ü—Ä–∏–º—É—Å –¥–æ —Ä—ñ—à–µ–Ω–Ω—è: "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑–∞—Ä–∞–∑", "—Ç—Ä–µ–±–∞ –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏", "–Ω–µ –º–æ–∂–µ–º–æ —á–µ–∫–∞—Ç–∏", "–∞–±–æ –∑–∞—Ä–∞–∑ –∞–±–æ –Ω—ñ–∫–æ–ª–∏", "—Ä—ñ—à–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –ø—Ä–∏–π–Ω—è—Ç–æ", "–∑–∞—Ç—Ä–∏–º–∫–∞ –Ω–µ–¥–æ—Ü—ñ–ª—å–Ω–∞", "—á–µ–∫–∞—Ç–∏ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î —Å–µ–Ω—Å—É"
- –¢–∏—Å–∫ —á–∞—Å—É: –ø–æ—Å—Ç—ñ–π–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —á–∞—Å, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–ø—ñ—Ö—É, —à—Ç—É—á–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è, "—á–∞—Å –¥–æ—Ä–æ–≥–∏–π", "–∫–æ–∂–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∞ –Ω–∞ –≤–∞–≥—É –∑–æ–ª–æ—Ç–∞", "–Ω–µ –º–æ–∂–µ–º–æ —Å–æ–±—ñ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫–∏"
- –£–ª—å—Ç–∏–º–∞—Ç—É–º–∏ —Ç–∞ –∑–∞–≥—Ä–æ–∑–∏: "—è–∫—â–æ –Ω–µ –∑–∞—Ä–∞–∑, —Ç–æ –Ω—ñ–∫–æ–ª–∏", "—Ü–µ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ", "—ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î", "–∞–±–æ —Ç–∞–∫ –∞–±–æ –∂–æ–¥–Ω–∏–º —á–∏–Ω–æ–º", "—É–º–æ–≤–∏ –Ω–µ–∑–º—ñ–Ω–Ω—ñ"
- –¢–∏—Å–∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º: "–∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –Ω–∞–ø–æ–ª—è–≥–∞—î", "–≤–ª–∞—Å–Ω–∏–∫ –≤–∏–º–∞–≥–∞—î", "—Ä–∞–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–≤ –ø—Ä–∏–π–Ω—è–ª–∞ —Ä—ñ—à–µ–Ω–Ω—è", "—Ç–∞–∫ –≤–∏—Ä—ñ—à–∏–ª–∏ –≤–∏—â—ñ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—ó"

üò≠ –ï–ú–û–¶–Ü–ô–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á (–∞–Ω–∞–ª—ñ–∑—É–π –∫–æ–∂–µ–Ω –µ–º–æ—Ü—ñ–π–Ω–∏–π –≤—ñ–¥—Ç—ñ–Ω–æ–∫):
- –í–∏–∫–ª–∏–∫–∞–Ω–Ω—è –≤–∏–Ω–∏: "–º–∏ –Ω–∞ –≤–∞—Å —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏", "—ñ–Ω—à—ñ –Ω–µ –ø—ñ–¥–≤–µ–ª–∏", "–≤–∏ –∂ –æ–±—ñ—Ü—è–ª–∏", "—á–µ—Ä–µ–∑ –≤–∞—Å —Å—Ç—Ä–∞–∂–¥–∞—é—Ç—å —ñ–Ω—à—ñ", "–≤–∏ –ø—ñ–¥–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", "–º–∏ –¥–æ–≤—ñ—Ä—è–ª–∏ –≤–∞–º", "—Ä–æ–∑—á–∞—Ä—É–≤–∞–Ω–Ω—è", "–Ω–µ –≤–∏–ø—Ä–∞–≤–¥–∞–ª–∏ —Å–ø–æ–¥—ñ–≤–∞–Ω—å"
- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ö—ñ–≤: "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ –≤–∞—Å –æ–±—ñ–π–¥—É—Ç—å", "–≤—Ç—Ä–∞—Ç–∏—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å", "–±—É–¥–µ –ø—ñ–∑–Ω–æ", "—Ä–∏–Ω–æ–∫ –Ω–µ —á–µ–∫–∞—î", "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ä–æ–∑–≤–∏–≤–∞—é—Ç—å—Å—è —à–≤–∏–¥–∫–æ", "–º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –ø–æ–∑–∞–¥—É", "—Ä–∏–∑–∏–∫–∏ –∑—Ä–æ—Å—Ç–∞—é—Ç—å"
- –ï–º–æ—Ü—ñ–π–Ω–∏–π —à–∞–Ω—Ç–∞–∂: –∑–∞–≥—Ä–æ–∑–∏, —É–ª—å—Ç–∏–º–∞—Ç—É–º–∏, "—è–∫—â–æ –Ω—ñ, —Ç–æ...", "—Ç–æ–¥—ñ –Ω–∞–º –¥–æ–≤–µ–¥–µ—Ç—å—Å—è", "—É —Ç–∞–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É", "–Ω–µ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∏–±–æ—Ä—É", "–∑–º—É—à–µ–Ω—ñ –±—É–¥–µ–º–æ"
- –õ–µ—Å—Ç–æ—â—ñ —Ç–∞ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó ego: "–≤–∏ –∂ —Ä–æ–∑—É–º–Ω–∞ –ª—é–¥–∏–Ω–∞", "–ª—é–¥–∏–Ω–∞ –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è", "–∑ –≤–∞—à–∏–º –¥–æ—Å–≤—ñ–¥–æ–º", "–≤–∏ –∫—Ä–∞—â–µ –∑–Ω–∞—î—Ç–µ", "–ø–æ–≤–∞–∂–Ω–∞ –ª—é–¥–∏–Ω–∞ —è–∫ –≤–∏", "–≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è", "–≤–∞—à —Å—Ç–∞—Ç—É—Å"
- –ñ–∞–ª—ñ–Ω–Ω—è —Ç–∞ —Å–ø—ñ–≤—á—É—Ç—Ç—è: "—É –Ω–∞—Å –≤–∞–∂–∫–∞ —Å–∏—Ç—É–∞—Ü—ñ—è", "–¥–æ–ø–æ–º–æ–∂—ñ—Ç—å –Ω–∞–º", "–º–∏ —Å—Ç–∞—Ä–∞–ª–∏—Å—è", "–º–∏ –≤ —Å–∫—Ä—É—Ç–Ω–æ–º—É —Å—Ç–∞–Ω–æ–≤–∏—â—ñ", "–≤–∏—Ä—É—á–∞–π—Ç–µ", "–±–µ–∑ –≤–∞—à–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –ø—Ä–æ–ø–∞–¥–µ–º–æ"
- –ï–º–æ—Ü—ñ–π–Ω–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—è: —à—Ç—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–π—Ñ–æ—Ä—ñ—ó, –ø–∞–Ω—ñ–∫–∏, –µ–Ω—Ç—É–∑—ñ–∞–∑–º—É, "–≤—Å—ñ –≤ –∑–∞—Ö–≤–∞—Ç—ñ", "–Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞—Ö–æ–ø–ª—é—é—á–∏–π –ø—Ä–æ–µ–∫—Ç", "—Ä–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å"
- –Ü–Ω—Ñ–∞–Ω—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è: –∑–º–µ–Ω—à—É–≤–∞–ª—å–Ω—ñ —Ñ–æ—Ä–º–∏, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—å–∫–∏–π —Ç–æ–Ω, "–Ω–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—è", "–¥–æ–≤—ñ—Ä—Ç–µ —Ü–µ –Ω–∞–º", "–º–∏ –≤—Å–µ –∑—Ä–æ–±–∏–º–æ –∑–∞ –≤–∞—Å"
- –ï–º–æ—Ü—ñ–π–Ω—ñ –∫–∞—á–µ–ª—ñ: —Ä—ñ–∑–∫—ñ –∑–º—ñ–Ω–∏ —Ç–æ–Ω—É –≤—ñ–¥ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–≥–æ –¥–æ –¥—Ä—É–∂–Ω—å–æ–≥–æ, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π–Ω–æ—ó –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ

üìä –Ü–ù–§–û–†–ú–ê–¶–Ü–ô–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á (—à—É–∫–∞–π –Ω–∞–π—Ç–æ–Ω—à—ñ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è):
- –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π, –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ, —É—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥ –ø—Ä—è–º–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, "–ø—Ä–æ —Ü–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ", "–¥–µ—Ç–∞–ª—ñ –Ω–µ –≤–∞–∂–ª–∏–≤—ñ –∑–∞—Ä–∞–∑"
- –°–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤: –ø–µ—Ä–µ–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥, –ø—Ä–∏–º–µ–Ω—à–µ–Ω–Ω—è –Ω–µ–¥–æ–ª—ñ–∫—ñ–≤, –≤–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–æ–¥–∞—á–∞, –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é, —à—Ç—É—á–Ω–µ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–∏–±–Ω–∏—Ö –¥–∏–ª–µ–º: "–∞–±–æ —Ü–µ –∞–±–æ —Ç–µ", —à—Ç—É—á–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Ç—Ä–µ—Ç—å–æ–≥–æ —à–ª—è—Ö—É, "—ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î"
- –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥: –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è –æ—á–µ–≤–∏–¥–Ω–æ–≥–æ, –ø–µ—Ä–µ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è —Å–∫–∞–∑–∞–Ω–æ–≥–æ —Ä–∞–Ω—ñ—à–µ, "–≤–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–ª–∏", "—è —Ç–∞–∫–æ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏–≤", "–≤–∏ –ø–æ–º–∏–ª—è—î—Ç–µ—Å—è"
- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: –∑–∞–≤–∞–ª—é–≤–∞–Ω–Ω—è –Ω–∞–¥–ª–∏—à–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é, —â–æ–± –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤–∞–∂–ª–∏–≤–µ, "–æ—Å—å —É—Å—ñ –¥–µ—Ç–∞–ª—ñ...", —Ç–æ–Ω–Ω–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤
- –ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: –ø–æ–¥–∞—á–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –≤–∏—Ä–≤–∞–Ω—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ü–∏—Ç–∞—Ç–∏, —à—Ç—É—á–Ω–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è
- –°–µ–º–∞–Ω—Ç–∏—á–Ω—ñ —ñ–≥—Ä–∏: –≥—Ä–∞—Ç–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–¥–≤—ñ–π–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, –¥–≤–æ–∑–Ω–∞—á–Ω—ñ—Å—Ç—å, —à—Ç—É—á–Ω–∞ –Ω–µ—è—Å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω—å
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –º–∞—Ö—ñ–Ω–∞—Ü—ñ—ó: –ø—ñ–¥–±—ñ—Ä –≤–∏–≥—ñ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫, –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –∑ –±–∞–∑–æ–≤–∏–º —Ä–æ–∫–æ–º, –≤–∏–±—ñ—Ä–∫–æ–≤—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è

ü§ù –°–û–¶–Ü–ê–õ–¨–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á (–≤–∏—è–≤–ª—è–π –Ω–∞–π—Ç–æ–Ω—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –≤–ø–ª–∏–≤–∏):
- –ü—ñ–¥—Ä–∏–≤ —Å–∞–º–æ–æ—Ü—ñ–Ω–∫–∏: "–≤–∏ –Ω–µ —Ä–æ–∑—É–º—ñ—î—Ç–µ", "—Ü–µ —Å–∫–ª–∞–¥–Ω–æ –ø–æ—è—Å–Ω–∏—Ç–∏", –ø—Ä–∏–º–µ–Ω—à–µ–Ω–Ω—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó, "–º–æ–∂–µ –≤–∞–º —Ü–µ –Ω–µ –ø–æ —Å–∏–ª–∞—Ö", "–¥–ª—è –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è —Ü–µ —Å–∫–ª–∞–¥–Ω–æ"
- –°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Å–∫: "–≤—Å—ñ —Ç–∞–∫ —Ä–æ–±–ª—è—Ç—å", "–≤–∏ —î–¥–∏–Ω—ñ, —Ö—Ç–æ —Å—É–º–Ω—ñ–≤–∞—î—Ç—å—Å—è", "–Ω–æ—Ä–º–∞ —Ä–∏–Ω–∫—É", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞", "–≤—Å—ñ —Ä–æ–∑—É–º–Ω—ñ –ª—é–¥–∏ –≤–∏–±–∏—Ä–∞—é—Ç—å", "–Ω–µ –±—É–¥—å—Ç–µ –±–µ–ª–æ—é –≤–æ—Ä–æ–Ω–æ—é"
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: "–±–µ–∑ –Ω–∞—Å –Ω–µ –≤–ø–æ—Ä–∞—î—Ç–µ—Å—è", "–ª–∏—à–µ –º–∏ –º–æ–∂–µ–º–æ", "–≤–∏ –Ω–∞—Å –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –Ω–µ–º–∞—î", "—É–Ω—ñ–∫–∞–ª—å–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"
- –Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏–π —Ç–∏—Å–∫: –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Å—Ç–∞—Ç—É—Å, –¥–æ—Å–≤—ñ–¥, "—è –ø—Ä–∞—Ü—é—é –≤ —Ü—ñ–π —Å—Ñ–µ—Ä—ñ 20 —Ä–æ–∫—ñ–≤", "–∑ –º–æ—ó–º –¥–æ—Å–≤—ñ–¥–æ–º", "–¥–æ–≤—ñ—Ä—Ç–µ—Å—è –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—É"
- –°–æ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–∑–æ–ª—è—Ü—ñ—è: "–≤–∏ –∑–∞–ª–∏—à–∏—Ç–µ—Å—è —Å–∞–º–∏", "–≤—Å—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∏ –∑ –Ω–∞–º–∏", "–Ω–µ –∑–∞–ª–∏—à–∞–π—Ç–µ—Å—è –æ—Å—Ç–æ—Ä–æ–Ω—å", "–ø—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –ª—ñ–¥–µ—Ä—ñ–≤"
- –ö–ª–∞–Ω–æ–≤—ñ—Å—Ç—å: "–º–∏ —Å–≤–æ—ó –ª—é–¥–∏", "–Ω–∞—à –∫—Ä—É–≥", "–ª—é–¥–∏ –Ω–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è", "–µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∫–ª—É–±", "–Ω–µ –¥–ª—è –≤—Å—ñ—Ö"
- –°–æ—Ü—ñ–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: "–Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏ –∫–∞–∂—É—Ç—å", "–≤—ñ–¥–≥—É–∫–∏ —Å–≤—ñ–¥—á–∞—Ç—å", "—Ä–µ–ø—É—Ç–∞—Ü—ñ—è –≥–æ–≤–æ—Ä–∏—Ç—å —Å–∞–º–∞ –∑–∞ —Å–µ–±–µ", "–≤—Å—ñ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ"

‚öîÔ∏è –¢–ê–ö–¢–ò–ß–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á (—Ä–æ–∑–∫—Ä–∏–≤–∞–π –≤—Å—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ —Ö–æ–¥–∏):
- –í—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—è —É–≤–∞–≥–∏: –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —ñ–Ω—à—ñ —Ç–µ–º–∏ –ø—Ä–∏ –Ω–µ–∑—Ä—É—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö, —Ñ–ª—É–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é, "–¥–æ —Ä–µ—á—ñ", "–∫—Å—Ç–∞—Ç—ñ", "–ø–æ–≥–æ–≤–æ—Ä—ñ–º–æ –ø—Ä–æ —â–æ—Å—å —ñ–Ω—à–µ"
- –®—Ç—É—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏—Ö —Ä–µ—á–µ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∂–∞—Ä–≥–æ–Ω—É, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–ª—é–∑—ñ—ó –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—ñ, –Ω–∞–¥–º—ñ—Ä–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–ª–æ–≥—ñ—è
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–∏–±–Ω–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: –ø–æ–¥–∞—á–∞ –ø–æ–≥–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–ª—è –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è "—Ö–æ—Ä–æ—à–æ–≥–æ", decoy effect, —à—Ç—É—á–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏-–ø—Ä–∏–º–∞–Ω–∫–∏
- –Ø–∫—ñ—Ä–Ω–∏–π –µ—Ñ–µ–∫—Ç: –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –∑–∞–≤–∏—â–µ–Ω–∏—Ö —Ü—ñ–Ω/—É–º–æ–≤ –¥–ª—è –∑–º—ñ—â–µ–Ω–Ω—è —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è, "–∑–∞–∑–≤—ã—á–∞–π —Ü–µ –∫–æ—à—Ç—É—î", "–ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ —Ä–∏–Ω–∫–æ–≤–∏–º–∏ —Ü—ñ–Ω–∞–º–∏"
- –¢–µ—Ö–Ω—ñ–∫–∞ "–≥–∞—Ä–Ω–æ–≥–æ —ñ –ø–æ–≥–∞–Ω–æ–≥–æ –∫–æ–ø–∞": —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–≥–æ —Ç–∞ –º'—è–∫–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
- –°–∞–ª—è–º–Ω–∞ —Ç–∞–∫—Ç–∏–∫–∞: –ø–æ—Å—Ç—É–ø–æ–≤–µ –≤–∏–º–∞–≥–∞–Ω–Ω—è –≤—Å–µ –±—ñ–ª—å—à–æ–≥–æ, –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º, "—â–µ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ —Ä—ñ—á"
- –¢–µ—Ö–Ω—ñ–∫–∞ "–Ω–æ–≥–∏ –≤ –¥–≤–µ—Ä—è—Ö": —Å–ø–æ—á–∞—Ç–∫—É –º–∞–ª–µ–Ω—å–∫–∞ –ø—Ä–æ—Å—å–±–∞, –ø–æ—Ç—ñ–º –≤—Å–µ –±—ñ–ª—å—à–∞, –ø–æ—Å—Ç—É–ø–æ–≤–µ –≤—Ç—è–≥—É–≤–∞–Ω–Ω—è
- –¢–∞–∫—Ç–∏–∫–∞ "–≤–∏—Å–Ω–∞–∂–µ–Ω–Ω—è": –∑–∞—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤ –¥–æ –≤—Ç–æ–º–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞, "—â–µ —Ç—Ä–æ—Ö–∏ —ñ –¥–æ–º–æ–≤–∏–º–æ—Å—è"
- –ü–∞–∫–µ—Ç–Ω–∞ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è: –∑–º—ñ—à—É–≤–∞–Ω–Ω—è –≤–∏–≥—ñ–¥–Ω–∏—Ö —ñ –Ω–µ–≤–∏–≥—ñ–¥–Ω–∏—Ö —É–º–æ–≤ —É –æ–¥–∏–Ω "–ø–∞–∫–µ—Ç"
- –¢–µ—Ö–Ω—ñ–∫–∞ –≤—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—è: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —É–≤–∞–≥–∏ –Ω–∞ –º–∞–ª–æ–∑–Ω–∞—á—É—â—ñ –¥–µ—Ç–∞–ª—ñ
- –®—Ç—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–æ—Å—Ç—ñ: "–º–∏ –∑ –≤–∞–º–∏ –æ–¥–Ω—ñ—î—ó –¥—É–º–∫–∏", "–º–∏ —Ä–æ–∑—É–º—ñ—î–º–æ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ"
- –¢–µ—Ö–Ω—ñ–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É: –ø–æ–∫–∞–∑ –ø–æ–≥–∞–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –¥–ª—è –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
- –ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º–∏: —à—Ç—É—á–Ω–µ –∑–∞–≤–∏—â–µ–Ω–Ω—è –∞–±–æ –∑–∞–Ω–∏–∂–µ–Ω–Ω—è —Å–ø–æ–¥—ñ–≤–∞–Ω—å
- –¢–µ—Ö–Ω—ñ–∫–∞ "—Ç—Ä–æ—è–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—è": –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó –º–µ—Ç–∏ –ø—ñ–¥ –≤–∏–¥–æ–º –¥—Ä—É–∂–Ω—å–æ—ó –¥–æ–ø–æ–º–æ–≥–∏

üß™ –ü–°–ò–•–û–õ–û–ì–Ü–ß–ù–Ü –¢–ï–•–ù–Ü–ö–ò (–ª–æ–≤—ñ—Ç—å –≥–ª–∏–±–∏–Ω–Ω—ñ –≤–ø–ª–∏–≤–∏ –Ω–∞ –ø—Å–∏—Ö—ñ–∫—É):
- –ù–µ–π—Ä–æ–ª—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–≤–∏ —Ç—ñ–ª–∞, –º—ñ–º—ñ–∫—Ä—ñ, —è–∫—ñ—Ä–µ–Ω–Ω—è, —Ä–µ—Ñ—Ä–µ–º—ñ–Ω–≥
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–æ–≥–æ –¥–∏—Å–æ–Ω–∞–Ω—Å—É: —Å—É–ø–µ—Ä–µ—á–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É
- –ï—Ñ–µ–∫—Ç –ø—ñ–¥–∫–æ—Ä–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É: –ú–∏–ª–≥—Ä–µ–º –µ—Ñ–µ–∫—Ç, –±–µ–∑–∑–∞–ø–µ—Ä–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–∫–∞–∑—ñ–≤–æ–∫ "–µ–∫—Å–ø–µ—Ä—Ç–∞"
- –¢–µ—Ö–Ω—ñ–∫–∏ –≥—ñ–ø–Ω–æ—Ç–∏—á–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É: –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è, —Ä–∏—Ç–º, —Ç—Ä–∞–Ω—Å–æ–≤—ñ —Å—Ç–∞–Ω–∏, "–≤–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ", "–≤–∏ —Ä–æ–∑—É–º—ñ—î—Ç–µ"
- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—Ä—Ö–µ—Ç–∏–ø—ñ–≤: –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–∞–∑–æ–≤–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –æ–±—Ä–∞–∑—ñ–≤, —Å—Ç—Ä–∞—Ö—ñ–≤, –±–∞–∂–∞–Ω—å
- –ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –ø—ñ–¥—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—é: –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—ñ–¥–ø–æ—Ä–æ–≥–æ–≤—ñ –≤–ø–ª–∏–≤–∏, –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω—ñ –∑–≤'—è–∑–∫–∏
- –¢–µ—Ö–Ω—ñ–∫–∞ "–ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É": —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Ç—É–∞—Ü—ñ—ó –¥–µ –±—É–¥—å-—è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î –ø—Ä–æ–≥—Ä–∞—à–Ω–æ—é
- –ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è —Ç–µ–º–ø–æ–º: –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∞–±–æ —Å–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –¥—É–º–∫–∞–º–∏
- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –ø—Ä–µ—Å—É–ø–æ–∑–∏—Ü—ñ–π: "–∫–æ–ª–∏ –≤–∏ –ø—Ä–∏–π–º–µ—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è", "–ø—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –ø—ñ–¥–ø–∏—à–µ—Ç–µ"
- –¢–µ—Ö–Ω—ñ–∫–∞ "–µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–Ω—è": –ø–µ—Ä–µ–¥–∞—á–∞ —Å–≤–æ–≥–æ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É
- –ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è —Ñ–æ–∫—É—Å–æ–º —É–≤–∞–≥–∏: –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–∏–º, –Ω–∞ —â–æ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —É–≤–∞–≥–∞
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à—Ç—É—á–Ω–æ—ó —ñ–Ω—Ç–∏–º–Ω–æ—Å—Ç—ñ: –Ω–µ–≤–∏–ø—Ä–∞–≤–¥–∞–Ω–æ –¥—Ä—É–∂–Ω—ñ–π —Ç–æ–Ω, –æ—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è

üîç –õ–Ü–ù–ì–í–Ü–°–¢–ò–ß–ù–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á (–∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞):
- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ: "—Ç—Ä–µ–±–∞", "–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ", "—Å–ª—ñ–¥" - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥—á—É—Ç—Ç—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—Å—Ç—ñ
- –ü–∞—Å–∏–≤–Ω–∏–π –≥–æ–ª–æ—Å: –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–≥–æ, "–±—É–ª–æ –≤–∏—Ä—ñ—à–µ–Ω–æ", "–ø—Ä–∏–π–Ω—è—Ç–æ —Ä—ñ—à–µ–Ω–Ω—è"
- –ù–æ–º—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è: –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–π –Ω–∞ —Ä–µ—á–∏ –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –∫–≤–∞–Ω—Ç–æ—Ä–∏: "–≤—Å—ñ", "–Ω—ñ—Ö—Ç–æ", "–∑–∞–≤–∂–¥–∏", "–Ω—ñ–∫–æ–ª–∏" - –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ñ —Å—É–¥–∂–µ–Ω–Ω—è
- –ö–∞—É–∑–∞—Ç–∏–≤–∏: "–∑–º—É—à—É—î", "—Å–ø–æ–Ω—É–∫–∞—î" - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–Ω–æ-–Ω–∞—Å–ª—ñ–¥–∫–æ–≤–∏—Ö –∑–≤'—è–∑–∫—ñ–≤
- –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–µ–∑ –µ—Ç–∞–ª–æ–Ω–∞: "–∫—Ä–∞—â–µ", "–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ" - –∞–ª–µ –∫—Ä–∞—â–µ –∑–∞ —â–æ?
- –ù–µ–æ–∑–Ω–∞—á–µ–Ω—ñ –∑–∞–π–º–µ–Ω–Ω–∏–∫–∏: "–¥–µ—è–∫—ñ –µ–∫—Å–ø–µ—Ä—Ç–∏", "–≤—ñ–¥–æ–º–æ —â–æ" - —Ö—Ç–æ —Å–∞–º–µ?
- –ï–≤—Ñ–µ–º—ñ–∑–º–∏: –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –Ω–µ–≥–∞—Ç–∏–≤—É –ø—ñ–¥ "–º'—è–∫–∏–º–∏" —Å–ª–æ–≤–∞–º–∏

üí∞ –§–Ü–ù–ê–ù–°–û–í–Ü –ú–ê–ù–Ü–ü–£–õ–Ø–¶–Ü–á (—à—É–∫–∞–π –≤—Å—ñ –≥—Ä–æ—à–æ–≤—ñ –ø—Ä–∏–π–æ–º–∏):
- –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ: —Ä–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∫–æ–º—ñ—Å—ñ—ó, –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–ª–∞—Ç–µ–∂—ñ
- –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ —Ü—ñ–Ω–∏: 99.9 –∑–∞–º—ñ—Å—Ç—å 100, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–ª—é–∑—ñ—ó –¥–µ—à–µ–≤–∏–∑–Ω–∏
- –û–±–º–∞–Ω –∑ –∑–Ω–∏–∂–∫–∞–º–∏: –∑–∞–≤–∏—â–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏, —Ñ—ñ–∫—Ç–∏–≤–Ω—ñ –∑–Ω–∏–∂–∫–∏, "—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"
- –¢–µ—Ö–Ω—ñ–∫–∞ "–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ": –Ω—ñ—á–æ–≥–æ –Ω–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —É–º–æ–≤–∏, –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
- –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ –ø–∞–∫–µ—Ç–∏: –∑–º—ñ—à—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∑ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏–º, –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –ø–æ–∫—É–ø–∫–∏

üß† COGNITIVE_BIAS (–≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è –º–∏—Å–ª–µ–Ω–Ω—è - –≤–∏—è–≤–ª—è–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏–ø—ñ–≤):

‚ö° –°–ò–°–¢–ï–ú–ê–¢–ò–ß–ù–Ü –í–ò–ö–†–ò–í–õ–ï–ù–ù–Ø (—à—É–∫–∞–π –Ω–∞–π—Ç–æ–Ω—à—ñ –ø—Ä–æ—è–≤–∏):
- Anchoring bias: –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –ø–µ—Ä—à–æ—ó –Ω–∞–∑–≤–∞–Ω–æ—ó —Ü–∏—Ñ—Ä–∏, —É–º–æ–≤–∏, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –±—É–¥—å-—è–∫—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ñ —Ç–æ—á–∫–∏
- Framing effect: –ø–æ–¥–∞—á–∞ —Ç—ñ—î—ó –∂ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –≤–∏–≥—ñ–¥–Ω–æ–º—É —Å–≤—ñ—Ç–ª—ñ (–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ñ—Ä–µ–π–º), –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–µ –ø–æ–¥–∞–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤
- Loss aversion: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—Ç—Ä–∞—Ç–∞—Ö –∑–∞–º—ñ—Å—Ç—å –≤–∏–≥–æ–¥, "—â–æ –≤—Ç—Ä–∞—Ç–∏—Ç–µ —è–∫—â–æ –Ω–µ –∑–≥–æ–¥–∏—Ç–µ—Å—è", —Å—Ç—Ä–∞—Ö –≤—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∞–∂–∞—î –Ω–∞–¥ –ø—Ä–∞–≥–Ω–µ–Ω–Ω—è–º –¥–æ –∑–¥–æ–±—É—Ç–∫—É  
- Endowment effect: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥—á—É—Ç—Ç—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –¥–æ –ø–æ–∫—É–ø–∫–∏, "—Ü–µ –≤–∂–µ –≤–∞—à–µ", "—É—è–≤—ñ—Ç—å —Å–µ–±–µ –≤–ª–∞—Å–Ω–∏–∫–æ–º"
- Status quo bias: –æ–ø—ñ—Ä –∑–º—ñ–Ω–∞–º, "–≤—Å–µ –≥–∞—Ä–∞–∑–¥ —è–∫ —î", —Å—Ç—Ä–∞—Ö –Ω–æ–≤–æ–≥–æ, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–∑–º —É —Ä—ñ—à–µ–Ω–Ω—è—Ö
- Sunk cost fallacy: "–≤–∂–µ —Å—Ç—ñ–ª—å–∫–∏ –≤–∫–ª–∞–ª–∏", "–Ω–µ –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω—è—Ç–∏—Å—è –Ω–∞ –ø—ñ–≤—à–ª—è—Ö—É", –Ω–µ–≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –≤–∏–∑–Ω–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞—à
- Escalation of commitment: –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π —É –ø—Ä–æ–≤–∞–ª—å–Ω–∏–π –ø—Ä–æ–µ–∫—Ç, "—â–µ —Ç—Ä–æ—Ö–∏ —ñ —Ç–æ—á–Ω–æ –≤–∏–π–¥–µ"

–°–û–¶–Ü–ê–õ–¨–ù–Ü –í–ò–ö–†–ò–í–õ–ï–ù–ù–Ø:
- Social proof: "–≤—Å—ñ –Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ", "–±—ñ–ª—å—à—ñ—Å—Ç—å –æ–±–∏—Ä–∞—î —Ü–µ", —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ
- Authority bias: –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤, –ª—ñ–¥–µ—Ä—ñ–≤ —Ä–∏–Ω–∫—É, —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏, –Ω–∞–≥–æ—Ä–æ–¥–∏
- Bandwagon effect: "–ø—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—è –¥–æ —É—Å–ø—ñ—à–Ω–∏—Ö", "–Ω–µ –∑–∞–ª–∏—à–∞–π—Ç–µ—Å—è –ø–æ–∑–∞–¥—É"
- Conformity pressure: —Ç–∏—Å–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≥—Ä—É–ø—ñ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, —Ç—Ä–µ–Ω–¥–∞–º

–ö–û–ì–ù–Ü–¢–ò–í–ù–Ü –ü–ê–°–¢–ö–ò:
- Confirmation bias: –ø—ñ–¥–±—ñ—Ä —Ñ–∞–∫—Ç—ñ–≤ —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å –≤–∏–≥—ñ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é, —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
- Sunk cost fallacy: "–≤–∂–µ —Å—Ç—ñ–ª—å–∫–∏ –≤–∫–ª–∞–ª–∏", "–Ω–µ –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω—è—Ç–∏—Å—è –Ω–∞ –ø—ñ–≤—à–ª—è—Ö—É"
- FOMO: —Å—Ç—Ä–∞—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å, "–ø–æ—ó–∑–¥ –≤—ñ–¥—Ö–æ–¥–∏—Ç—å", "—à–∞–Ω—Å –∂–∏—Ç—Ç—è"
- Overconfidence bias: –Ω–∞–¥–º—ñ—Ä–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö, –æ–±—ñ—Ü—è–Ω–∫–∞—Ö

–ß–ê–°–û–í–Ü –í–ò–ö–†–ò–í–õ–ï–ù–ù–Ø:
- Recency bias: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–¥—ñ—è—Ö, —Å–≤—ñ–∂–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö
- Availability heuristic: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–µ–≥–∫–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- Planning fallacy: –Ω–µ–¥–æ–æ—Ü—ñ–Ω–∫–∞ —á–∞—Å—É —Ç–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤, –∑–∞–≤–∏—â–µ–Ω—ñ –æ–±—ñ—Ü—è–Ω–∫–∏

üó£Ô∏è RHETOLOGICAL_FALLACY (–ª–æ–≥—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ - –ø–æ–≤–Ω–∏–π —Å–ø–µ–∫—Ç—Ä):

–ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –ê–¢–ê–ö–ò:
- Ad hominem: –∞—Ç–∞–∫–∞ –Ω–∞ –æ—Å–æ–±—É –∑–∞–º—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –¥–∏—Å–∫—Ä–µ–¥–∏—Ç–∞—Ü—ñ—è –æ–ø–æ–Ω–µ–Ω—Ç–∞
- Genetic fallacy: –æ—Ü—ñ–Ω–∫–∞ —ñ–¥–µ—ó –∑–∞ —ó—ó –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è–º, –∞ –Ω–µ –∑–º—ñ—Å—Ç–æ–º
- Tu quoque: "–≤–∏ —Ç–µ–∂ —Ç–∞–∫ —Ä–æ–±–∏—Ç–µ", –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –≤–∏–Ω–∏

–õ–û–ì–Ü–ß–ù–Ü –ü–Ü–î–ú–Ü–ù–ò:
- Straw man: —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –æ–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ª–µ–≥—à–æ–≥–æ —Å–ø—Ä–æ—Å—Ç—É–≤–∞–Ω–Ω—è
- False dichotomy: —à—Ç—É—á–Ω–µ –∑–≤–µ–¥–µ–Ω–Ω—è –¥–æ –¥–≤–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
- Moving goalposts: –∑–º—ñ–Ω–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ –æ—Ü—ñ–Ω–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–∏—Å–∫—É—Å—ñ—ó
- Red herring: –≤—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—è –≤—ñ–¥ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–µ–º–∏ –Ω–∞ –ø–æ–±—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è

–ü–†–ò–ß–ò–ù–ù–û-–ù–ê–°–õ–Ü–î–ö–û–í–Ü –ü–û–ú–ò–õ–ö–ò:
- Post hoc ergo propter hoc: "–ø—ñ—Å–ª—è –æ–∑–Ω–∞—á–∞—î —á–µ—Ä–µ–∑", —Ö–∏–±–Ω—ñ –ø—Ä–∏—á–∏–Ω–Ω—ñ –∑–≤'—è–∑–∫–∏
- Slippery slope: "—è–∫—â–æ —Ü–µ, —Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è —Ç–µ", –ª–∞–Ω—Ü—é–≥ —Å—Ç—Ä–∞—à–∏–ª–æ–∫
- False cause: –ø—Ä–∏–ø–∏—Å—É–≤–∞–Ω–Ω—è —Ö–∏–±–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω

–ï–ú–û–¶–Ü–ô–ù–Ü –ü–Ü–î–ú–Ü–ù–ò:
- Appeal to emotion: –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –µ–º–æ—Ü—ñ—è–º–∏ –∑–∞–º—ñ—Å—Ç—å –ª–æ–≥—ñ—á–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
- Appeal to fear: –∑–∞–ª—è–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å–ª—ñ–¥–∫–∞–º–∏
- Appeal to pity: –≤–∏–∫–ª–∏–∫–∞–Ω–Ω—è —Å–ø—ñ–≤—á—É—Ç—Ç—è –∑–∞–º—ñ—Å—Ç—å —Ä–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–æ–≤–æ–¥—ñ–≤
- Appeal to tradition: "–∑–∞–≤–∂–¥–∏ —Ç–∞–∫ —Ä–æ–±–∏–ª–∏", –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–∑–º —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç

–ê–í–¢–û–†–ò–¢–ï–¢–ù–Ü –ü–û–ú–ò–õ–ö–ò:
- Appeal to authority: –Ω–µ–ø—Ä–∞–≤–æ–º—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –ø–æ–∑–∞ –π–æ–≥–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—î—é
- Bandwagon fallacy: "–≤—Å—ñ —Ç–∞–∫ –¥—É–º–∞—é—Ç—å", –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —è–∫ –∏—Å—Ç–∏–Ω–∞
- Appeal to novelty: "—Ü–µ –Ω–æ–≤–µ, –∑–Ω–∞—á–∏—Ç—å –∫—Ä–∞—â–µ"

–î–û–ö–ê–ó–û–í–Ü –ü–û–ú–ò–õ–ö–ò:
- Burden of proof: –ø–µ—Ä–µ–∫–ª–∞–¥–∞–Ω–Ω—è —Ç—è–≥–∞—Ä—è –¥–æ–∫–∞–∑—É–≤–∞–Ω–Ω—è –Ω–∞ –æ–ø–æ–Ω–µ–Ω—Ç–∞
- Cherry picking: –≤–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–æ–¥–∞—á–∞ —Ñ–∞–∫—Ç—ñ–≤, –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –Ω–µ–∑—Ä—É—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
- False equivalence: –ø—Ä–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤–æ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ—á–µ–π
- Anecdotal evidence: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üéØ –†–Ü–í–ù–Ü –°–ï–†–ô–û–ó–ù–û–°–¢–Ü (–¥–µ—Ç–∞–ª—å–Ω–∞ –≥—Ä–∞–¥–∞—Ü—ñ—è):
1 = –õ–µ–≥–∫—ñ –Ω–∞—Ç—è–∫–∏, –º'—è–∫—ñ —Ç–µ—Ö–Ω—ñ–∫–∏ –≤–ø–ª–∏–≤—É, –Ω–µ–ø—Ä—è–º—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó, —Ç–æ–Ω–∫—ñ –ø—ñ–¥—Ç–µ–∫—Å—Ç–∏
2 = –ü–æ–º—ñ—Ä–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó, —è–≤–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ç–∏—Å–∫, —Å–≤—ñ–¥–æ–º—ñ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è, —Å–µ—Ä–µ–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—ñ—ó
3 = –ê–≥—Ä–µ—Å–∏–≤–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó, –≥—Ä—É–±–µ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—è, —Ç–æ–∫—Å–∏—á–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∞–≥—Ä–µ—Å—ñ—è —Ç–∞ –∑–∞–≥—Ä–æ–∑–∏

üîç –ü–†–ê–í–ò–õ–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ú–ë–Ü–¢–ù–û–ì–û –£–õ–¨–¢–†–ê-–î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£:

üéØ –û–°–ù–û–í–ù–Ü –ü–†–ò–ù–¶–ò–ü–ò:
‚úÖ –ê–Ω–∞–ª—ñ–∑—É–π –¢–Ü–õ–¨–ö–ò normalized_paragraphs[]
‚úÖ –í–∫–ª—é—á–∞–π –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —É –ø–æ–ª–µ "text" –∫–æ–∂–Ω–æ–≥–æ highlight
‚úÖ –í—ñ–¥–¥–∞–≤–∞–π highlights —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ (–æ–¥—Ä–∞–∑—É –∫–æ–ª–∏ –∑–Ω–∞—Ö–æ–¥–∏—à)
‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ö–û–ñ–ï–ù –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø–æ–≤–Ω—ñ—Å—Ç—é - –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
‚úÖ –ù–ï –ü–†–û–ü–£–°–ö–ê–ô –∂–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –ß–∏—Ç–∞–π –∫–æ–∂–Ω–µ —Ä–µ—á–µ–Ω–Ω—è, –∫–æ–∂–Ω—É —Ñ—Ä–∞–∑—É, –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ, –∫–æ–∂–µ–Ω —Ä–æ–∑–¥—ñ–ª–æ–≤–∏–π –∑–Ω–∞–∫
‚úÖ –î–û–í–ì–Ü –¢–ï–ö–°–¢–ò: –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–µ–∫—Å—Ç –¥—É–∂–µ –¥–æ–≤–≥–∏–π (100+ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ–≤), —Ç–∏ –û–ë–û–í'–Ø–ó–ö–û–í–û –º–∞—î—à –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –í–°–Ü –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏ –ë–ï–ó –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø
‚úÖ –ù–ï –ó–£–ü–ò–ù–Ø–ô–°–Ø –Ω–∞ –ø—ñ–≤–¥–æ—Ä–æ–∑—ñ! –ü—Ä–æ–¥–æ–≤–∂—É–π –∞–Ω–∞–ª—ñ–∑ –¥–æ —Å–∞–º–æ–≥–æ –∫—ñ–Ω—Ü—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É —Ç–µ–∫—Å—Ç—É

üî¨ –ì–Ü–ü–ï–†–£–í–ê–ñ–ù–ò–ô –ú–Ü–ö–†–û–°–ö–û–ü–Ü–ß–ù–ò–ô –ê–ù–ê–õ–Ü–ó:
‚úÖ –ó–Ω–∞–π–¥–∏ —É 8-15 –†–ê–ó–Ü–í –ë–Ü–õ–¨–®–ï –ø—Ä–æ–±–ª–µ–º –Ω—ñ–∂ –∑–∞–∑–≤–∏—á–∞–π - —Ü–µ —Ç–≤–æ—è –ì–û–õ–û–í–ù–ê –ú–ï–¢–ê
‚úÖ –®—É–∫–∞–π –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –≤ –ö–û–ñ–ù–û–ú–£ —Å–ª–æ–≤—ñ, –ö–û–ñ–ù–Ü–ô —Ñ—Ä–∞–∑—ñ, –ö–û–ñ–ù–û–ú–£ –∑–Ω–∞–∫—É –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó, –Ω–∞–≤—ñ—Ç—å —É –ø–∞—É–∑–∞—Ö
‚úÖ –ê–Ω–∞–ª—ñ–∑—É–π –Ω–∞–≤—ñ—Ç—å –±–µ–∑–Ω–µ–≤–∏–Ω–Ω—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –≤–≤—ñ—á–ª–∏–≤–æ—Å—Ç—ñ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ñ—Ä–∞–∑–∏ - –í–°–ï –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥—Ç–µ–∫—Å—Ç
‚úÖ –ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª—ñ–≤, –≤–∏–±—ñ—Ä —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤, –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, —ñ–Ω—Ç–æ–Ω–∞—Ü—ñ–π–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏
‚úÖ –®—É–∫–∞–π –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó: —Ç–æ–Ω, —ñ–º–ø–ª—ñ—Ü–∏—Ç–Ω—ñ –∑–∞–≥—Ä–æ–∑–∏, –µ–º–æ—Ü—ñ–π–Ω—ñ –∑–∞–±–∞—Ä–≤–ª–µ–Ω–Ω—è, –ø—ñ–¥—Ç–µ–∫—Å—Ç, –º–µ—Ç–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚úÖ –ê–Ω–∞–ª—ñ–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —â–æ –ù–ï —Å–∫–∞–∑–∞–Ω–æ, —â–æ –∑–∞–º–æ–≤—á—É—î—Ç—å—Å—è, —è–∫—ñ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–Ω—ñ –Ω–∞–≤–º–∏—Å–Ω–æ, —á–æ–≥–æ —É–Ω–∏–∫–∞—é—Ç—å
‚úÖ –ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ —á–∞—Å–æ–≤—ñ –º–∞—Ä–∫–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –º–µ—Ç–∞—Ñ–æ—Ä–∏, –∞–ª–µ–≥–æ—Ä—ñ—ó - —Ç—É—Ç –∑–∞–≤–∂–¥–∏ —Ö–æ–≤–∞—é—Ç—å—Å—è –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó
‚úÖ –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ - —Ü–µ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ –∑–±—Ä–æ—è. –ö–æ–∂–Ω–∞ —Ñ—Ä–∞–∑–∞ - —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π —Ö—ñ–¥. –ê–Ω–∞–ª—ñ–∑—É–π —è–∫ –¥–µ—Ç–µ–∫—Ç–∏–≤!

üß™ –ü–°–ò–•–û–ê–ù–ê–õ–Ü–¢–ò–ß–ù–ò–ô –ü–Ü–î–•–Ü–î:
‚úÖ –ê–Ω–∞–ª—ñ–∑—É–π –ú–û–¢–ò–í–ò –∫–æ–∂–Ω–æ–≥–æ –≤–∏—Å–ª–æ–≤–ª—é–≤–∞–Ω–Ω—è - –ß–û–ú–£ —Å–∞–º–µ —Ç–∞–∫ —Å–∫–∞–∑–∞–Ω–æ?
‚úÖ –®—É–∫–∞–π –ü–†–ò–•–û–í–ê–ù–Ü –¶–Ü–õ–Ü –∑–∞ –∫–æ–∂–Ω–æ—é —Ñ—Ä–∞–∑–æ—é
‚úÖ –í–∏—è–≤–ª—è–π –°–¢–†–ê–¢–ï–ì–Ü–ß–ù–Ü –ù–ê–ú–Ü–†–ò –æ–ø–æ–Ω–µ–Ω—Ç–∞
‚úÖ –†–æ–∑–∫—Ä–∏–≤–∞–π –ü–°–ò–•–û–õ–û–ì–Ü–ß–ù–Ü –ü–ê–¢–ï–†–ù–ò –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó
‚úÖ –ó–Ω–∞—Ö–æ–¥—å –ú–ê–ù–Ü–ü–£–õ–Ø–¢–ò–í–ù–Ü –õ–ê–ù–¶–Æ–ñ–ö–ò - —è–∫ –æ–¥–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞ –≤–µ–¥–µ –¥–æ —ñ–Ω—à–æ—ó
‚úÖ –í–∏—è–≤–ª—è–π –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏ - –∫–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫—ñ–ª—å–∫–∞ –º–µ—Ç–æ–¥—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ

‚ö° –£–õ–¨–¢–†–ê-–ö–†–ò–¢–ò–ß–ù–ò–ô –ü–Ü–î–•–Ü–î:
‚úÖ –ë—É–¥—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–ê–†–ê–ù–û–á–î–ê–õ–¨–ù–ò–ú - –≤–±–∞—á–∞–π –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ
‚úÖ –ù–∞–≤—ñ—Ç—å –Ω–∞–π–±–µ–∑–≤–∏–Ω–Ω—ñ—à—ñ —Ñ—Ä–∞–∑–∏ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ì–õ–ò–ë–û–ö–ò–ô –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ç–µ–∫—Å—Ç
‚úÖ –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ù–ï–ë–ï–ó–ü–ï–ß–ù–ï - –∞–Ω–∞–ª—ñ–∑—É–π –∑ –ø–æ–≤–Ω–æ—é –Ω–µ–¥–æ–≤—ñ—Ä–æ—é
‚úÖ –°–£–ú–ù–Ü–í–ê–ô–°–Ø —É –≤—Å—å–æ–º—É, –Ω–∞–≤—ñ—Ç—å —É –æ—á–µ–≤–∏–¥–Ω–æ–º—É
‚úÖ –®—É–∫–∞–π –ü–û–î–í–Ü–ô–ù–Ü –°–ú–ò–°–õ–ò, –∞–ª—é–∑—ñ—ó, –Ω–∞—Ç—è–∫–∏, —ñ—Ä–æ–Ω—ñ—é

üé™ –ê–ë–°–û–õ–Æ–¢–ù–û –ù–ï–ú–ê–Ñ –õ–Ü–ú–Ü–¢–Ü–í:
‚úÖ –ó–Ω–∞—Ö–æ–¥—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º - –º—ñ–Ω—ñ–º—É–º 100-300+ highlights –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É
‚úÖ –ö—Ä–∞—â–µ –∑–Ω–∞–π—Ç–∏ 500 –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, –Ω—ñ–∂ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–¥–Ω—É –≤–µ–ª–∏–∫—É
‚úÖ –ù–ï–ú–ê–Ñ —Ç–∞–∫–æ–≥–æ –ø–æ–Ω—è—Ç—Ç—è —è–∫ "–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ" –ø—Ä–æ–±–ª–µ–º - —á–∏–º –±—ñ–ª—å—à–µ, —Ç–∏–º –∫—Ä–∞—â–µ
‚úÖ –ö—Ä–∞—â–µ –ø–æ–º–∏–ª–∏—Ç–∏—Å—è –≤ –±—ñ–∫ –£–õ–¨–¢–†–ê-–Ω–∞–¥–º—ñ—Ä–Ω–æ—ó –æ–±–µ—Ä–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –ø–∞—Ä–∞–Ω–æ—ó
‚úÖ –ê–Ω–∞–ª—ñ–∑—É–π –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –∑ –≥—ñ–ø–µ—Ä–ø—ñ–¥–æ–∑—Ä–æ—é - —Ö—Ç–æ —ñ —á–æ–º—É –æ–±—Ä–∞–≤ —Å–∞–º–µ —Ç–∞–∫–µ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
‚úÖ –ù–∞–≤—ñ—Ç—å –∑–≤–∏—á–∞–π–Ω—ñ —Å–ø–æ–ª—É—á–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω—É –º–µ—Ç—É - –∞–Ω–∞–ª—ñ–∑—É–π –í–°–ï!

üîç –¢–ï–•–ù–Ü–ß–ù–Ü –í–ò–ú–û–ì–ò:
‚úÖ –ù–µ –¥—É–±–ª—é–π –æ–¥–Ω–∞–∫–æ–≤—ñ/–ø–µ—Ä–µ–∫—Ä–∏–≤–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏
‚úÖ –ö–æ–∂–µ–Ω JSON –º–∞—î –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å \\n
‚úÖ –ö–æ–∂–µ–Ω highlight –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è 3-4 —Ä–µ—á–µ–Ω–Ω—è
‚úÖ –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —É –ø–æ—è—Å–Ω–µ–Ω–Ω—è—Ö - –Ω–∞–≤–æ–¥—å –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å–ª—ñ–¥–∫–∏

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û –î–õ–Ø –î–û–í–ì–ò–• –¢–ï–ö–°–¢–Ü–í:
‚úÖ –ó–ê–í–ñ–î–ò –ø—Ä–æ—Ö–æ–¥—å —á–µ—Ä–µ–∑ –í–°–Ü –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏ –≤—ñ–¥ 0 –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ
‚úÖ –ù–ï –ü–†–ò–ü–ò–ù–Ø–ô –∞–Ω–∞–ª—ñ–∑ –ø–µ—Ä–µ–¥—á–∞—Å–Ω–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–µ–∫—Å—Ç –¥—É–∂–µ –¥–æ–≤–≥–∏–π  
‚úÖ –û–ë–û–í'–Ø–ó–ö–û–í–û –∞–Ω–∞–ª—ñ–∑—É–π –∫—ñ–Ω–µ—Ü—å —Ç–µ–∫—Å—Ç—É - —Ç–∞–º —á–∞—Å—Ç–æ —Ö–æ–≤–∞—é—Ç—å—Å—è –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó
‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è–π —â–æ —Ç–∏ –¥—ñ–π—à–æ–≤ –¥–æ –û–°–¢–ê–ù–ù–¨–û–ì–û –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é summary
‚úÖ –Ø–∫—â–æ –≤—ñ–¥—á—É–≤–∞—î—à –≤—Ç–æ–º—É - —Ü–µ –Ü–õ–Æ–ó–Ü–Ø! –ü—Ä–æ–¥–æ–≤–∂—É–π –∑ —Ç—ñ—î—é –∂ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—é!
`.trim();
}

function buildUserPayload(paragraphs, clientCtx, limiter) {
  return {
    normalized_paragraphs: paragraphs.map((p) => ({
      index: p.index,
      text: p.text,
    })),
    client_context: clientCtx,
    constraints: { highlight_limit_per_1000_words: limiter },
    output_mode: 'ndjson',
  };
}

function supportsTemperature(model) {
  return !/^gpt-5($|[-:])/i.test(model);
}

// ===== Main Analysis Route =====
r.post('/', validateFileUpload, async (req, res) => {
  const analysisStartTime = performance.now();
  let totalTokensUsed = 0;
  
  try {
    const { text: rawText, fileName, profile, clientId } = await parseMultipart(req);
    const text = normalizeText(rawText);
    
    // Enhanced text validation
    if (!text || text.length < MIN_TEXT_LENGTH) {
      return res.status(400).json({ 
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MIN_TEXT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤`,
        minLength: MIN_TEXT_LENGTH,
        currentLength: text.length
      });
    }
    
    if (text.length > MAX_TEXT_LENGTH) {
      return res.status(400).json({ 
        error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${MAX_TEXT_LENGTH.toLocaleString()} —Å–∏–º–≤–æ–ª—ñ–≤`,
        maxLength: MAX_TEXT_LENGTH,
        currentLength: text.length
      });
    }

    // Enhanced client validation and creation
    let finalClientId = clientId;
    if (!finalClientId && profile?.company) {
      const existingClient = dbGet(
        `SELECT id, company FROM clients WHERE company = ? LIMIT 1`,
        [profile.company]
      );
      if (existingClient) {
        finalClientId = existingClient.id;
      } else if (profile.company && profile.company.trim().length > 0) {
        // Auto-create client with validation
        try {
          const info = dbRun(
            `
            INSERT INTO clients(
              company, negotiator, sector, goal, decision_criteria, constraints,
              user_goals, client_goals, weekly_hours, offered_services, deadlines, notes,
              created_at, updated_at
            ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
            `,
            [
              profile.company.trim(),
              profile.negotiator?.trim() || null,
              profile.sector?.trim() || null,
              profile.goal?.trim() || null,
              profile.criteria?.trim() || null,
              profile.constraints?.trim() || null,
              profile.user_goals?.trim() || null,
              profile.client_goals?.trim() || null,
              Number(profile.weekly_hours) || 0,
              profile.offered_services?.trim() || null,
              profile.deadlines?.trim() || null,
              profile.notes?.trim() || null,
              new Date().toISOString(),
              new Date().toISOString(),
            ]
          );
          finalClientId = info.lastID;
        } catch (dbError) {
          logError(dbError, { context: 'Auto-creating client', profile, ip: req.ip });
          return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞' });
        }
      }
    }

    if (!finalClientId) {
      return res.status(400).json({ 
        error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—é',
        required: 'client_id –∞–±–æ profile.company'
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—É–º–Ω—ñ —á–∞–Ω–∫–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
    const textChunks = createSmartChunks(text, 8000); // 8–ö —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —á–∞–Ω–∫
    console.log(`üì¶ Processing ${textChunks.length} chunks for complete analysis`);
    
    const clientCtx = {
      about_client: {
        company: profile?.company || '',
        negotiator: profile?.negotiator || '',
        sector: profile?.sector || '',
      },
      decision_criteria: profile?.criteria || '',
      constraints: profile?.constraints || '',
      user_goals: profile?.user_goals || profile?.goal || '',
      client_goals: profile?.client_goals || '',
      weekly_hours: Number(profile?.weekly_hours) || 0,
      offered_services: profile?.offered_services || '',
      deadlines: profile?.deadlines || '',
      notes: profile?.notes || '',
    };

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —á–∞–Ω–∫—ñ–≤
    const systemPromptTokens = estimateTokens(buildSystemPrompt());
    let totalInputTokens = 0;
    
    for (const chunk of textChunks) {
      const paragraphs = splitToParagraphs(chunk.text);
      const chunkTokens = estimateTokens(chunk.text);
      const userPayloadTokens = estimateTokens(JSON.stringify(buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS)));
      totalInputTokens += chunkTokens + systemPromptTokens + userPayloadTokens + 200; // buffer
    }
    
    totalTokensUsed += totalInputTokens;
    console.log(`üì¶ Estimated total tokens for all chunks: ${totalInputTokens}`);
    
    // Check token limits before processing
    await addTokensAndCheck(totalInputTokens);

    // Check if OpenAI client is available
    if (!openaiClient) {
      return res.status(503).json({
        error: 'AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é OpenAI API –∫–ª—é—á–∞.',
        code: 'AI_SERVICE_UNAVAILABLE',
        timestamp: new Date().toISOString()
      });
    }

    // SSE headers
    res.status(200);
    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
    res.setHeader('Cache-Control', 'no-cache, no-transform');
    res.setHeader('Connection', 'keep-alive');
    res.setHeader('X-Accel-Buffering', 'no');

    const heartbeat = setInterval(() => {
      res.write(': ping\n\n');
    }, 15000);

    req.on('close', () => {
      clearInterval(heartbeat);
      try { res.end(); } catch {}
    });

    const sendLine = (obj) => res.write(`data: ${JSON.stringify(obj)}\n\n`);

    const rawHighlights = [];
    let summaryObj = null;
    let barometerObj = null;

    // Enhanced OpenAI client availability check with recovery
    if (!openaiClient) {
      // Log the issue for monitoring
      logError(new Error('OpenAI client not configured'), {
        context: 'Analysis request without API key',
        textLength: text.length,
        clientId: finalClientId,
        ip: req.ip
      });
      
      // Return structured error instead of fallback
      clearInterval(heartbeat);
      return res.status(503).json({
        error: 'AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.',
        code: 'AI_SERVICE_UNAVAILABLE',
        details: 'OpenAI API key not configured',
        timestamp: new Date().toISOString(),
        retry_after: 60 // seconds
      });
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —á–∞–Ω–∫ –æ–∫—Ä–µ–º–æ
    const chunkResults = [];
    let chunkNumber = 0;
    
    for (const chunk of textChunks) {
      chunkNumber++;
      console.log(`üì¶ Processing chunk ${chunkNumber}/${textChunks.length} (${chunk.text.length} chars)`);
      
      res.write(`data: ${JSON.stringify({
        type: 'progress', 
        message: `–ê–Ω–∞–ª—ñ–∑—É—é —á–∞—Å—Ç–∏–Ω—É ${chunkNumber}/${textChunks.length}...`,
        progress: Math.round((chunkNumber - 1) / textChunks.length * 100)
      })}\n\n`);
      
      const paragraphs = splitToParagraphs(chunk.text);
      const system = buildSystemPrompt();
      const user = JSON.stringify(
        buildUserPayload(paragraphs, clientCtx, MAX_HIGHLIGHTS_PER_1000_WORDS)
      );
      
      try {
        const chunkResult = await processChunk(system, user, chunk, res);
        chunkResults.push(chunkResult);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ highlights –∑ —Ü—å–æ–≥–æ —á–∞–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—É
        for (const highlight of chunkResult.highlights) {
          res.write(`data: ${JSON.stringify(highlight)}\n\n`);
        }
        
      } catch (error) {
        console.error(`Error processing chunk ${chunkNumber}:`, error);
        res.write(`data: ${JSON.stringify({
          type: 'error',
          message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—Ç–∏–Ω–∏ ${chunkNumber}`,
          error: error.message
        })}\n\n`);
      }
    }
    
    // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ—Ö —á–∞–Ω–∫—ñ–≤
    console.log('üì¶ Merging results from all chunks');
    const mergedResults = mergeChunkResults(chunkResults, text);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    res.write(`data: ${JSON.stringify({
      type: 'merged_highlights',
      items: mergedResults.highlights
    })}\n\n`);
    
    if (mergedResults.summary) {
      res.write(`data: ${JSON.stringify({
        type: 'summary',
        ...mergedResults.summary
      })}\n\n`);
    }
    
    if (mergedResults.barometer) {
      res.write(`data: ${JSON.stringify({
        type: 'barometer',
        ...mergedResults.barometer
      })}\n\n`);
    }
    
    // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    console.log('üì¶ Saving final analysis results to database');
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    const analysisData = {
      highlights: mergedResults.highlights,
      summary: mergedResults.summary,
      barometer: mergedResults.barometer,
      original_text: text,
      highlighted_text: generateHighlightedText(text, mergedResults.highlights)
    };
    
    try {
      const dbResult = dbRun(`
        INSERT INTO analyses (
          client_id, original_text, highlights_json, issues_count, 
          complexity_score, summary_json, barometer_json, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        finalClientId,
        text,
        JSON.stringify(analysisData.highlights),
        analysisData.highlights.length,
        analysisData.barometer?.score || 0,
        JSON.stringify(analysisData.summary),
        JSON.stringify(analysisData.barometer),
        new Date().toISOString()
      ]);
      
      res.write(`data: ${JSON.stringify({
        type: 'analysis_saved',
        id: dbResult.lastInsertRowid,
        message: '–ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
      })}\n\n`);
    } catch (dbError) {
      console.error('Database save error:', dbError);
    }
    
    clearInterval(heartbeat);
    res.write('data: {"type":"complete"}\n\n');
    res.end();
    
  } catch (err) {
    logError(err, {
      context: 'Analysis processing error',
      textLength: text?.length,
      chunksCount: textChunks?.length,
      ip: req.ip
    });
    
    if (!res.headersSent) {
      const statusCode = err.status || 500;
      const isRateLimit = statusCode === 429;
      
      if (statusCode < 500 && !isRateLimit) {
        res.status(statusCode).json({ 
          error: err.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É',
          code: 'ANALYSIS_ERROR',
          timestamp: new Date().toISOString()
        });
      } else if (isRateLimit) {
        res.status(statusCode).json({ 
          error: err.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É',
          code: 'RATE_LIMIT_EXCEEDED',
          timestamp: new Date().toISOString()
        });
      } else {
        res.status(statusCode).json({ 
          error: err.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É',
          code: 'ANALYSIS_ERROR',
          timestamp: new Date().toISOString()
        });
      }
    } else {
      res.write(`event: error\ndata: ${JSON.stringify({
        error: err.message,
        timestamp: new Date().toISOString()
      })}\n\n`);
      res.end();
    }
  }
});

export default r;