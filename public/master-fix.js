/**
 * –ú–ê–°–¢–ï–† –§–Ü–• - –û—Å—Ç–∞—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–±–ª–µ–º
 * –ì–ª–∏–±–æ–∫–æ –ø—Ä–æ–¥—É–º–∞–Ω–∏–π –∫–æ–¥ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö –≤–∏–º–æ–≥
 */

console.log('üéØ –ú–ê–°–¢–ï–† –§–Ü–• - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...');

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫–∞
window.MASTER_STATE = {
    initialized: false,
    currentClient: null,
    isAnalyzing: false,
    clients: [],
    authStatus: false
};

// –ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º –¥–æ–¥–∞—Ç–∫–æ–º
class MasterAppController {
    constructor() {
        this.initPromise = null;
        this.eventListeners = new Map();
        this.domObserver = null;
        this.retryCount = 0;
        this.maxRetries = 3;
        
        console.log('üéØ MasterAppController —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        this.safeInit();
    }
    
    // –ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
    async safeInit() {
        try {
            if (this.initPromise) return this.initPromise;
            
            this.initPromise = this.performInit();
            await this.initPromise;
            
        } catch (error) {
            console.error('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è:', error);
            
            if (this.retryCount < this.maxRetries) {
                this.retryCount++;
                console.log(`üéØ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ ${this.retryCount}/${this.maxRetries}`);
                
                setTimeout(() => {
                    this.initPromise = null;
                    this.safeInit();
                }, 2000 * this.retryCount);
            } else {
                this.showCriticalError('–ù–µ–º–æ–∂–ª–∏–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫');
            }
        }
    }
    
    async performInit() {
        console.log('üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');
        
        // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
        await this.waitForDOM();
        
        // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        await this.waitForDependencies();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        await this.initializeComponents();
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ event listeners
        this.setupEventListeners();
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞ DOM
        this.setupDOMObserver();
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        await this.loadInitialData();
        
        window.MASTER_STATE.initialized = true;
        console.log('üéØ –ú–∞—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!');
    }
    
    waitForDOM() {
        return new Promise((resolve) => {
            if (document.readyState === 'complete' || document.readyState === 'interactive') {
                resolve();
            } else {
                document.addEventListener('DOMContentLoaded', resolve, { once: true });
            }
        });
    }
    
    waitForDependencies() {
        return new Promise((resolve) => {
            const checkDependencies = () => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏
                const requiredElements = [
                    '#logout-btn',
                    '#help-toggle', 
                    '#start-analysis-btn',
                    '#analysis-text',
                    '#client-select'
                ];
                
                const allPresent = requiredElements.every(selector => 
                    document.querySelector(selector) !== null
                );
                
                if (allPresent) {
                    resolve();
                } else {
                    setTimeout(checkDependencies, 100);
                }
            };
            
            checkDependencies();
        });
    }
    
    async initializeComponents() {
        console.log('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...');
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
        this.initializeButtons();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º
        this.initializeForms();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
        this.initializeModals();
        
        console.log('üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ');
    }
    
    initializeButtons() {
        const buttons = [
            {
                selector: '#logout-btn',
                handler: () => this.handleLogout(),
                description: '–ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É'
            },
            {
                selector: '#help-toggle',
                handler: () => this.handleHelp(),
                description: '–ö–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–º–æ–≥–∏'
            },
            {
                selector: '#start-analysis-btn',
                handler: () => this.handleStartAnalysis(),
                description: '–ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª—ñ–∑—É'
            },
            {
                selector: '#new-client-btn, .new-client-btn, #welcome-new-client',
                handler: () => this.handleNewClient(),
                description: '–ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞'
            },
            {
                selector: '#save-client-btn',
                handler: () => this.handleSaveClient(),
                description: '–ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞'
            },
            {
                selector: '#cancel-client-btn',
                handler: () => this.handleCancelClient(),
                description: '–ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è'
            }
        ];
        
        buttons.forEach(({ selector, handler, description }) => {
            this.attachButtonHandler(selector, handler, description);
        });
        
        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è delete –∫–Ω–æ–ø–æ–∫
        this.initializeDeleteButtons();
    }
    
    attachButtonHandler(selector, handler, description) {
        const elements = document.querySelectorAll(selector);
        
        elements.forEach(element => {
            if (!element.hasAttribute('master-attached')) {
                // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ listeners
                const newElement = element.cloneNode(true);
                element.replaceWith(newElement);
                
                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π listener
                newElement.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    console.log(`üéØ ${description} –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞`);
                    
                    try {
                        handler();
                    } catch (error) {
                        console.error(`üéØ –ü–æ–º–∏–ª–∫–∞ –≤ ${description}:`, error);
                        this.showError(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
                    }
                });
                
                newElement.setAttribute('master-attached', 'true');
                console.log(`üéØ ${description} –ø—Ä–∏–≤'—è–∑–∞–Ω–∞`);
            }
        });
    }
    
    initializeDeleteButtons() {
        const deleteButtons = document.querySelectorAll('.delete-client-btn');
        
        deleteButtons.forEach(button => {
            if (!button.hasAttribute('master-attached')) {
                const clientId = button.dataset.clientId;
                const clientName = button.dataset.clientName || '–∫–ª—ñ—î–Ω—Ç–∞';
                
                const newButton = button.cloneNode(true);
                button.replaceWith(newButton);
                
                newButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    console.log(`üéØ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
                    this.handleDeleteClient(clientId, clientName);
                });
                
                newButton.setAttribute('master-attached', 'true');
            }
        });
    }
    
    initializeForms() {
        // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –∫–ª—ñ—î–Ω—Ç–∞
        const clientForm = document.querySelector('#client-form form, form');
        if (clientForm) {
            clientForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleSaveClient();
            });
        }
    }
    
    initializeModals() {
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
        
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø–æ –∫–ª—ñ–∫—É –Ω–∞ backdrop
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal') || e.target.classList.contains('modal-backdrop')) {
                this.closeModal(e.target.closest('.modal'));
            }
        });
    }
    
    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ñ event listeners
        window.addEventListener('error', (e) => this.handleGlobalError(e));
        window.addEventListener('unhandledrejection', (e) => this.handlePromiseRejection(e));
        
        // Network events
        window.addEventListener('online', () => this.handleNetworkOnline());
        window.addEventListener('offline', () => this.handleNetworkOffline());
    }
    
    setupDOMObserver() {
        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ DOM –¥–ª—è –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
        this.domObserver = new MutationObserver((mutations) => {
            let needsReinit = false;
            
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        if (node.classList?.contains('delete-client-btn') || 
                            node.querySelector?.('.delete-client-btn')) {
                            needsReinit = true;
                        }
                    }
                });
            });
            
            if (needsReinit) {
                setTimeout(() => {
                    console.log('üéØ –†–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫');
                    this.initializeDeleteButtons();
                }, 100);
            }
        });
        
        this.domObserver.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
    
    async loadInitialData() {
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
            await this.loadClients();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            this.updateUI();
            
        } catch (error) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:', error);
        }
    }
    
    // ============ –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ============
    
    async handleLogout() {
        console.log('üéØ –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏');
        
        const confirmed = confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏?');
        if (!confirmed) return;
        
        try {
            // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            localStorage.clear();
            sessionStorage.clear();
            
            // –û—á–∏—â—É—î–º–æ cookies
            document.cookie.split(";").forEach(c => {
                const eqPos = c.indexOf("=");
                const name = eqPos > -1 ? c.substr(0, eqPos) : c;
                document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/";
            });
            
            // API –≤–∏–∫–ª–∏–∫ logout
            await fetch('/api/logout', {
                method: 'POST',
                credentials: 'include'
            });
            
        } catch (error) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ logout API:', error);
        } finally {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            window.location.href = '/login';
        }
    }
    
    handleHelp() {
        console.log('üéØ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏');
        
        const onboardingModal = document.getElementById('onboarding-modal');
        if (onboardingModal) {
            onboardingModal.style.display = 'flex';
            onboardingModal.style.zIndex = '10000';
            
            // –§–æ–∫—É—Å –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            onboardingModal.focus();
        } else {
            // Fallback - –ø–æ–∫–∞–∑—É—î–º–æ alert –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
            alert(`–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é:
1. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞
2. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É  
3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑"
4. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏`);
        }
    }
    
    async handleStartAnalysis() {
        if (window.MASTER_STATE.isAnalyzing) {
            alert('–ê–Ω–∞–ª—ñ–∑ —É–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.');
            return;
        }
        
        console.log('üéØ –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É');
        
        const textArea = document.getElementById('analysis-text');
        const clientSelect = document.getElementById('client-select');
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!textArea || !textArea.value.trim()) {
            alert('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
            textArea?.focus();
            return;
        }
        
        if (!clientSelect || !clientSelect.value) {
            alert('–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞');
            clientSelect?.focus();
            return;
        }
        
        const text = textArea.value.trim();
        const clientId = parseInt(clientSelect.value);
        
        if (text.length < 20) {
            alert('–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 20 —Å–∏–º–≤–æ–ª—ñ–≤.');
            textArea.focus();
            return;
        }
        
        if (text.length > 100000) {
            alert('–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 100,000 —Å–∏–º–≤–æ–ª—ñ–≤.');
            textArea.focus();
            return;
        }
        
        window.MASTER_STATE.isAnalyzing = true;
        
        try {
            await this.performAnalysis(text, clientId);
        } catch (error) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: ' + error.message);
        } finally {
            window.MASTER_STATE.isAnalyzing = false;
        }
    }
    
    handleNewClient() {
        console.log('üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞');
        
        const welcomeScreen = document.getElementById('welcome-screen');
        const clientForm = document.getElementById('client-form');
        
        if (welcomeScreen) welcomeScreen.style.display = 'none';
        if (clientForm) {
            clientForm.style.display = 'block';
            
            // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É
            this.clearClientForm();
            
            // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–æ–º—É –ø–æ–ª—ñ
            const firstField = clientForm.querySelector('input, textarea, select');
            if (firstField) firstField.focus();
        }
    }
    
    async handleSaveClient() {
        console.log('üéØ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');
        
        const clientData = this.getClientFormData();
        
        if (!clientData.company?.trim()) {
            alert('–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é');
            const companyField = document.getElementById('company');
            if (companyField) companyField.focus();
            return;
        }
        
        try {
            const response = await fetch('/api/clients', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify(clientData)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                alert('–ö–ª—ñ—î–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!');
                await this.loadClients();
                this.showWelcomeScreen();
            } else {
                throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            }
            
        } catch (error) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ' + error.message);
        }
    }
    
    handleCancelClient() {
        console.log('üéØ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');
        
        const hasData = this.checkClientFormHasData();
        
        if (hasData) {
            const confirmed = confirm('–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞? –ù–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ.');
            if (!confirmed) return;
        }
        
        this.showWelcomeScreen();
    }
    
    async handleDeleteClient(clientId, clientName) {
        console.log(`üéØ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
        
        const confirmed = confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ "${clientName}"?\n\n–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞.`);
        if (!confirmed) return;
        
        try {
            const response = await fetch(`/api/clients/${clientId}`, {
                method: 'DELETE',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                alert('–ö–ª—ñ—î–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ');
                await this.loadClients();
                this.updateUI();
            } else {
                throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
            }
            
        } catch (error) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ' + error.message);
        }
    }
    
    // ============ –ê–ù–ê–õ–Ü–ó –¢–ï–ö–°–¢–£ ============
    
    async performAnalysis(text, clientId) {
        console.log('üéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–∫—Å—Ç—É...');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        this.showAnalysisProgress();
        
        try {
            const formData = new FormData();
            formData.append('client_id', clientId.toString());
            formData.append('text', text);
            formData.append('method', 'text');
            
            // –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–ª—ñ—î–Ω—Ç–∞ —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            const clientProfile = this.getCurrentClientProfile(clientId);
            if (clientProfile) {
                formData.append('profile', JSON.stringify(clientProfile));
            }
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => {
                controller.abort();
            }, 600000); // 10 —Ö–≤–∏–ª–∏–Ω
            
            const response = await fetch('/api/analyze', {
                method: 'POST',
                body: formData,
                credentials: 'include',
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            await this.processAnalysisStream(response);
            
        } catch (error) {
            if (error.name === 'AbortError') {
                throw new Error('–ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º-–∞—É—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –∑ –∫–æ—Ä–æ—Ç—à–∏–º —Ç–µ–∫—Å—Ç–æ–º.');
            }
            throw error;
        }
    }
    
    async processAnalysisStream(response) {
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        
        let buffer = '';
        let highlights = [];
        let currentProgress = 0;
        let failedChunks = 0;
        
        try {
            while (true) {
                const { done, value } = await reader.read();
                
                if (done) break;
                
                buffer += decoder.decode(value, { stream: true });
                
                const lines = buffer.split('\n');
                buffer = lines.pop() || '';
                
                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            const data = JSON.parse(line.slice(6));
                            await this.handleAnalysisData(data, highlights, currentProgress, failedChunks);
                        } catch (parseError) {
                            console.warn('üéØ –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É SSE:', parseError);
                        }
                    }
                }
            }
        } finally {
            reader.releaseLock();
        }
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.displayAnalysisResults(highlights);
    }
    
    async handleAnalysisData(data, highlights, currentProgress, failedChunks) {
        switch (data.type) {
            case 'progress':
            case 'analysis_started':
                currentProgress = Math.min(currentProgress + 5, 90);
                this.updateAnalysisProgress(currentProgress, data.message || '–ê–Ω–∞–ª—ñ–∑—É—é...');
                break;
                
            case 'highlight':
                highlights.push(data);
                this.updateAnalysisProgress(
                    currentProgress,
                    `–ó–Ω–∞–π–¥–µ–Ω–æ ${highlights.length} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤...`
                );
                break;
                
            case 'merged_highlights':
                if (data.items && Array.isArray(data.items)) {
                    highlights.splice(0, highlights.length, ...data.items);
                }
                break;
                
            case 'summary':
                this.displayAnalysisSummary(data);
                break;
                
            case 'barometer':
                this.displayAnalysisBarometer(data);
                break;
                
            case 'complete':
                this.updateAnalysisProgress(100, '–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
                break;
                
            case 'error':
                if (data.chunkNumber) {
                    failedChunks++;
                    console.warn(`üéØ Chunk ${data.chunkNumber} failed: ${data.message}`);
                    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —ñ–Ω—à–∏—Ö chunks
                } else {
                    throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É');
                }
                break;
        }
    }
    
    // ============ –£–¢–Ü–õ–Ü–¢–ò ============
    
    getClientFormData() {
        const formData = {};
        
        const fields = [
            'company', 'negotiator', 'sector', 'goal', 
            'decision_criteria', 'constraints', 'user_goals', 
            'client_goals', 'weekly_hours', 'offered_services',
            'deadlines', 'notes'
        ];
        
        fields.forEach(fieldName => {
            const field = document.getElementById(fieldName) || 
                         document.querySelector(`[name="${fieldName}"]`);
            
            if (field) {
                if (fieldName === 'weekly_hours') {
                    formData[fieldName] = parseInt(field.value) || 0;
                } else {
                    formData[fieldName] = field.value.trim();
                }
            }
        });
        
        return formData;
    }
    
    clearClientForm() {
        const form = document.getElementById('client-form');
        if (form) {
            const fields = form.querySelectorAll('input, textarea, select');
            fields.forEach(field => {
                field.value = '';
            });
        }
    }
    
    checkClientFormHasData() {
        const formData = this.getClientFormData();
        return Object.values(formData).some(value => 
            value && value.toString().trim() !== '' && value !== 0
        );
    }
    
    getCurrentClientProfile(clientId) {
        const client = window.MASTER_STATE.clients.find(c => c.id == clientId);
        if (!client) return null;
        
        return {
            company: client.company || '',
            negotiator: client.negotiator || '',
            sector: client.sector || '',
            goal: client.goal || '',
            criteria: client.decision_criteria || '',
            constraints: client.constraints || ''
        };
    }
    
    async loadClients() {
        try {
            const response = await fetch('/api/clients', {
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                window.MASTER_STATE.clients = result.clients || [];
                this.updateClientSelect();
            }
            
        } catch (error) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
        }
    }
    
    // ============ UI –ú–ï–¢–û–î–ò ============
    
    showWelcomeScreen() {
        const welcomeScreen = document.getElementById('welcome-screen');
        const clientForm = document.getElementById('client-form');
        const analysisDashboard = document.getElementById('analysis-dashboard');
        
        if (welcomeScreen) welcomeScreen.style.display = 'block';
        if (clientForm) clientForm.style.display = 'none';
        if (analysisDashboard) analysisDashboard.style.display = 'none';
    }
    
    showAnalysisProgress() {
        const progressSection = document.querySelector('.analysis-progress');
        const resultsSection = document.getElementById('analysis-results');
        
        if (progressSection) progressSection.style.display = 'block';
        if (resultsSection) resultsSection.style.display = 'block';
        
        this.updateAnalysisProgress(0, '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –∞–Ω–∞–ª—ñ–∑—É...');
    }
    
    updateAnalysisProgress(percentage, message) {
        const progressBar = document.getElementById('live-progress-percentage');
        const progressText = document.getElementById('progress-text');
        
        if (progressBar) progressBar.textContent = Math.round(percentage) + '%';
        if (progressText) progressText.textContent = message;
    }
    
    displayAnalysisResults(highlights) {
        console.log(`üéØ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${highlights.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É`);
        
        const resultsContainer = document.getElementById('highlights-list');
        if (!resultsContainer) return;
        
        if (highlights.length === 0) {
            resultsContainer.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-check-circle"></i>
                    <h3>–ü—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–¢–µ–∫—Å—Ç –≤–∏–≥–ª—è–¥–∞—î —á–∏—Å—Ç–∏–º –≤—ñ–¥ –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ–∫</p>
                </div>
            `;
            return;
        }
        
        resultsContainer.innerHTML = highlights.map((highlight, index) => `
            <div class="highlight-item ${highlight.category || 'manipulation'}" data-index="${index}">
                <div class="highlight-header">
                    <span class="highlight-number">#${index + 1}</span>
                    <span class="highlight-label">${highlight.label || `–ü—Ä–æ–±–ª–µ–º–∞ ${index + 1}`}</span>
                    <span class="highlight-category ${highlight.category}">
                        ${this.getCategoryDisplayName(highlight.category)}
                    </span>
                    <span class="highlight-severity severity-${highlight.severity || 1}">
                        –†—ñ–≤–µ–Ω—å ${highlight.severity || 1}
                    </span>
                </div>
                <div class="highlight-content">
                    <div class="highlight-text">"${this.escapeHtml(highlight.text)}"</div>
                    <div class="highlight-explanation">${this.escapeHtml(highlight.explanation || '–ù–µ–º–∞—î –ø–æ—è—Å–Ω–µ–Ω–Ω—è')}</div>
                </div>
            </div>
        `).join('');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
        this.updateResultsCounters(highlights);
    }
    
    getCategoryDisplayName(category) {
        const names = {
            'manipulation': '–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è',
            'cognitive_bias': '–ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω–µ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è', 
            'rhetological_fallacy': '–õ–æ–≥—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞'
        };
        return names[category] || '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ';
    }
    
    updateResultsCounters(highlights) {
        const totalElement = document.getElementById('total-highlights-count');
        if (totalElement) totalElement.textContent = highlights.length;
        
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        const counters = {
            manipulation: 0,
            cognitive_bias: 0,
            rhetological_fallacy: 0
        };
        
        highlights.forEach(h => {
            if (counters.hasOwnProperty(h.category)) {
                counters[h.category]++;
            }
        });
        
        Object.keys(counters).forEach(category => {
            const element = document.getElementById(`${category}-count`);
            if (element) element.textContent = counters[category];
        });
    }
    
    updateClientSelect() {
        const clientSelect = document.getElementById('client-select');
        if (!clientSelect) return;
        
        const currentValue = clientSelect.value;
        
        clientSelect.innerHTML = '<option value="">–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞...</option>' +
            window.MASTER_STATE.clients.map(client => 
                `<option value="${client.id}">${this.escapeHtml(client.company)}</option>`
            ).join('');
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (currentValue) {
            clientSelect.value = currentValue;
        }
    }
    
    updateUI() {
        this.updateClientSelect();
        // –Ü–Ω—à—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
    }
    
    // ============ –ú–û–î–ê–õ–¨–ù–Ü –í–Ü–ö–ù–ê ============
    
    closeAllModals() {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (modal.style.display !== 'none') {
                this.closeModal(modal);
            }
        });
    }
    
    closeModal(modal) {
        if (modal) {
            modal.style.display = 'none';
        }
    }
    
    // ============ –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ============
    
    handleGlobalError(errorEvent) {
        console.error('üéØ –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', errorEvent.error);
        
        // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É –¥–ª—è –¥–µ—è–∫–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
        const ignorableErrors = [
            'Script error',
            'Non-Error promise rejection captured',
            'ResizeObserver loop limit exceeded'
        ];
        
        if (ignorableErrors.some(err => errorEvent.message?.includes(err))) {
            return;
        }
        
        // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∞–ª–µ –Ω–µ –ø–µ—Ä–µ—Ä–∏–≤—É—î–º–æ —Ä–æ–±–æ—Ç—É –¥–æ–¥–∞—Ç–∫–∞
        this.logError('Global Error', errorEvent.error);
    }
    
    handlePromiseRejection(rejectionEvent) {
        console.error('üéØ –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è Promise:', rejectionEvent.reason);
        
        // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è AbortError
        if (rejectionEvent.reason?.name === 'AbortError') {
            rejectionEvent.preventDefault();
            return;
        }
        
        this.logError('Promise Rejection', rejectionEvent.reason);
        rejectionEvent.preventDefault();
    }
    
    handleNetworkOnline() {
        console.log('üéØ –ú–µ—Ä–µ–∂–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞');
        this.showNotification('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    }
    
    handleNetworkOffline() {
        console.log('üéØ –ú–µ—Ä–µ–∂–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞');
        this.showNotification('–í—ñ–¥—Å—É—Ç–Ω—î –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º', 'warning');
    }
    
    async logError(type, error) {
        try {
            await fetch('/api/log-error', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({
                    type,
                    error: error?.message || error?.toString() || 'Unknown error',
                    stack: error?.stack,
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent,
                    url: window.location.href
                })
            });
        } catch (logError) {
            console.error('üéØ –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è:', logError);
        }
    }
    
    // ============ –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ============
    
    showError(message) {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + message);
    }
    
    showNotification(message, type = 'info') {
        console.log(`üéØ ${type.toUpperCase()}: ${message}`);
        
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ toast notifications —Ç—É—Ç
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10001;
            background: ${type === 'success' ? '#4CAF50' : type === 'warning' ? '#FF9800' : '#2196F3'};
            color: white; padding: 12px 16px; border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
    
    showCriticalError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.innerHTML = `
            <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                        background: rgba(0,0,0,0.9); color: white; z-index: 10002;
                        display: flex; align-items: center; justify-content: center; font-family: Arial;">
                <div style="text-align: center; padding: 2rem; background: rgba(255,255,255,0.1); 
                            border-radius: 8px; max-width: 500px;">
                    <h2 style="color: #ff6b6b; margin-bottom: 1rem;">‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞</h2>
                    <p style="margin-bottom: 2rem; line-height: 1.5;">${message}</p>
                    <button onclick="window.location.reload()" 
                            style="background: #4CAF50; color: white; border: none; 
                                   padding: 12px 24px; border-radius: 4px; cursor: pointer; 
                                   font-size: 16px; margin-right: 10px;">
                        –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
                    </button>
                    <button onclick="this.closest('div').remove()" 
                            style="background: #666; color: white; border: none; 
                                   padding: 12px 24px; border-radius: 4px; cursor: pointer; 
                                   font-size: 16px;">
                        –ó–∞–∫—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(errorDiv);
    }
    
    // ============ –£–¢–Ü–õ–Ü–¢–ò ============
    
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    destroy() {
        if (this.domObserver) {
            this.domObserver.disconnect();
        }
        
        // –û—á–∏—â—É—î–º–æ event listeners
        this.eventListeners.forEach((listener, element) => {
            element.removeEventListener(listener.event, listener.handler);
        });
        
        window.MASTER_STATE.initialized = false;
    }
}

// –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º–∏
console.log('üéØ –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º–∏...');

window.addEventListener('DOMContentLoaded', () => {
    // –î–∞—î–º–æ —á–∞—Å —ñ–Ω—à–∏–º —Å–∫—Ä–∏–ø—Ç–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—è
    setTimeout(() => {
        console.log('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MasterAppController...');
        
        try {
            window.masterApp = new MasterAppController();
            console.log('üéØ üöÄ –ú–ê–°–¢–ï–† –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê! üöÄ');
        } catch (error) {
            console.error('üéØ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º–∏:', error);
        }
    }, 1500);
});

console.log('üéØ –ú–∞—Å—Ç–µ—Ä –§–Ü–• –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');